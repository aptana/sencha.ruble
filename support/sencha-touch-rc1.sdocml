<?xml version="1.0" encoding="UTF-8"?>
<!-- Aptana Studio support for the Sencha Touch RC 1 JavaScript Libary -->
<javascript><class superclass="Ext.DataView" type="Ext.List"><description>A mechanism for displaying data using a list layout template. List uses an Ext.XTemplate
as its internal templating mechanism, and is bound to an Ext.data.Store so that as the data 
in the store changes the view is automatically updated to reflect the changes.
The view also provides built-in behavior for many common events that can occur for its contained items
including itemtap, containertap, etc. as well as a built-in selection model. In order to use these
features, an itemSelector config must be provided for the DataView to determine what nodes it
will be working with.
Here is a simple example of a grouped Ext.List:
Ext.regModel('Contact', {
    fields: ['firstName', 'lastName']
});

var store = new Ext.data.JsonStore({
    model  : 'Contact',
    sorters: 'lastName',

    getGroupString : function(record) {
        return record.get('lastName')[0];
    },

    data: [
        {firstName: 'Tommy',   lastName: 'Maintz'},
        {firstName: 'Rob',     lastName: 'Dougan'},
        {firstName: 'Ed',      lastName: 'Spencer'},
        {firstName: 'Jamie',   lastName: 'Avins'},
        {firstName: 'Aaron',   lastName: 'Conran'},
        {firstName: 'Dave',    lastName: 'Kaneda'},
        {firstName: 'Michael', lastName: 'Mullany'},
        {firstName: 'Abraham', lastName: 'Elias'},
        {firstName: 'Jay',     lastName: 'Robinson'},
        {firstName: 'Tommy',   lastName: 'Maintz'},
        {firstName: 'Rob',     lastName: 'Dougan'},
        {firstName: 'Ed',      lastName: 'Spencer'},
        {firstName: 'Jamie',   lastName: 'Avins'},
        {firstName: 'Aaron',   lastName: 'Conran'},
        {firstName: 'Dave',    lastName: 'Kaneda'},
        {firstName: 'Michael', lastName: 'Mullany'},
        {firstName: 'Abraham', lastName: 'Elias'},
        {firstName: 'Jay',     lastName: 'Robinson'}
    ]
});

var list = new Ext.List({
    tpl: '&lt;tpl for=&quot;.&quot;&gt;&lt;div class=&quot;contact&quot;&gt;{firstName} &lt;strong&gt;{lastName}&lt;/strong&gt;&lt;/div&gt;&lt;/tpl&gt;',

    itemSelector: 'div.contact',
    singleSelect: true,
    grouped     : true,
    indexBar    : true,
    
    store: store,
    
    floating     : true,
    width        : 350,
    height       : 370,
    centered     : true,
    modal        : true,
    hideOnMaskTap: false
});
list.show();</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="bindStore" scope="instance"><description>Changes the data store bound to this view and refreshes it.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="collectData" scope="instance"><description>Function which can be overridden which returns the data object passed to this
DataView's template to render the whole DataView.
This is usually an Array of data objects, each element of which is processed by an
XTemplate which uses '&lt;tpl for=&quot;.&quot;&gt;' to iterate over its supplied
data object as an Array. However, named properties may be placed into the data object to
provide non-repeating data such as headings, totals etc.</description></method><method name="deselect" scope="instance"><description>Deselects a record instance by record instance or index.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="findItemByChild" scope="instance"><description>Returns the template node the passed child belongs to, or null if it doesn't belong to one.</description></method><method name="findTargetByEvent" scope="instance"><description>Returns the template node by the Ext.EventObject or null if it is not found.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getNode" scope="instance"><description>Gets a template node.</description></method><method name="getNodes" scope="instance"><description>Gets a range nodes.</description></method><method name="getRecord" scope="instance"><description>Gets a record from a node</description></method><method name="getRecords" scope="instance"><description>Gets an array of the records from an array of nodes</description></method><method name="getSelectedNodes" scope="instance"><description>Gets the currently selected nodes.</description></method><method name="getSelectedRecords" scope="instance"><description>Gets an array of the selected records</description></method><method name="getSelectionCount" scope="instance"><description>Gets the number of selected nodes.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getStore" scope="instance"><description>Returns the store associated with this DataView.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="indexOf" scope="instance"><description>Finds the index of the passed node.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isSelected" scope="instance"><description>Returns true if the passed node is selected, else false.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="prepareData" scope="instance"><description>Function which can be overridden to provide custom formatting for each Record that is used by this
DataView's template to render each node.</description></method><method name="refresh" scope="instance"><description>Refreshes the view by reloading the data from the store and re-rendering the template.</description></method><method name="refreshNode" scope="instance"><description>Refreshes an individual node's data from the store.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="select" scope="instance"><description>Selects a record instance by record instance or index.</description></method><method name="setActiveGroup" scope="instance"><description>Set the current active group</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.fx.propHandler.path"><description/><constructors/><properties/><methods/></class><class superclass="Ext.util.Stateful" type="Ext.data.Model"><description>A Model represents some object that your application manages. For example, one might define a Model for Users, Products,
Cars, or any other real-world object that we want to model in the system. Models are registered via the model manager,
and are used by stores, which are in turn used by many of the data-bound components in Ext.
Models are defined as a set of fields and any arbitrary methods and properties relevant to the model. For example:
Ext.regModel('User', {
    fields: [
        {name: 'name',  type: 'string'},
        {name: 'age',   type: 'int'},
        {name: 'phone', type: 'string'},
        {name: 'alive', type: 'boolean', defaultValue: true}
    ],

    changeName: function() {
        var oldName = this.get('name'),
            newName = oldName + &quot; The Barbarian&quot;;

        this.set('name', newName);
    }
});
The fields array is turned into a MixedCollection automatically by the ModelMgr, and all
other functions and properties are copied to the new Model's prototype.
Now we can create instances of our User model and call any model logic we defined:
var user = Ext.ModelMgr.create({
    name : 'Conan',
    age  : 24,
    phone: '555-555-5555'
}, 'User');

user.changeName();
user.get('name'); //returns &quot;Conan The Barbarian&quot;
Validations
Models have built-in support for validations, which are executed against the validator functions in 
Ext.data.validations (see all validation functions). Validations are easy to add to models:
Ext.regModel('User', {
    fields: [
        {name: 'name',     type: 'string'},
        {name: 'age',      type: 'int'},
        {name: 'phone',    type: 'string'},
        {name: 'gender',   type: 'string'},
        {name: 'username', type: 'string'},
        {name: 'alive',    type: 'boolean', defaultValue: true}
    ],

    validations: [
        {type: 'presence',  field: 'age'},
        {type: 'length',    field: 'name',     min: 2},
        {type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
        {type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
        {type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
    ]
});
The validations can be run by simply calling the validate function, which returns a Ext.data.Errors
object:
var instance = Ext.ModelMgr.create({
    name: 'Ed',
    gender: 'Male',
    username: 'edspencer'
}, 'User');

var errors = instance.validate();
Associations
Models can have associations with other Models via belongsTo and 
hasMany associations. For example, let's say we're writing a blog administration
application which deals with Users, Posts and Comments. We can express the relationships between these models like this:
Ext.regModel('Post', {
    fields: ['id', 'user_id'],

    belongsTo: 'User',
    hasMany  : {model: 'Comment', name: 'comments'}
});

Ext.regModel('Comment', {
    fields: ['id', 'user_id', 'post_id'],

    belongsTo: 'Post'
});

Ext.regModel('User', {
    fields: ['id'],

    hasMany: [
        'Post',
        {model: 'Comment', name: 'comments'}
    ]
});
See the docs for Ext.data.BelongsToAssociation and Ext.data.HasManyAssociation for details on the usage
and configuration of associations. Note that associations can also be specified like this:
Ext.regModel('User', {
    fields: ['id'],

    associations: [
        {type: 'hasMany', model: 'Post',    name: 'posts'},
        {type: 'hasMany', model: 'Comment', name: 'comments'}
    ]
});</description><constructors/><properties/><methods><method name="Model.id" scope="instance"><description>Generates a sequential id. This method is typically called when a record is created
and no id has been specified. The returned id takes the form:
&#123;PREFIX}-&#123;AUTO_ID}.
PREFIX : StringExt.data.Model.PREFIX
(defaults to 'ext-record')
AUTO_ID : StringExt.data.Model.AUTO_ID
(defaults to 1 initially)
</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="commit" scope="instance"><description>Usually called by the Ext.data.Store which owns the model instance.
Commits all changes made to the instance since either creation or the last commit operation.
Developers should subscribe to the Ext.data.Store.update event
to have their code notified of commit operations.</description></method><method name="copy" scope="instance"><description>Creates a copy (clone) of this Model instance.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="get" scope="instance"><description>Returns the value of the given field</description></method><method name="getChanges" scope="instance"><description>Gets a hash of only the fields that have been modified since this Model was created or commited.</description></method><method name="getId" scope="instance"><description>Returns the unique ID allocated to this model instance as defined by idProperty</description></method><method name="getProxy" scope="instance"><description>Returns the configured Proxy for this Model</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isModified" scope="instance"><description>Returns true if the passed field name has been modified
since the load or last commit.</description></method><method name="join" scope="instance"><description>Tells this model instance that it has been added to a store</description></method><method name="load" scope="instance"><description>Asynchronously loads a model instance by id. Sample usage:
MyApp.User = Ext.regModel('User', {
    fields: [
        {name: 'id', type: 'int'},
        {name: 'name', type: 'string'}
    ]
});

MyApp.User.load(10, {
    scope: this,
    failure: function(record, operation) {
        //do something if the load failed
    },
    success: function(record, operation) {
        //do something if the load succeeded
    },
    callback: function(record, operation) {
        //do something whether the load succeeded or failed
    }
});</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="reject" scope="instance"><description>Usually called by the Ext.data.Store to which this model instance has been joined.
Rejects all changes made to the model instance since either creation, or the last commit operation.
Modified fields are reverted to their original values.
Developers should subscribe to the Ext.data.Store.update event
to have their code notified of reject operations.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="save" scope="instance"><description>Saves the model instance using the configured proxy</description></method><method name="set" scope="instance"><description>Sets the given field to the given value, marks the instance as dirty</description></method><method name="setDirty" scope="instance"><description>Marks this Record as dirty.  This method
is used interally when adding phantom records to a
writer enabled store.
Marking a record dirty causes the phantom to
be returned by Ext.data.Store.getModifiedRecords where it will
have a create action composed for it during store save
operations.</description></method><method name="setId" scope="instance"><description>Sets the model instance's id field to the given id</description></method><method name="setProxy" scope="instance"><description>Sets the Proxy to use for this model. Accepts any options that can be accepted by Ext.data.ProxyMgr.create</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="unjoin" scope="instance"><description>Tells this model instance that it has been removed from the store</description></method><method name="validate" scope="instance"><description>Validates the current data against all of its configured validations and returns an 
Errors object</description></method></methods></class><class superclass="Ext.fx2.target.Sprite" type="Ext.fx2.target.SpriteGroup"><description/><constructors/><properties/><methods/></class><class superclass="Ext.DataPanel" type="Ext.IndexBar"><description>IndexBar is a component used to display a list of data (primarily an alphabet) which can then be used to quickly
navigate through a list (see Ext.List) of data. When a user taps on an item in the Ext.IndexBar, it will fire
the index event.
Here is an example of the usage in a Ext.List:
Ext.regModel('Contact', {
    fields: ['firstName', 'lastName']
});

var store = new Ext.data.JsonStore({
    model  : 'Contact',
    sorters: 'lastName',

    getGroupString : function(record) {
        return record.get('lastName')[0];
    },

    data: [
        {firstName: 'Tommy',   lastName: 'Maintz'},
        {firstName: 'Rob',     lastName: 'Dougan'},
        {firstName: 'Ed',      lastName: 'Spencer'},
        {firstName: 'Jamie',   lastName: 'Avins'},
        {firstName: 'Aaron',   lastName: 'Conran'},
        {firstName: 'Dave',    lastName: 'Kaneda'},
        {firstName: 'Michael', lastName: 'Mullany'},
        {firstName: 'Abraham', lastName: 'Elias'},
        {firstName: 'Jay',     lastName: 'Robinson'},
        {firstName: 'Tommy',   lastName: 'Maintz'},
        {firstName: 'Rob',     lastName: 'Dougan'},
        {firstName: 'Ed',      lastName: 'Spencer'},
        {firstName: 'Jamie',   lastName: 'Avins'},
        {firstName: 'Aaron',   lastName: 'Conran'},
        {firstName: 'Dave',    lastName: 'Kaneda'},
        {firstName: 'Michael', lastName: 'Mullany'},
        {firstName: 'Abraham', lastName: 'Elias'},
        {firstName: 'Jay',     lastName: 'Robinson'}
    ]
});

var list = new Ext.List({
    tpl: '&lt;tpl for=&quot;.&quot;&gt;&lt;div class=&quot;contact&quot;&gt;{firstName} &lt;strong&gt;{lastName}&lt;/strong&gt;&lt;/div&gt;&lt;/tpl&gt;',

    itemSelector: 'div.contact',
    singleSelect: true,
    grouped     : true,
    indexBar    : true,

    store: store,

    floating     : true,
    width        : 350,
    height       : 370,
    centered     : true,
    modal        : true,
    hideOnMaskTap: false
});
list.show();
Alternatively you can initate the Ext.IndexBar component manually in a custom component by using something
similar to the following example:

var indexBar = new Ext.IndexBar({
    dock    : 'right',
    overlay : true,
    alphabet: true
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="collectData" scope="instance"><description>Function which can be overridden which returns the data object passed to this
DataPanel's template to render the whole DataPanel.
This is usually an Array of data objects, each element of which is processed by an
XTemplate which uses '&lt;tpl for=&quot;.&quot;&gt;' to iterate over its supplied
data object as an Array. However, named properties may be placed into the data object to
provide non-repeating data such as headings, totals etc.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="findItemFromChild" scope="instance"><description>Returns the template node the passed child belongs to, or null if it doesn't belong to one.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getNode" scope="instance"><description>Gets a template node.</description></method><method name="getNodes" scope="instance"><description>Gets a range nodes.</description></method><method name="getRecord" scope="instance"><description>Gets a record from a node</description></method><method name="getRecords" scope="instance"><description>Gets an array of the records from an array of nodes</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getStore" scope="instance"><description>Returns the store associated with this DataPanel.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="indexOf" scope="instance"><description>Finds the index of the passed node.</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isHorizontal" scope="instance"><description>Method to determine whether this Sortable is currently sorting.</description></method><method name="isVertical" scope="instance"><description>Method to determine whether this Sortable is currently disabled.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="onRemoveItem" scope="instance"><description>Callback when the item is removed</description></method><method name="onUpdateItem" scope="instance"><description>Callback when the item is updated</description></method><method name="prepareData" scope="instance"><description>Function which can be overridden to provide custom formatting for each Record that is used by this
DataPanel's template to render each node.</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="refresh" scope="instance"><description>Refreshes the view by reloading the data from the store and re-rendering the template.</description></method><method name="refreshNode" scope="instance"><description>Refreshes an individual node's data from the store.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Ext.Component" type="Ext.chart.Chart"><description>The Ext.chart package provides the capability to visualize data with flash based charting.
Each chart binds directly to an Ext.data.Store enabling automatic updates of the chart.</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="alignAxes" scope="instance"><description>Adjust the dimensions and positions of each axis and the chart body area after accounting
for the space taken up on each side by the axes and legend.</description></method><method name="bindStore" scope="instance"><description>Changes the data store bound to this chart and refreshes it.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSeriesStyles" scope="instance"><description>Sets the styles on all series in the Chart.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setStyle" scope="instance"><description>Sets a single style value on the Chart instance.</description></method><method name="setStyles" scope="instance"><description>Resets all styles on the Chart instance.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.util.MixedCollection" type="Ext.data.Errors"><description>Wraps a collection of validation error responses and provides convenient functions for
accessing and errors for specific fields.
Usually this class does not need to be instantiated directly - instances are instead created
automatically when validate on a model instance:
//validate some existing model instance - in this case it returned 2 failures messages
var errors = myModel.validate();

errors.isValid(); //false

errors.length; //2
errors.getByField('name');  // [{field: 'name',  error: 'must be present'}]
errors.getByField('title'); // [{field: 'title', error: 'is too short'}]</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds an item to the collection. Fires the add event when complete.</description></method><method name="addAll" scope="instance"><description>Adds all elements of an Array or an Object to the collection.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clear" scope="instance"><description>Removes all items from the collection.  Fires the clear event when complete.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="clone" scope="instance"><description>Creates a shallow copy of this collection</description></method><method name="contains" scope="instance"><description>Returns true if the collection contains the passed Object as an item.</description></method><method name="containsKey" scope="instance"><description>Returns true if the collection contains the passed Object as a key.</description></method><method name="each" scope="instance"><description>Executes the specified function once for every item in the collection, passing the following arguments:

item : MixedThe collection item
index : NumberThe item's index
length : NumberThe total number of items in the collection

The function should return a boolean value. Returning false from the function will stop the iteration.</description></method><method name="eachKey" scope="instance"><description>Executes the specified function once for every key in the collection, passing each
key, and its associated item as the first two parameters.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="filter" scope="instance"><description>Filters the objects in this collection by a set of Filters, or by a single
property/value pair with optional parameters for substring matching and case sensitivity. See
Filter for an example of using Filter objects (preferred). Alternatively, 
MixedCollection can be easily filtered by property like this:
//create a simple store with a few people defined
var people = new Ext.util.MixedCollection();
people.addAll([
    {id: 1, age: 25, name: 'Ed'},
    {id: 2, age: 24, name: 'Tommy'},
    {id: 3, age: 24, name: 'Arne'},
    {id: 4, age: 26, name: 'Aaron'}
]);

//a new MixedCollection containing only the items where age == 24
var middleAged = people.filter('age', 24);</description></method><method name="filterBy" scope="instance"><description>Filter by a function. Returns a new collection that has been filtered.
The passed function will be called with each object in the collection.
If the function returns true, the value is included otherwise it is filtered.</description></method><method name="findBy" scope="instance"><description>Returns the first item in the collection which elicits a true return value from the
passed selection function.</description></method><method name="findIndex" scope="instance"><description>Finds the index of the first matching object in this collection by a specific property/value.</description></method><method name="findIndexBy" scope="instance"><description>Find the index of the first matching object in this collection by a function.
If the function returns true it is considered a match.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="first" scope="instance"><description>Returns the first item in the collection.</description></method><method name="get" scope="instance"><description>This method calls item().
Returns the item associated with the passed key OR index. Key has priority
over index.  This is the equivalent of calling key first, then if
nothing matched calling getAt.</description></method><method name="getAt" scope="instance"><description>Returns the item at the specified index.</description></method><method name="getByField" scope="instance"><description>Returns all of the errors for the given field</description></method><method name="getByKey" scope="instance"><description>Returns the item associated with the passed key.</description></method><method name="getCount" scope="instance"><description>Returns the number of items in the collection.</description></method><method name="getKey" scope="instance"><description>MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
simply returns item.id but you can provide your own implementation
to return a different value as in the following examples:// normal way
var mc = new Ext.util.MixedCollection();
mc.add(someEl.dom.id, someEl);
mc.add(otherEl.dom.id, otherEl);
//and so on

// using getKey
var mc = new Ext.util.MixedCollection();
mc.getKey = function(el){
   return el.dom.id;
};
mc.add(someEl);
mc.add(otherEl);

// or via the constructor
var mc = new Ext.util.MixedCollection(false, function(el){
   return el.dom.id;
});
mc.add(someEl);
mc.add(otherEl);</description></method><method name="getRange" scope="instance"><description>Returns a range of items in this collection</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="indexOf" scope="instance"><description>Returns index within the collection of the passed Object.</description></method><method name="indexOfKey" scope="instance"><description>Returns index within the collection of the passed key.</description></method><method name="insert" scope="instance"><description>Inserts an item at the specified index in the collection. Fires the add event when complete.</description></method><method name="isValid" scope="instance"><description>Returns true if there are no errors in the collection</description></method><method name="last" scope="instance"><description>Returns the last item in the collection.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Remove an item from the collection.</description></method><method name="removeAll" scope="instance"><description>Remove all items in the passed array from the collection.</description></method><method name="removeAt" scope="instance"><description>Remove an item from a specified index in the collection. Fires the remove event when complete.</description></method><method name="removeByKey" scope="instance"><description>Removed an item associated with the passed key fom the collection.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reorder" scope="instance"><description>Reorders each of the items based on a mapping from old index to new index. Internally this
just translates into a sort. The 'sort' event is fired whenever reordering has occured.</description></method><method name="replace" scope="instance"><description>Replaces an item in the collection. Fires the replace event when complete.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="sort" scope="instance"><description>Sorts this collection by item value with the passed comparison function.</description></method><method name="sortBy" scope="instance"><description>Sorts the collection by a single sorter function</description></method><method name="sortByKey" scope="instance"><description>Sorts this collection by keys.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Object" type="Ext.Anim"><description>Defines a type of Animation to be used for transitions.</description><constructors/><properties/><methods/></class><class superclass="Ext.fx2.target.CompositeElement" type="Ext.fx2.target.CompositeElementCSS"><description/><constructors/><properties/><methods/></class><class superclass="Ext.Component" type="Ext.Spacer"><description>By default the spacer component will take up a flex of 1 unless a width is set.
Example usage:
var toolbar = new Ext.Toolbar({
    title: 'Toolbar Title',
    
    items: [
        {xtype: 'spacer'},
        {
            xtype: 'Button',
            text : 'Button!'
        }
    ]
});</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.EventObject"><description>Just as Ext.Element wraps around a native DOM node, Ext.EventObject
wraps the browser's native event-object normalizing cross-browser differences,
such as which mouse button is clicked, keys pressed, mechanisms to stop
event-propagation along with a method to prevent default actions from taking place.
For example:
function handleClick(e, t){ // e is not a standard event object, it is a Ext.EventObject
    e.preventDefault();
    var target = e.getTarget(); // same as t (the target HTMLElement)
    ...
}
var myDiv = Ext.get(&quot;myDiv&quot;);  // get reference to an Ext.Element
myDiv.on(         // 'on' is shorthand for addListener
    &quot;click&quot;,      // perform an action on click of myDiv
    handleClick   // reference to the action handler
);
// other methods to do the same:
Ext.EventManager.on(&quot;myDiv&quot;, 'click', handleClick);
Ext.EventManager.addListener(&quot;myDiv&quot;, 'click', handleClick);</description><constructors/><properties/><methods/></class><class superclass="Ext.Component" type="Ext.Map"><description>Wraps a Google Map in an Ext.Component.
http://code.google.com/apis/maps/documentation/v3/introduction.html
To use this component you must include an additional JavaScript file from
Google.
&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.google.com/maps/api/js?sensor=true&quot;&gt;&amp;lt/script&gt;
An example of using the Map component:
var pnl = new Ext.Panel({
    fullscreen: true,
    items: [{
        xtype: 'map',
        useCurrentLocation: true
    }]
});</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Moves the map center to the designated coordinates hash of the form:

 { latitude : 37.381592,
  longitude : -122.135672
  }
or a google.maps.LatLng object representing to the target location.</description></method></methods></class><class superclass="Object" type="Ext.fx2.Easing"><description>Easing is now calculated exclusively with the use of cubic-bezier curves and follows the
CSS3
specification for 'transition-timing-function'.
Standard CSS3 Easing Values:

ease: The ease function is equivalent to cubic-bezier(0.25, 0.1, 0.25, 1.0).
linear: The linear function is equivalent to cubic-bezier(0.0, 0.0, 1.0, 1.0).
ease-in: The ease-in function is equivalent to cubic-bezier(0.42, 0, 1.0, 1.0).
ease-out: The ease-out function is equivalent to cubic-bezier(0, 0, 0.58, 1.0).
ease-in-out: The ease-in-out function is equivalent to cubic-bezier(0.42, 0, 0.58, 1.0)
cubic-bezier: Specifies a cubic-bezier curve. The four values specify points P1 and P2 of
the curve as (x1, y1, x2, y2). All values must be in the range [0, 1] or the definition is invalid.
</description><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.util.TaskRunner"><description>Provides the ability to execute one or more arbitrary tasks in a multithreaded
manner.  Generally, you can use the singleton Ext.TaskMgr instead, but
if needed, you can create separate instances of TaskRunner.  Any number of
separate tasks can be started at any time and will run independently of each
other. Example usage:
// Start a simple clock task that updates a div once per second
var updateClock = function(){
    Ext.fly('clock').update(new Date().format('g:i:s A'));
} 
var task = {
    run: updateClock,
    interval: 1000 //1 second
}
var runner = new Ext.util.TaskRunner();
runner.start(task);

// equivalent using TaskMgr
Ext.TaskMgr.start({
    run: updateClock,
    interval: 1000
});
See the start method for details about how to configure a task object.
Also see Ext.util.DelayedTask.</description><constructors/><properties/><methods><method name="start" scope="instance"><description>Starts a new task.</description></method><method name="stop" scope="instance"><description>Stops an existing running task.</description></method><method name="stopAll" scope="instance"><description>Stops all tasks that are currently running.</description></method></methods></class><class superclass="Ext.fx2.target.Element" type="Ext.fx2.target.CompositeElement"><description/><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.util.JSON"><description>Modified version of Douglas Crockford&quot;s json.js that doesn&quot;t
mess with the Object prototype
http://www.json.org/js.html</description><constructors/><properties/><methods><method name="decode" scope="instance"><description>Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError unless the safe option is set.</description></method><method name="encode" scope="instance"><description>Encodes an Object, Array or other value</description></method><method name="encodeDate" scope="instance"><description>Encodes a Date. This returns the actual string which is inserted into the JSON string as the literal expression.
The returned value includes enclosing double quotation marks.
The default return format is &quot;yyyy-mm-ddThh:mm:ss&quot;.
To override this:Ext.util.JSON.encodeDate = function(d) {
     return d.format('&quot;Y-m-d&quot;');
     };</description></method></methods></class><class superclass="Object" type="Ext.data.validations"><description>This singleton contains a set of validation functions that can be used to validate any type
of data. They are most often used in Models, where they are automatically
set up and executed.</description><constructors/><properties/><methods><method name="exclusion" scope="instance"><description>Validates that the given value is present in the configured list</description></method><method name="format" scope="instance"><description>Returns true if the given value passes validation against the configured matcher regex</description></method><method name="inclusion" scope="instance"><description>Validates that the given value is present in the configured list</description></method><method name="length" scope="instance"><description>Returns true if the given value is between the configured min and max values</description></method><method name="presence" scope="instance"><description>Validates that the given value is present</description></method></methods></class><class superclass="Object" type="Ext.util.Format"><description>Reusable data formatting functions</description><constructors/><properties/><methods><method name="date" scope="instance"><description>Parse a value into a formatted date using the specified format pattern.</description></method><method name="ellipsis" scope="instance"><description>Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length</description></method><method name="escape" scope="instance"><description>Escapes the passed string for ' and \</description></method><method name="escapeRegex" scope="instance"><description>Escapes the passed string for use in a regular expression</description></method><method name="format" scope="instance"><description>Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
var cls = 'my-class', text = 'Some text';
var s = Ext.util.Format.format('&lt;div class=&quot;{0}&quot;&gt;{1}&lt;/div&gt;', cls, text);
// s now contains the string: '&lt;div class=&quot;my-class&quot;&gt;Some text&lt;/div&gt;'</description></method><method name="htmlDecode" scope="instance"><description>Convert certain characters (&amp;, &lt;, &gt;, and ') from their HTML character equivalents.</description></method><method name="htmlEncode" scope="instance"><description>Convert certain characters (&amp;, &lt;, &gt;, and ') to their HTML character equivalents for literal display in web pages.</description></method><method name="leftPad" scope="instance"><description>Pads the left side of a string with a specified character.  This is especially useful
for normalizing number and date strings.  Example usage:
var s = Ext.util.Format.leftPad('123', 5, '0');
// s now contains the string: '00123'</description></method><method name="toggle" scope="instance"><description>Utility function that allows you to easily switch a string between two alternating values.  The passed value
is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
they are already different, the first value passed in is returned.  Note that this method returns the new value
but does not change the current string.
// alternate sort directions
    sort = Ext.util.Format.toggle(sort, 'ASC', 'DESC');

    // instead of conditional logic:
    sort = (sort == 'ASC' ? 'DESC' : 'ASC');</description></method><method name="trim" scope="instance"><description>Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
var s = '  foo bar  ';
    alert('-' + s + '-');         //alerts &quot;- foo bar -&quot;
    alert('-' + Ext.util.Format.trim(s) + '-');  //alerts &quot;-foo bar-&quot;</description></method></methods></class><class superclass="Object" type="String"><description>These functions are available on every String object.</description><constructors/><properties/><methods><method name="format" scope="instance"><description>Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
var cls = 'my-class', text = 'Some text';
var s = Ext.util.Format.format('&lt;div class=&quot;{0}&quot;&gt;{1}&lt;/div&gt;', cls, text);
// s now contains the string: '&lt;div class=&quot;my-class&quot;&gt;Some text&lt;/div&gt;'</description></method></methods></class><class superclass="Object" type="Ext.util.Filter"><description>Represents a filter that can be applied to a MixedCollection. Can either simply
filter on a property/value pair or pass in a filter function with custom logic. Filters are always used in the context
of MixedCollections, though Stores frequently create them when filtering and searching on their
records. Example usage:
//set up a fictional MixedCollection containing a few people to filter on
var allNames = new Ext.util.MixedCollection();
allNames.addAll([
    {id: 1, name: 'Ed',    age: 25},
    {id: 2, name: 'Jamie', age: 37},
    {id: 3, name: 'Abe',   age: 32},
    {id: 4, name: 'Aaron', age: 26},
    {id: 5, name: 'David', age: 32}
]);

var ageFilter = new Ext.util.Filter({
    property: 'age',
    value   : 32
});

var longNameFilter = new Ext.util.Filter({
    filterFn: function(item) {
        return item.name.length &gt; 4;
    }
});

//a new MixedCollection with the 3 names longer than 4 characters
var longNames = allNames.filter(longNameFilter);

//a new MixedCollection with the 2 people of age 24:
var youngFolk = allNames.filter(ageFilter);</description><constructors/><properties/><methods/></class><class superclass="Ext.data.ClientProxy" type="Ext.data.WebStorageProxy"><description>WebStorageProxy is simply a superclass for the localStorage and 
sessionStorage proxies. It uses the new HTML5 key/value client-side storage 
objects to save model instances for offline use.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="clear" scope="instance"><description>Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage object</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setRecord" scope="instance"><description>Saves the given record in the Proxy. Runs each field's encode function (if present) to encode the data</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.SearchField"><description>Wraps an HTML5 search field. See FormPanel for example usage.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.Container" type="Ext.Media"><description>Provides a base class for audio/visual controls. Should not be used directly.</description><constructors/><properties/><methods><method name="" scope="instance"><description></description></method><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="pause" scope="instance"><description>Pauses media playback</description></method><method name="play" scope="instance"><description>Starts or resumes media playback</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="toggle" scope="instance"><description>Toggles the media playback state</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.AbstractManager" type="Ext.ModelMgr"><description/><constructors/><properties/><methods><method name="create" scope="instance"><description>Creates and returns an instance of whatever this manager manages, based on the supplied type and config object</description></method><method name="get" scope="instance"><description>Returns a component by id.
For additional details see Ext.util.MixedCollection.get.</description></method><method name="getModel" scope="instance"><description>Returns the Ext.data.Model for a given model name</description></method><method name="isRegistered" scope="instance"><description>Checks if a Component type is registered.</description></method><method name="onAvailable" scope="instance"><description>Registers a function that will be called when a Component with the specified id is added to the manager. This will happen on instantiation.</description></method><method name="register" scope="instance"><description>Registers an item to be managed</description></method><method name="registerType" scope="instance"><description>Registers a model definition. All model plugins marked with isDefault: true are bootstrapped
immediately, as are any addition plugins defined in the model config.</description></method><method name="unregister" scope="instance"><description>Unregisters a component by removing it from this manager</description></method></methods></class><class superclass="Object" type="Ext.supports"><description/><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.chart.Axis"><description>Defines a CartesianChart's vertical or horizontal axis.</description><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.DomHelper"><description>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating
elements via DOM or using HTML fragments. It also has the ability to create HTML fragment templates
from your DOM building code.
DomHelper element specification object
A specification object is used when creating elements. Attributes of this object
are assumed to be element attributes, except for 4 special attributes:

tag : The tag name of the element
children : or cnAn array of the
same kind of element definition objects to be created and appended. These can be nested
as deep as you want.
cls : The class attribute of the element.
This will end up being either the &quot;class&quot; attribute on a HTML fragment or className
for a DOM node, depending on whether DomHelper is using fragments or DOM.
html : The innerHTML for the element

Insertion methods
Commonly used insertion methods:

append : 
insertBefore : 
insertAfter : 
overwrite : 
createTemplate : 
insertHtml : 

Example
This is an example, where an unordered list with 3 children items is appended to an existing
element with id 'my-div':
 var dh = Ext.DomHelper; // create shorthand alias
// specification object
var spec = {
    id: 'my-ul',
    tag: 'ul',
    cls: 'my-list',
    // append children after creating
    children: [     // may also specify 'cn' instead of 'children'
        {tag: 'li', id: 'item0', html: 'List Item 0'},
        {tag: 'li', id: 'item1', html: 'List Item 1'},
        {tag: 'li', id: 'item2', html: 'List Item 2'}
    ]
};
var list = dh.append(
    'my-div', // the context element 'my-div' can either be the id or the actual node
    spec      // the specification object
);
Element creation specification parameters in this class may also be passed as an Array of
specification objects. This can be used to insert multiple sibling nodes into an existing
container very efficiently. For example, to add more list items to the example above:dh.append('my-ul', [
    {tag: 'li', id: 'item3', html: 'List Item 3'},
    {tag: 'li', id: 'item4', html: 'List Item 4'}
]);
Templating
The real power is in the built-in templating. Instead of creating or appending any elements,
createTemplate returns a Template object which can be used over and over to
insert new elements. Revisiting the example above, we could utilize templating this time:
// create the node
var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
// get template
var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});

for(var i = 0; i &lt; 5, i++){
    tpl.append(list, [i]); // use template to append to the actual node
}
An example using a template:var html = '&quot;{0}&quot; href=&quot;{1}&quot; class=&quot;nav&quot;&gt;{2}';

var tpl = new Ext.DomHelper.createTemplate(html);
tpl.append('blog-roll', ['link1', 'http://www.tommymaintz.com/', &quot;Tommy&#39;s Site&quot;]);
tpl.append('blog-roll', ['link2', 'http://www.avins.org/', &quot;Jamie&#39;s Site&quot;]);
The same example using named parameters:var html = '&quot;{id}&quot; href=&quot;{url}&quot; class=&quot;nav&quot;&gt;{text}';

var tpl = new Ext.DomHelper.createTemplate(html);
tpl.append('blog-roll', {
    id: 'link1',
    url: 'http://www.tommymaintz.com/',
    text: &quot;Tommy&#39;s Site&quot;
});
tpl.append('blog-roll', {
    id: 'link2',
    url: 'http://www.avins.org/',
    text: &quot;Jamie&#39;s Site&quot;
});
Compiling Templates
Templates are applied using regular expressions. The performance is great, but if
you are adding a bunch of DOM elements using the same template, you can increase
performance even further by &quot;compiling&quot; the template.
The way &quot;compile()&quot; works is the template is parsed and
broken up at the different variable points and a dynamic function is created and eval'ed.
The generated function performs string concatenation of these parts and the passed
variables instead of using regular expressions.
var html = '&quot;{id}&quot; href=&quot;{url}&quot; class=&quot;nav&quot;&gt;{text}';

var tpl = new Ext.DomHelper.createTemplate(html);
tpl.compile();

//... use template like normal
Performance Boost
DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead
of DOM can significantly boost performance.
Element creation specification parameters may also be strings. If useDom is false,
then the string is used as innerHTML. If useDom is true, a string specification
results in the creation of a text node. Usage:
Ext.DomHelper.useDom = true; // force it to use DOM; reduces performance</description><constructors/><properties/><methods><method name="append" scope="instance"><description>Creates new DOM element(s) and appends them to el.</description></method><method name="applyStyles" scope="instance"><description>Applies a style specification to an element.</description></method><method name="insertAfter" scope="instance"><description>Creates new DOM element(s) and inserts them after el.</description></method><method name="insertBefore" scope="instance"><description>Creates new DOM element(s) and inserts them before el.</description></method><method name="insertFirst" scope="instance"><description>Creates new DOM element(s) and inserts them as the first child of el.</description></method><method name="insertHtml" scope="instance"><description>Inserts an HTML fragment into the DOM.</description></method><method name="markup" scope="instance"><description>Returns the markup for the passed Element(s) config.</description></method><method name="overwrite" scope="instance"><description>Creates new DOM element(s) and overwrites the contents of el with them.</description></method></methods></class><class superclass="Ext.Media" type="Ext.Audio"><description>Provides a simple container for HTML5 Audio.
Recommended types: Uncompressed WAV and AIF audio, MP3 audio, and AAC-LC or HE-AAC audio
var pnl = new Ext.Panel({
    fullscreen: true,
    items: [{
        xtype: 'audio',
        url: &quot;who-goingmobile.mp3&quot;
    }]
});</description><constructors/><properties/><methods><method name="" scope="instance"><description></description></method><method name="" scope="instance"><description></description></method><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="pause" scope="instance"><description>Pauses media playback</description></method><method name="play" scope="instance"><description>Starts or resumes media playback</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="toggle" scope="instance"><description>Toggles the media playback state</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.form.TextField" type="Ext.form.EmailField"><description>Wraps an HTML5 email field. See FormPanel for example usage.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.anims"><description/><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.data.Association"><description>Base Association class. Not to be used directly as it simply supports its subclasses
Ext.data.HasManyAssociation and Ext.data.BelongsToAssociation.</description><constructors/><properties/><methods/></class><class superclass="Ext.layout.BoxLayout" type="Ext.layout.HBoxLayout"><description>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal
space between child items containing a numeric flex configuration.
This layout may also be used to set the heights of child items by configuring it with the align option.</description><constructors/><properties/><methods><method name="getLayoutItems" scope="instance"><description>Returns an array of child components.</description></method><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method></methods></class><class superclass="Ext.lib.Container" type="Ext.Container"><description>Base class for any Ext.BoxComponent that may contain other Components. Containers handle the
basic behavior of containing items, namely adding, inserting and removing items.
Layout
Container classes delegate the rendering of child Components to a layout
manager class which must be configured into the Container using the
layout configuration property.
When either specifying child items of a Container,
or dynamically adding Components to a Container, remember to
consider how you wish the Container to arrange those child elements, and
whether those child elements need to be sized using one of Ext's built-in
layout schemes. By default, Containers use the
AutoContainerLayout scheme which only
renders child components, appending them one after the other inside the
Container, and does not apply any sizing at all.
A common mistake is when a developer neglects to specify a
layout. If a Container is left to use the default
AutoContainerLayout scheme, none of its
child components will be resized, or changed in any way when the Container
is resized.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.data.Connection" type="Ext.Ajax"><description>A singleton instance of an Ext.data.Connection.</description><constructors/><properties/><methods><method name="abort" scope="instance"><description>Aborts any outstanding request.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isLoading" scope="instance"><description>Determine whether this object has a request outstanding.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="request" scope="instance"><description>Sends an HTTP request to a remote server.
Important: Ajax server requests are asynchronous, and this call will
return before the response has been received. Process any returned data
in a callback function.
Ext.Ajax.request({
   url: 'ajax_demo/sample.json',
   success: function(response, opts) {
      var obj = Ext.decode(response.responseText);
      console.dir(obj);
   },
   failure: function(response, opts) {
      console.log('server-side failure with status code ' + response.status);
   }
});
To execute a callback function in the correct scope, use the scope option.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="serializeForm" scope="instance"><description>Serialize the passed form into a url encoded string</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.Panel" type="Ext.NestedList"><description>NestedList provides a miller column interface to navigate between nested sets
and provide a clean interface with limited screen real-estate.
// store with data
var data = {
    text: 'Groceries',
    items: [{
        text: 'Drinks',
        items: [{
            text: 'Water',
            items: [{
                text: 'Sparkling',
                leaf: true
            },{
                text: 'Still',
                leaf: true
            }]
        },{
            text: 'Coffee',
            leaf: true
        },{
            text: 'Espresso',
            leaf: true
        },{
            text: 'Redbull',
            leaf: true
        },{
            text: 'Coke',
            leaf: true
        },{
            text: 'Diet Coke',
            leaf: true
        }]
    },{
        text: 'Fruit',
        items: [{
            text: 'Bananas',
            leaf: true
        },{
            text: 'Lemon',
            leaf: true
        }]
    },{
        text: 'Snacks',
        items: [{
            text: 'Nuts',
            leaf: true
        },{
            text: 'Pretzels',
            leaf: true
        },{
            text: 'Wasabi Peas',
            leaf: true
        }]
    },{
        text: 'Empty Category',
        items: []
    }]
};
Ext.regModel('ListItem', {
    fields: [{name: 'text', type: 'string'}]
});
var store = new Ext.data.TreeStore({
    model: 'ListItem',
    root: data,
    proxy: {
        type: 'ajax',
        reader: {
            type: 'tree',
            root: 'items'
        }
    }
});
var nestedList = new Ext.NestedList({
    fullscreen: true,
    title: 'Groceries',
    displayField: 'text',
    store: store
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDetailCard" scope="instance"><description>Implement getDetailCard to provide a final card for leaf nodes when useDetailCard
is enabled. getDetailCard will be passed the currentRecord and the parentRecord.
The default implementation will return false</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getItemTextTpl" scope="instance"><description>Override this method to provide custom template rendering of individual
nodes. The template will receive all data within the Record and will also
receive whether or not it is a leaf node.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getSubList" scope="instance"><description>Returns the subList for a specified node</description></method><method name="getTitleTextTpl" scope="instance"><description>Override this method to provide custom template rendering of titles/back
buttons when useTitleAsBackText is enabled.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="onBackTap" scope="instance"><description>Called when the backButton has been tapped</description></method><method name="onItemTap" scope="instance"><description>Called when an list item has been tapped</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Ext.chart.BarSeries" type="Ext.chart.ColumnSeries"><description>Series which displays its items as vertical bars</description><constructors/><properties/><methods><method name="getItemForPoint" scope="instance"><description>For a given x/y point relative to the Surface, find a corresponding item from this
series, if any.
For Bar/Column series, this is the bar directly under the point.</description></method><method name="getLabelSize" scope="instance"><description>Gets the dimensions of a given bar label. Uses a single hidden sprite to avoid
changing visible sprites.</description></method><method name="highlightItem" scope="instance"><description>Highlight the given series item.</description></method><method name="unHighlight" scope="instance"><description>Un-highlight any existing highlights</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.Select"><description>Simple Select field wrapper. Example usage:
new Ext.form.Select({
    options: [
        {text: 'First Option',  value: 'first'},
        {text: 'Second Option', value: 'second'},
        {text: 'Third Option',  value: 'third'}
    ]
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOptions" scope="instance"><description>Updates the underlying &lt;options&gt; list with new values.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.chart.CartesianSeries" type="Ext.chart.Line"><description>Series which displays data points connected by a line.</description><constructors/><properties/><methods><method name="getItemForPoint" scope="instance"><description>For a given x/y point relative to the Surface, find a corresponding item from this
series, if any.
For Line series, this snaps to the nearest vertex if the target point is within a
certain vertical distance from the line.</description></method><method name="highlightItem" scope="instance"><description>Highlight the given series item.</description></method><method name="unHighlight" scope="instance"><description>Un-highlight any existing highlights</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.data.Node"><description/><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="appendChild" scope="instance"><description>Insert node(s) as the last child node of this node.</description></method><method name="bubble" scope="instance"><description>Bubbles up the tree from this node, calling the specified function with each node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the bubble is stopped.</description></method><method name="cascadeBy" scope="instance"><description>Cascades down the tree from this node, calling the specified function with each node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the cascade is stopped on that branch.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="contains" scope="instance"><description>Returns true if this node is an ancestor (at any point) of the passed node.</description></method><method name="destroy" scope="instance"><description>Destroys the node.</description></method><method name="eachChild" scope="instance"><description>Interates the child nodes of this node, calling the specified function with each node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the iteration stops.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="findChild" scope="instance"><description>Finds the first child that has the attribute with the specified value.</description></method><method name="findChildBy" scope="instance"><description>Finds the first child by a custom function. The child matches if the function passed returns true.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getChildAt" scope="instance"><description>Returns the child node at the specified index.</description></method><method name="getDepth" scope="instance"><description>Returns depth of this node (the root node has a depth of 0)</description></method><method name="getOwnerTree" scope="instance"><description>Returns the tree this node is in.</description></method><method name="getPath" scope="instance"><description>Returns the path for this node. The path can be used to expand or select this node programmatically.</description></method><method name="hasChildNodes" scope="instance"><description>Returns true if this node has one or more child nodes, else false.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="indexOf" scope="instance"><description>Returns the index of a child node</description></method><method name="insertBefore" scope="instance"><description>Inserts the first node before the second node in this nodes childNodes collection.</description></method><method name="isAncestor" scope="instance"><description>Returns true if the passed node is an ancestor (at any point) of this node.</description></method><method name="isExpandable" scope="instance"><description>Returns true if this node has one or more child nodes, or if the expandable
node attribute is explicitly specified as true (see attributes), otherwise returns false.</description></method><method name="isFirst" scope="instance"><description>Returns true if this node is the first child of its parent</description></method><method name="isLast" scope="instance"><description>Returns true if this node is the last child of its parent</description></method><method name="isLeaf" scope="instance"><description>Returns true if this node is a leaf</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes this node from its parent</description></method><method name="removeAll" scope="instance"><description>Removes all child nodes from this node.</description></method><method name="removeChild" scope="instance"><description>Removes a child node from this node.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="replaceChild" scope="instance"><description>Replaces one child node in this node with another.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setId" scope="instance"><description>Changes the id of this node.</description></method><method name="sort" scope="instance"><description>Sorts this nodes children using the supplied sort function.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.util.Sortable"><description/><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="disable" scope="instance"><description>Disables sorting for this Sortable.</description></method><method name="enable" scope="instance"><description>Enables sorting for this Sortable.
This method is invoked immediately after construction of a Sortable unless
the disabled configuration is set to true.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Sortable is currently disabled.</description></method><method name="isHorizontal" scope="instance"><description>Method to determine whether this Sortable is currently sorting.</description></method><method name="isSorting" scope="instance"><description>Method to determine whether this Sortable is currently sorting.</description></method><method name="isVertical" scope="instance"><description>Method to determine whether this Sortable is currently disabled.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.data.Store" type="Ext.data.TreeStore"><description>Specialized Store for dealing with hierarchical data. These Stores are useful when powering tree-
like components such as Ext.tree.TreePanel and Ext.tree.TreeGrid. Because most databases
store data in a flat structure, TreeStore accepts data in this format and creates a tree internally.
TreeStore uses the nested set model of creating hierarchical structure from flat data (the concept is
explained in this tutorial), relying
on three pointer fields to be present in the Model - parent, left and right. This
format is well suited to popular databases like MySQL where rows are stored in a flat format.
Example usage
We'll set up a Store that consumes data a little like this (in this case we have some User data):
[
    {id: 1, first: 'Ed',    last: 'Spencer',  lft: 1,  rgt: 16},
    {id: 2, first: 'Abe',   last: 'Elias',    lft: 2,  rgt: 11, parentId: 1},
    {id: 3, first: 'Tommy', last: 'Maintz',   lft: 12, rgt: 15, parentId: 1},
    {id: 4, first: 'Aaron', last: 'Conran',   lft: 3,  rgt: 4,  parentId: 2},
    {id: 5, first: 'Dave',  last: 'Kaneda',   lft: 5,  rgt: 6,  parentId: 2},
    {id: 6, first: 'Jamie', last: 'Avins',    lft: 13, rgt: 14, parentId: 3},
    {id: 7, first: 'Jay',   last: 'Robinson', lft: 7,  rgt: 10, parentId: 5},
    {id: 8, first: 'Arne',  last: 'Bech',     lft: 8,  rgt: 9,  parentId: 7}
]
This structure requires a little explanation. The id, first and last fields are from
a fictional user model. The lft, rgt and parentId fields are required by TreeStore to
transform this flat data set into a tree structure. For an explanation of how these fields are used consult
the tutorial link above and see the
leftField, rightField and parentField configurations. Now let's set up a TreeStore
to load the data above from a url:
Ext.regModel('User', {
    fields: [
        {name: 'id',        type: 'int'},
        {name: 'parent_id', type: 'int'},
        {name: 'lft',       type: 'int'},
        {name: 'rgt',       type: 'int'},
        {name: 'first',     type: 'string'},
        {name: 'last',      type: 'string'}
    ]
});

var store = new Ext.data.TreeStore({
    model: 'User',
    proxy: {
        type: 'ajax',
        url : 'myTreeData.json'
    }
});
Above we create a simple model with all the fields outlined above, and a TreeStore that uses an
AjaxProxy to load data from a url (AjaxProxy creates a Ext.data.JsonReader)
by default to read the data). Internally, TreeStore recognises the tree structure data contained in the fields,
allowing us to query it:
//ed is a root node, aaron is a leaf
var ed    = store.getAt(store.find('first', 'Ed')),
    aaron = store.getAt(store.find('first', 'Aaron'));

store.getChildren(ed); //returns all immediate child nodes for Ed Spencer
store.getParent(aaron); //returns the immediate parent for Aaron Conran
store.getAncestors(aaron); //returns all ancestors for Aaron Conran
All components that utilize tree-structured data automatically use these methods to retrieve their nodes, so
no additional configuration is required.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Model instances to the Store by instantiating them based on a JavaScript object. When adding already-
instantiated Models, use insert instead. The instances will be added at the end of the existing collection.
Sample usage:
myStore.add({some: 'data'}, {some: 'other data'});</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearFilter" scope="instance"><description>Revert to a view of the Record cache with no filtering applied.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="collect" scope="instance"><description>Collects unique values for a particular dataIndex from this store.</description></method><method name="each" scope="instance"><description>Calls the specified function for each of the Records in the cache.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="filter" scope="instance"><description>Filters the loaded set of records by a given set of filters.</description></method><method name="filterBy" scope="instance"><description>Filter by a function. The specified function will be called for each
Record in this Store. If the function returns true the Record is included,
otherwise it is filtered out.</description></method><method name="find" scope="instance"><description>Finds the index of the first matching Record in this store by a specific field value.</description></method><method name="findBy" scope="instance"><description>Find the index of the first matching Record in this Store by a function.
If the function returns true it is considered a match.</description></method><method name="findExact" scope="instance"><description>Finds the index of the first matching Record in this store by a specific field value.</description></method><method name="findRecord" scope="instance"><description>Finds the first matching Record in this store by a specific field value.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="first" scope="instance"><description>Convenience function for getting the first model instance in the store</description></method><method name="getAncestors" scope="instance"><description>Returns an ordered array of ancestors to the given model instance, starting with the parent
and ending with the model's root node</description></method><method name="getAt" scope="instance"><description>Get the Record at the specified index.</description></method><method name="getById" scope="instance"><description>Get the Record with the specified id.</description></method><method name="getChildren" scope="instance"><description>Returns an array of all child Records for a given root. Can optionally perform a deep search,
which returns all children at any level under the instance (e.g. not just direct children). If
the deep option is used, all child nodes are returned as a flat array. To preserve the tree
structure use getSubTree instead.</description></method><method name="getCount" scope="instance"><description>Gets the number of cached records.
If using paging, this may not be the total size of the dataset. If the data object
used by the Reader contains the dataset size, then the getTotalCount function returns
the dataset size.  Note: see the Important note in load.</description></method><method name="getGroupString" scope="instance"><description>Returns the string to group on for a given model instance. The default implementation of this method returns the model's
groupField, but this can be overridden to group by an arbitrary string. For example, to group by the first letter
of a model's 'name' field, use the following code:
new Ext.data.Store({
    groupDir: 'ASC',
    getGroupString: function(instance) {
        return instance.get('name')[0];
    }
});</description></method><method name="getGroups" scope="instance"><description>Returns an object containing the result of applying grouping to the records in this store. See groupField,
groupDir and getGroupString. Example for a store containing records with a color field:
var myStore = new Ext.data.Store({
    groupField: 'color',
    groupDir  : 'DESC'
});

myStore.getGroups(); //returns:
[
    {
        name: 'yellow',
        children: [
            //all records where the color field is 'yellow'
        ]
    },
    {
        name: 'red',
        children: [
            //all records where the color field is 'red'
        ]
    }
]</description></method><method name="getNewRecords" scope="instance"><description>Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)</description></method><method name="getNodeById" scope="instance"><description>Returns the record node by id</description></method><method name="getParent" scope="instance"><description>Returns the immediate parent node of a given Model instance, or undefined if the instance
is a root node</description></method><method name="getProxy" scope="instance"><description>Returns the proxy currently attached to this proxy instance</description></method><method name="getRange" scope="instance"><description>Returns a range of Records between specified indices.</description></method><method name="getRootNode" scope="instance"><description>Returns the root node for this tree.</description></method><method name="getSortState" scope="instance"><description>Returns an object describing the current sort state of this Store.</description></method><method name="getSubStore" scope="instance"><description>Returns a flat Ext.data.Store with the correct type of model.</description></method><method name="getUpdatedRecords" scope="instance"><description>Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="indexOf" scope="instance"><description>Get the index within the cache of the passed Record.</description></method><method name="indexOfId" scope="instance"><description>Get the index within the cache of the Record with the passed id.</description></method><method name="insert" scope="instance"><description>Inserts a given node relative to another</description></method><method name="isFiltered" scope="instance"><description>Returns true if this store is currently filtered</description></method><method name="isLeaf" scope="instance"><description>Returns true if the given Model instance is a leaf (e.g. has no children)</description></method><method name="isLoading" scope="instance"><description>Returns true if the Store is currently performing a load operation</description></method><method name="isRoot" scope="instance"><description>Returns true if the given model instance is a root node (e.g. has no parent)</description></method><method name="last" scope="instance"><description>Convenience function for getting the last model instance in the store</description></method><method name="load" scope="instance"><description>Loads data into the Store via the configured proxy. This uses the Proxy to make an
asynchronous call to whatever storage backend the Proxy uses, automatically adding the retrieved
instances into the Store and calling an optional callback if required. Example usage:
store.load({
    scope   : this,
    callback: function(records, operation, success) {
        //the operation object contains all of the details of the load operation
        console.log(records);
    }
});
If the callback scope does not need to be set, a function can simply be passed:
store.load(function(records, operation, success) {
    console.log('loaded records');
});</description></method><method name="loadData" scope="instance"><description>Loads an array of data straight into the Store</description></method><method name="loadPage" scope="instance"><description>Loads a given 'page' of data by setting the start and limit values appropriately. Internally this just causes a normal
load operation, passing in calculated 'start' and 'limit' params</description></method><method name="loadRecords" scope="instance"><description>Loads an array of {@Ext.data.Model model} instances into the store, fires the datachanged event. This should only usually
be called internally when loading from the Proxy, when adding records manually use add instead</description></method><method name="move" scope="instance"><description>Moves a given node Model instance to a new position in the tree</description></method><method name="nextPage" scope="instance"><description>Loads the next 'page' in the current data set</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="previousPage" scope="instance"><description>Loads the previous 'page' in the current data set</description></method><method name="queryBy" scope="instance"><description>Query the cached records in this Store using a filtering function. The specified function
will be called with each record in this Store. If the function returns true the record is
included in the results.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a node from the tree. This will remove all of the node's children (and grandchildren etc),
so if you need to keep those move them first</description></method><method name="removeAt" scope="instance"><description>Removes the model instance at the given index</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setProxy" scope="instance"><description>Sets the Store's Proxy by string, config object or Proxy instance</description></method><method name="sort" scope="instance"><description>Sorts the data in the Store by one or more of its properties. Example usage:
//sort by a single field
myStore.sort('myField', 'DESC');

//sorting by multiple fields
myStore.sort([
    {
        field    : 'age',
        direction: 'ASC'
    },
    {
        field    : 'name',
        direction: 'DESC'
    }
]);
Internally, Store converts the passed arguments into an array of Ext.util.Sorter instances, and delegates the actual
sorting to its internal Ext.util.MixedCollection.
When passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:
store.sort('myField');
store.sort('myField');
Is equivalent to this code, because Store handles the toggling automatically:
store.sort('myField', 'ASC');
store.sort('myField', 'DESC');</description></method><method name="sum" scope="instance"><description>Sums the value of property for each record between start
and end and returns the result.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="sync" scope="instance"><description>Synchronizes the Store with its Proxy. This asks the Proxy to batch together any new, updated
and deleted records in the store, updating the Store's internal representation of the records
as each operation completes.</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.Slider"><description>Form component allowing a user to move a 'thumb' along a slider axis to choose a value. Sliders can equally be used outside
of the context of a form. Example usage:
   new Ext.form.FormPanel({
    items: [
        {
            xtype   : 'slider',
            label   : 'Volume',
            value   : 5,
            minValue: 0,
            maxValue: 10
        }
    ]
});
Or as a standalone component:
   var slider = new Ext.form.Slider({
    value: 5,
    minValue: 0,
    maxValue: 10
});

slider.setValue(8); //will update the value and move the thumb;
slider.getValue(); //returns 8</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disables the slider by calling the internal setThumbsDisabled method</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enables the slider by calling the internal setThumbsDisabled method.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getThumb" scope="instance"><description>Returns the Thumb instance bound to this Slider</description></method><method name="getValue" scope="instance"><description>Returns the current value of the Slider's thumb</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets the new value of the slider, constraining it within minValue and maxValue, and snapping to the nearest
increment if set</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.Container" type="Ext.lib.Panel"><description>Shared Panel class</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.util.ScrollView"><description>A wrapper class that listens to scroll events and control the scroll indicators</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.util.MixedCollection"><description>A Collection class that maintains both numeric indexes and keys and exposes events.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds an item to the collection. Fires the add event when complete.</description></method><method name="addAll" scope="instance"><description>Adds all elements of an Array or an Object to the collection.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clear" scope="instance"><description>Removes all items from the collection.  Fires the clear event when complete.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="clone" scope="instance"><description>Creates a shallow copy of this collection</description></method><method name="contains" scope="instance"><description>Returns true if the collection contains the passed Object as an item.</description></method><method name="containsKey" scope="instance"><description>Returns true if the collection contains the passed Object as a key.</description></method><method name="each" scope="instance"><description>Executes the specified function once for every item in the collection, passing the following arguments:

item : MixedThe collection item
index : NumberThe item's index
length : NumberThe total number of items in the collection

The function should return a boolean value. Returning false from the function will stop the iteration.</description></method><method name="eachKey" scope="instance"><description>Executes the specified function once for every key in the collection, passing each
key, and its associated item as the first two parameters.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="filter" scope="instance"><description>Filters the objects in this collection by a set of Filters, or by a single
property/value pair with optional parameters for substring matching and case sensitivity. See
Filter for an example of using Filter objects (preferred). Alternatively, 
MixedCollection can be easily filtered by property like this:
//create a simple store with a few people defined
var people = new Ext.util.MixedCollection();
people.addAll([
    {id: 1, age: 25, name: 'Ed'},
    {id: 2, age: 24, name: 'Tommy'},
    {id: 3, age: 24, name: 'Arne'},
    {id: 4, age: 26, name: 'Aaron'}
]);

//a new MixedCollection containing only the items where age == 24
var middleAged = people.filter('age', 24);</description></method><method name="filterBy" scope="instance"><description>Filter by a function. Returns a new collection that has been filtered.
The passed function will be called with each object in the collection.
If the function returns true, the value is included otherwise it is filtered.</description></method><method name="findBy" scope="instance"><description>Returns the first item in the collection which elicits a true return value from the
passed selection function.</description></method><method name="findIndex" scope="instance"><description>Finds the index of the first matching object in this collection by a specific property/value.</description></method><method name="findIndexBy" scope="instance"><description>Find the index of the first matching object in this collection by a function.
If the function returns true it is considered a match.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="first" scope="instance"><description>Returns the first item in the collection.</description></method><method name="get" scope="instance"><description>This method calls item().
Returns the item associated with the passed key OR index. Key has priority
over index.  This is the equivalent of calling key first, then if
nothing matched calling getAt.</description></method><method name="getAt" scope="instance"><description>Returns the item at the specified index.</description></method><method name="getByKey" scope="instance"><description>Returns the item associated with the passed key.</description></method><method name="getCount" scope="instance"><description>Returns the number of items in the collection.</description></method><method name="getKey" scope="instance"><description>MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
simply returns item.id but you can provide your own implementation
to return a different value as in the following examples:// normal way
var mc = new Ext.util.MixedCollection();
mc.add(someEl.dom.id, someEl);
mc.add(otherEl.dom.id, otherEl);
//and so on

// using getKey
var mc = new Ext.util.MixedCollection();
mc.getKey = function(el){
   return el.dom.id;
};
mc.add(someEl);
mc.add(otherEl);

// or via the constructor
var mc = new Ext.util.MixedCollection(false, function(el){
   return el.dom.id;
});
mc.add(someEl);
mc.add(otherEl);</description></method><method name="getRange" scope="instance"><description>Returns a range of items in this collection</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="indexOf" scope="instance"><description>Returns index within the collection of the passed Object.</description></method><method name="indexOfKey" scope="instance"><description>Returns index within the collection of the passed key.</description></method><method name="insert" scope="instance"><description>Inserts an item at the specified index in the collection. Fires the add event when complete.</description></method><method name="last" scope="instance"><description>Returns the last item in the collection.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Remove an item from the collection.</description></method><method name="removeAll" scope="instance"><description>Remove all items in the passed array from the collection.</description></method><method name="removeAt" scope="instance"><description>Remove an item from a specified index in the collection. Fires the remove event when complete.</description></method><method name="removeByKey" scope="instance"><description>Removed an item associated with the passed key fom the collection.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reorder" scope="instance"><description>Reorders each of the items based on a mapping from old index to new index. Internally this
just translates into a sort. The 'sort' event is fired whenever reordering has occured.</description></method><method name="replace" scope="instance"><description>Replaces an item in the collection. Fires the replace event when complete.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="sort" scope="instance"><description>Sorts this collection by item value with the passed comparison function.</description></method><method name="sortBy" scope="instance"><description>Sorts the collection by a single sorter function</description></method><method name="sortByKey" scope="instance"><description>Sorts this collection by keys.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Object" type="Ext.util.Sorter"><description>Represents a single sorter that can be applied to a Store</description><constructors/><properties/><methods/></class><class superclass="Ext.data.Reader" type="Ext.data.XmlReader"><description>Xml Reader</description><constructors/><properties/><methods><method name="getData" scope="instance"><description>Normalizes the data object</description></method><method name="getResponseData" scope="instance"><description>Takes a raw response object (as passed to this.read) and returns the useful data segment of it. This must be implemented by each subclass</description></method><method name="read" scope="instance"><description>Reads the given response object. This method normalizes the different types of response object that may be passed
to it, before handing off the reading of records to the readRecords function.</description></method><method name="readRecords" scope="instance"><description>Parses an XML document and returns a ResultSet containing the model instances</description></method></methods></class><class superclass="Ext.Picker" type="Ext.DatePicker"><description>A date picker component which shows a DatePicker on the screen. This class extends from Ext.Picker and Ext.Sheet so it is a popup.
This component has no required properties. Example usage:
var datePicker = new Ext.DatePicker();
datePicker.show();
However you may want to adjust the yearFrom and yearTo properties:
var datePicker = new Ext.DatePicker({
    yearFrom: 2000,
    yearTo  : 2015
});
datePicker.show();</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Gets the current value as a Date object</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Sets the values of the pickers slots</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext.util.DelayedTask"><description> The DelayedTask class provides a convenient way to &quot;buffer&quot; the execution of a method,
performing setTimeout where a new timeout cancels the old timeout. When called, the
task will wait the specified time period before executing. If durng that time period,
the task is called again, the original call will be cancelled. This continues so that
the function is only called a single time for each iteration.
This method is especially useful for things like detecting whether a user has finished
typing in a text field. An example would be performing validation on a keypress. You can
use this class to buffer the keypress events for a certain number of milliseconds, and
perform only if they stop for that amount of time.  Usage:var task = new Ext.util.DelayedTask(function(){
    alert(Ext.getDom('myInputField').value.length);
});
// Wait 500ms before calling our function. If the user presses another key
// during that 500ms, it will be cancelled and we'll wait another 500ms.
Ext.get('myInputField').on('keypress', function(){
    task.delay(500);
});
Note that we are using a DelayedTask here to illustrate a point. The configuration
option buffer for addListener/on will
also setup a delayed task for you to buffer events.</description><constructors/><properties/><methods><method name="cancel" scope="instance"><description>Cancel the last queued timeout</description></method><method name="delay" scope="instance"><description>Cancels any pending timeout and queues a new one</description></method></methods></class><class superclass="Ext.util.MixedCollection" type="Ext.StoreMgr"><description>The default global group of stores.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds an item to the collection. Fires the add event when complete.</description></method><method name="addAll" scope="instance"><description>Adds all elements of an Array or an Object to the collection.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clear" scope="instance"><description>Removes all items from the collection.  Fires the clear event when complete.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="clone" scope="instance"><description>Creates a shallow copy of this collection</description></method><method name="contains" scope="instance"><description>Returns true if the collection contains the passed Object as an item.</description></method><method name="containsKey" scope="instance"><description>Returns true if the collection contains the passed Object as a key.</description></method><method name="each" scope="instance"><description>Executes the specified function once for every item in the collection, passing the following arguments:

item : MixedThe collection item
index : NumberThe item's index
length : NumberThe total number of items in the collection

The function should return a boolean value. Returning false from the function will stop the iteration.</description></method><method name="eachKey" scope="instance"><description>Executes the specified function once for every key in the collection, passing each
key, and its associated item as the first two parameters.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="filter" scope="instance"><description>Filters the objects in this collection by a set of Filters, or by a single
property/value pair with optional parameters for substring matching and case sensitivity. See
Filter for an example of using Filter objects (preferred). Alternatively, 
MixedCollection can be easily filtered by property like this:
//create a simple store with a few people defined
var people = new Ext.util.MixedCollection();
people.addAll([
    {id: 1, age: 25, name: 'Ed'},
    {id: 2, age: 24, name: 'Tommy'},
    {id: 3, age: 24, name: 'Arne'},
    {id: 4, age: 26, name: 'Aaron'}
]);

//a new MixedCollection containing only the items where age == 24
var middleAged = people.filter('age', 24);</description></method><method name="filterBy" scope="instance"><description>Filter by a function. Returns a new collection that has been filtered.
The passed function will be called with each object in the collection.
If the function returns true, the value is included otherwise it is filtered.</description></method><method name="findBy" scope="instance"><description>Returns the first item in the collection which elicits a true return value from the
passed selection function.</description></method><method name="findIndex" scope="instance"><description>Finds the index of the first matching object in this collection by a specific property/value.</description></method><method name="findIndexBy" scope="instance"><description>Find the index of the first matching object in this collection by a function.
If the function returns true it is considered a match.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="first" scope="instance"><description>Returns the first item in the collection.</description></method><method name="get" scope="instance"><description>This method calls item().
Returns the item associated with the passed key OR index. Key has priority
over index.  This is the equivalent of calling key first, then if
nothing matched calling getAt.</description></method><method name="getAt" scope="instance"><description>Returns the item at the specified index.</description></method><method name="getByKey" scope="instance"><description>Returns the item associated with the passed key.</description></method><method name="getCount" scope="instance"><description>Returns the number of items in the collection.</description></method><method name="getKey" scope="instance"><description>MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
simply returns item.id but you can provide your own implementation
to return a different value as in the following examples:// normal way
var mc = new Ext.util.MixedCollection();
mc.add(someEl.dom.id, someEl);
mc.add(otherEl.dom.id, otherEl);
//and so on

// using getKey
var mc = new Ext.util.MixedCollection();
mc.getKey = function(el){
   return el.dom.id;
};
mc.add(someEl);
mc.add(otherEl);

// or via the constructor
var mc = new Ext.util.MixedCollection(false, function(el){
   return el.dom.id;
});
mc.add(someEl);
mc.add(otherEl);</description></method><method name="getRange" scope="instance"><description>Returns a range of items in this collection</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="indexOf" scope="instance"><description>Returns index within the collection of the passed Object.</description></method><method name="indexOfKey" scope="instance"><description>Returns index within the collection of the passed key.</description></method><method name="insert" scope="instance"><description>Inserts an item at the specified index in the collection. Fires the add event when complete.</description></method><method name="last" scope="instance"><description>Returns the last item in the collection.</description></method><method name="lookup" scope="instance"><description>Gets a registered Store by id</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="register" scope="instance"><description>Registers one or more Stores with the StoreMgr. You do not normally need to register stores
manually.  Any store initialized with a Ext.data.Store.storeId will be auto-registered.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Remove an item from the collection.</description></method><method name="removeAll" scope="instance"><description>Remove all items in the passed array from the collection.</description></method><method name="removeAt" scope="instance"><description>Remove an item from a specified index in the collection. Fires the remove event when complete.</description></method><method name="removeByKey" scope="instance"><description>Removed an item associated with the passed key fom the collection.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reorder" scope="instance"><description>Reorders each of the items based on a mapping from old index to new index. Internally this
just translates into a sort. The 'sort' event is fired whenever reordering has occured.</description></method><method name="replace" scope="instance"><description>Replaces an item in the collection. Fires the replace event when complete.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="sort" scope="instance"><description>Sorts this collection by item value with the passed comparison function.</description></method><method name="sortBy" scope="instance"><description>Sorts the collection by a single sorter function</description></method><method name="sortByKey" scope="instance"><description>Sorts this collection by keys.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="unregister" scope="instance"><description>Unregisters one or more Stores with the StoreMgr</description></method></methods></class><class superclass="Object" type="Ext.DomQuery"><description>Provides functionality to select elements on the page based on a CSS selector.

All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example &quot;div.foo:nth-child(odd)[@foo=bar].bar:first&quot; would be a perfectly valid selector.

Element Selectors:

     * any element
     E an element with the tag E
     E F All descendent elements of E that have the tag F
     E &gt; F or E/F all direct children elements of E that have the tag F
     E + F all elements with the tag F that are immediately preceded by an element with the tag E
     E ~ F all elements with the tag F that are preceded by a sibling element with the tag E

Attribute Selectors:
The use of &#64; and quotes are optional. For example, div[&#64;foo='bar'] is also a valid attribute selector.

     E[foo] has an attribute &quot;foo&quot;
     E[foo=bar] has an attribute &quot;foo&quot; that equals &quot;bar&quot;
     E[foo^=bar] has an attribute &quot;foo&quot; that starts with &quot;bar&quot;
     E[foo$=bar] has an attribute &quot;foo&quot; that ends with &quot;bar&quot;
     E[foo*=bar] has an attribute &quot;foo&quot; that contains the substring &quot;bar&quot;
     E[foo%=2] has an attribute &quot;foo&quot; that is evenly divisible by 2
     E[foo!=bar] has an attribute &quot;foo&quot; that does not equal &quot;bar&quot;

Pseudo Classes:

     E:first-child E is the first child of its parent
     E:last-child E is the last child of its parent
     E:nth-child(n) E is the nth child of its parent (1 based as per the spec)
     E:nth-child(odd) E is an odd child of its parent
     E:nth-child(even) E is an even child of its parent
     E:only-child E is the only child of its parent
     E:checked E is an element that is has a checked attribute that is true (e.g. a radio or checkbox) 
     E:first the first E in the resultset
     E:last the last E in the resultset
     E:nth(n) the nth E in the resultset (1 based)
     E:odd shortcut for :nth-child(odd)
     E:even shortcut for :nth-child(even)
     E:contains(foo) E's innerHTML contains the substring &quot;foo&quot;
     E:nodeValue(foo) E contains a textNode with a nodeValue that equals &quot;foo&quot;
     E:not(S) an E element that does not match simple selector S
     E:has(S) an E element that has a descendent that matches simple selector S
     E:next(S) an E element whose next sibling matches simple selector S
     E:prev(S) an E element whose previous sibling matches simple selector S
     E:any(S1|S2|S2) an E element which matches any of the simple selectors S1, S2 or S3//\\

CSS Value Selectors:

     E{display=none} css value &quot;display&quot; that equals &quot;none&quot;
     E{display^=none} css value &quot;display&quot; that starts with &quot;none&quot;
     E{display$=none} css value &quot;display&quot; that ends with &quot;none&quot;
     E{display*=none} css value &quot;display&quot; that contains the substring &quot;none&quot;
     E{display%=2} css value &quot;display&quot; that is evenly divisible by 2
     E{display!=none} css value &quot;display&quot; that does not equal &quot;none&quot;
</description><constructors/><properties/><methods><method name="compile" scope="instance"><description>Compiles a selector/xpath query into a reusable function. The returned function
takes one parameter &quot;root&quot; (optional), which is the context node from where the query should start.</description></method><method name="filter" scope="instance"><description>Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)</description></method><method name="getOrientation" scope="instance"><description>Returns the current orientation of the mobile device</description></method><method name="is" scope="instance"><description>Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)</description></method><method name="jsSelect" scope="instance"><description>Selects a group of elements.</description></method><method name="operators" scope="instance"><description>Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.
New operators can be added as long as the match the format c= where c is any character other than space, &gt; &lt;.</description></method><method name="select" scope="instance"><description>Selects a group of elements.</description></method><method name="selectNode" scope="instance"><description>Selects a single element.</description></method><method name="selectNumber" scope="instance"><description>Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified.</description></method><method name="selectValue" scope="instance"><description>Selects the value of a node, optionally replacing null with the defaultValue.</description></method></methods></class><class superclass="Ext.Panel" type="Ext.TabPanel"><description>TabPanel is a Container which can hold other components to be accessed in a tabbed
interface.
new Ext.TabPanel({
    fullscreen: true,
    ui: 'dark',
    sortable: true,
    items: [{
        title: 'Tab 1',
        html: '1',
        cls: 'card1'
    }, {
        title: 'Tab 2',
        html: '2',
        cls: 'card2'
    }, {
        title: 'Tab 3',
        html: '3',
        cls: 'card3'
    }]
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getTabBar" scope="instance"><description>Retrieves a reference to the Ext.TabBar associated with the TabPanel.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext"><description>Ext core utilities and functions.</description><constructors/><properties/><methods><method name="apply" scope="instance"><description>Copies all the properties of config to obj.</description></method><method name="applyIf" scope="instance"><description>Copies all the properties of config to obj if they don't already exist.</description></method><method name="create" scope="instance"><description>Shorthand for Ext.ComponentMgr.create
Creates a new Component from the specified config object using the
config object's xtype to determine the class to instantiate.</description></method><method name="decode" scope="instance"><description>Shorthand for Ext.util.JSON.decode</description></method><method name="defer" scope="instance"><description>Shorthand for Ext.util.Functions.createDelegate</description></method><method name="destroy" scope="instance"><description>Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
DOM (if applicable) and calling their destroy functions (if available).  This method is primarily
intended for arguments of type Ext.Element and Ext.Component, but any subclass of
Ext.util.Observable can be passed in.  Any number of elements and/or components can be
passed into this function in a single call as separate arguments.</description></method><method name="each" scope="instance"><description>Iterates an array calling the supplied function.</description></method><method name="encode" scope="instance"><description>Shorthand for Ext.util.JSON.encode</description></method><method name="extend" scope="instance"><description>Extends one class to create a subclass and optionally overrides members with the passed literal. This method
also adds the function &quot;override()&quot; to the subclass that can be used to override members of the class.
For example, to create a subclass of Ext GridPanel:
MyGridPanel = Ext.extend(Ext.grid.GridPanel, {
constructor: function(config) {

//      Create configuration for this Grid.
    var store = new Ext.data.Store({...});
    var colModel = new Ext.grid.ColumnModel({...});

//      Create a new config object containing our computed properties
//      *plus* whatever was in the config parameter.
    config = Ext.apply({
        store: store,
        colModel: colModel
    }, config);

    MyGridPanel.superclass.constructor.call(this, config);

//      Your postprocessing here
},

yourMethod: function() {
    // etc.
}
});
This function also supports a 3-argument call in which the subclass's constructor is
passed as an argument. In this form, the parameters are as follows:

subclass : Function The subclass constructor.
superclass : Function The constructor of class being extended
overrides : Object A literal with members which are copied into the subclass's
prototype, and are therefore shared among all instances of the new class.
</description></method><method name="fly" scope="instance"><description>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
the dom node can be overwritten by other code. Shorthand of Ext.Element.fly
Use this to make one-time references to DOM elements which are not going to be accessed again either by
application code, or by Ext's classes. If accessing an element which will be processed regularly, then Ext.get
will be more appropriate to take advantage of the caching provided by the Ext.Element class.</description></method><method name="get" scope="instance"><description>Retrieves Ext.Element objects.
This method does not retrieve Components. This method
retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
its ID, use Ext.ComponentMgr.get.
Uses simple caching to consistently return the same object. Automatically fixes if an
object was recreated with the same id via AJAX or DOM.
Shorthand of Ext.Element.get</description></method><method name="getBody" scope="instance"><description>Returns the current document body as an Ext.Element.</description></method><method name="getCmp" scope="instance"><description>This is shorthand reference to Ext.ComponentMgr.get.
Looks up an existing Component by id</description></method><method name="getDoc" scope="instance"><description>Returns the current HTML document object as an Ext.Element.</description></method><method name="getDom" scope="instance"><description>Return the dom node for the passed String (id), dom node, or Ext.Element.
Optional 'strict' flag is needed for IE since it can return 'name' and
'id' elements by using getElementById.
Here are some examples:
// gets dom node based on id
var elDom = Ext.getDom('elId');
// gets dom node based on the dom node
var elDom1 = Ext.getDom(elDom);

// If we don&#39;t know if we are working with an
// Ext.Element or a dom node use Ext.getDom
function(el){
    var dom = Ext.getDom(el);
    // do something with the dom node
}
Note: the dom node to be found actually needs to exist (be rendered, etc)
when this method is called to be successful.</description></method><method name="getHead" scope="instance"><description>Returns the current document head as an Ext.Element.</description></method><method name="getOrientation" scope="instance"><description>Returns the current orientation of the mobile device</description></method><method name="getStore" scope="instance"><description>Gets a registered Store by id (shortcut to lookup)</description></method><method name="htmlDecode" scope="instance"><description>Convert certain characters (&amp;, &lt;, &gt;, and ') from their HTML character equivalents.</description></method><method name="htmlEncode" scope="instance"><description>Convert certain characters (&amp;, &lt;, &gt;, and ') to their HTML character equivalents for literal display in web pages.</description></method><method name="id" scope="instance"><description>Generates unique ids. If the element already has an id, it is unchanged</description></method><method name="isArray" scope="instance"><description>Returns true if the passed value is a JavaScript array, otherwise false.</description></method><method name="isBoolean" scope="instance"><description>util
Returns true if the passed value is a boolean.</description></method><method name="isDate" scope="instance"><description>Returns true if the passed object is a JavaScript date object, otherwise false.</description></method><method name="isDefined" scope="instance"><description>Returns true if the passed value is not undefined.</description></method><method name="isElement" scope="instance"><description>Returns true if the passed value is an HTMLElement</description></method><method name="isEmpty" scope="instance"><description>Returns true if the passed value is empty.
The value is deemed to be empty if it is
null
undefined
an empty array
a zero length string (Unless the allowBlank parameter is true)
</description></method><method name="isFunction" scope="instance"><description>Returns true if the passed value is a JavaScript Function, otherwise false.</description></method><method name="isNumber" scope="instance"><description>Returns true if the passed value is a number. Returns false for non-finite numbers.</description></method><method name="isObject" scope="instance"><description>Returns true if the passed value is a JavaScript Object, otherwise false.</description></method><method name="isPrimitive" scope="instance"><description>Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.</description></method><method name="isString" scope="instance"><description>Returns true if the passed value is a string.</description></method><method name="iterate" scope="instance"><description>Iterates either the elements in an array, or each of the properties in an object.
Note: If you are only iterating arrays, it is better to call each.</description></method><method name="namespace" scope="instance"><description>Creates namespaces to be used for scoping variables and classes so that they are not global.
Specifying the last node of a namespace implicitly creates all other nodes. Usage:
Ext.namespace('Company', 'Company.data');
Ext.namespace('Company.data'); // equivalent and preferable to above syntax
Company.Widget = function() { ... }
Company.data.CustomStore = function(config) { ... }</description></method><method name="ns" scope="instance"><description>Creates namespaces to be used for scoping variables and classes so that they are not global.
Specifying the last node of a namespace implicitly creates all other nodes. Usage:
Ext.namespace('Company', 'Company.data');
Ext.namespace('Company.data'); // equivalent and preferable to above syntax
Company.Widget = function() { ... }
Company.data.CustomStore = function(config) { ... }</description></method><method name="num" scope="instance"><description>Utility method for validating that a value is numeric, returning the specified default value if it is not.</description></method><method name="onReady" scope="instance"><description>Adds a listener to be notified when the document is ready (before onload and before images are loaded). Shorthand of Ext.EventManager.onDocumentReady.</description></method><method name="override" scope="instance"><description>Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
Usage:Ext.override(MyClass, {
newMethod1: function(){
    // etc.
},
newMethod2: function(foo){
    // etc.
}
});</description></method><method name="pluck" scope="instance"><description>Plucks the value of a property from each item in the Array
// Example:
Ext.pluck(Ext.query(&quot;p&quot;), &quot;className&quot;); // [el1.className, el2.className, ..., elN.className]</description></method><method name="preg" scope="instance"><description>Shorthand for Ext.PluginMgr.registerType</description></method><method name="query" scope="instance"><description>Selects an array of DOM nodes by CSS/XPath selector. Shorthand of Ext.DomQuery.select</description></method><method name="reg" scope="instance"><description>Shorthand for Ext.ComponentMgr.registerType</description></method><method name="regApplication" scope="instance"><description>Shorthand for Ext.ApplicationManager.register
Creates a new Application class from the specified config object. See Ext.Application for full examples.</description></method><method name="regController" scope="instance"><description>Shorthand for Ext.ControllerMgr.register
Creates a new Controller class from the specified config object. See Ext.Controller for full examples.</description></method><method name="regLayout" scope="instance"><description>Shorthand for Ext.layout.LayoutManager.registerType</description></method><method name="regModel" scope="instance"><description>Shorthand for Ext.ModelMgr.registerType
Creates a new Model class from the specified config object. See Ext.data.Model for full examples.</description></method><method name="regStore" scope="instance"><description>Creates a new store for the given id and config, then registers it with the Store Mananger. 
Sample usage:
Ext.regStore('AllUsers', {
    model: 'User'
});

//the store can now easily be used throughout the application
new Ext.List({
    store: 'AllUsers',
    ... other config
});</description></method><method name="removeNode" scope="instance"><description>Removes this element from the document, removes all DOM event listeners, and deletes the cache reference.
All DOM event listeners are removed from this element. If Ext.enableNestedListenerRemoval is
true, then DOM event listeners are also removed from all child nodes. The body node
will be ignored if passed in.</description></method><method name="repaint" scope="instance"><description>Repaints the whole page. This fixes frequently encountered painting issues in mobile Safari.</description></method><method name="select" scope="instance"><description>Selects elements based on the passed CSS selector to enable Element methods
to be applied to many related elements in one statement through the returned CompositeElement or
CompositeElementLite object.</description></method><method name="setup" scope="instance"><description>Sets up a page for use on a mobile device.</description></method><method name="toArray" scope="instance"><description>Converts any iterable (numeric indices and a length property) into a true array
Don't use this on strings. IE doesn't support &quot;abc&quot;[0] which this implementation depends on.
For strings, use this instead: &quot;abc&quot;.match(/./g) =&gt; [a,b,c];</description></method><method name="urlAppend" scope="instance"><description>Appends content to the query string of a URL, handling logic for whether to place
a question mark or ampersand.</description></method><method name="urlDecode" scope="instance"><description>Takes an encoded URL and and converts it to an object. Example:
Ext.urlDecode(&quot;foo=1&amp;bar=2&quot;); // returns {foo: &quot;1&quot;, bar: &quot;2&quot;}
Ext.urlDecode(&quot;foo=1&amp;bar=2&amp;bar=3&amp;bar=4&quot;, false); // returns {foo: &quot;1&quot;, bar: [&quot;2&quot;, &quot;3&quot;, &quot;4&quot;]}</description></method><method name="urlEncode" scope="instance"><description>Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return &quot;foo=1&amp;bar=2&quot;.  Optionally,
property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.</description></method></methods></class><class superclass="Object" type="Ext.PluginMgr"><description>Provides a registry of available Plugin classes indexed by a mnemonic code known as the Plugin's ptype.
The xtype provides a way to avoid instantiating child Components
when creating a full, nested config object for a complete Ext page.
A child Component may be specified simply as a config object
as long as the correct xtype is specified so that if and when the Component
needs rendering, the correct type can be looked up for lazy instantiation.
For a list of all available xtypes, see Ext.Component.</description><constructors/><properties/><methods><method name="create" scope="instance"><description>Creates a new Plugin from the specified config object using the
config object's ptype to determine the class to instantiate.</description></method><method name="findByType" scope="instance"><description>Returns all plugins registered with the given type. Here, 'type' refers to the type of plugin, not its ptype.</description></method></methods></class><class superclass="Ext.data.ClientProxy" type="Ext.data.MemoryProxy"><description>In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are
lost on every page refresh. Usually this Proxy isn't used directly, serving instead as a helper to a 
Store where a reader is required to load data. For example, say we have a Store for
a User model and have some inline data we want to load, but this data isn't in quite the right format: we 
can use a MemoryProxy with a JsonReader to read it into our Store:
//this is the model we'll be using in the store
Ext.regModel('User', {
    fields: [
        {name: 'id',    type: 'int'},
        {name: 'name',  type: 'string'},
        {name: 'phone', type: 'string', mapping: 'phoneNumber'}
    ]
});

//this data doesn't line up to our model fields - the phone field is called phoneNumber
var data = {
    users: [
        {
            id: 1,
            name: 'Ed Spencer',
            phoneNumber: '555 1234'
        },
        {
            id: 2,
            name: 'Abe Elias',
            phoneNumber: '666 1234'
        }
    ]
};

//note how we set the 'root' in the reader to match the data structure above
var store = new Ext.data.Store({
    autoLoad: true,
    model: 'User',
    data : data,
    proxy: {
        type: 'memory',
        reader: {
            type: 'json',
            root: 'users'
        }
    }
});</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="clear" scope="instance"><description>Abstract function that must be implemented by each ClientProxy subclass. This should purge all record data
from the client side storage, as well as removing any supporting data (such as lists of record IDs)</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Reads data from the configured data object. Uses the Proxy's reader, if present</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.Component" type="Ext.Button"><description>A simple button class
var buttons = [
    {text: 'Back', ui: 'back', handler: tapMe},
    {text: 'Default', handler: tapMe},
    {text: 'Round', ui: 'round', handler: tapMe},
    {xtype: 'spacer'},
    {text: 'Action', ui: 'action', handler: tapMe},
    {text: 'Forward', ui: 'forward', handler: tapMe}
];

var toolbar1 = new Ext.Toolbar({
    dock: 'top',
    title: 'Toolbar',
    items: buttons
});</description><constructors/><properties/><methods><method name="Button" scope="instance"><description></description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBadgeText" scope="instance"><description>Gets the text for this Button's badge</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getText" scope="instance"><description>Gets the text for this Button</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setBadge" scope="instance"><description>Creates a badge overlay on the button for displaying notifications.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHandler" scope="instance"><description>Assigns this Button's click handler</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setIcon" scope="instance"><description>Sets the background image (inline style) of the button.  This method also changes
the value of the icon config internally.</description></method><method name="setIconAlign" scope="instance"><description>Adds a CSS class to the button that changes the align of the button's icon (if one has been defined).  If no icon or iconClass has
been defined, it will only set the value of the iconAlign internal config.</description></method><method name="setIconClass" scope="instance"><description>Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
the value of the iconCls config internally.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets this Button's text</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.layout.Layout" type="Ext.layout.ComponentLayout"><description>This class is intended to be extended or created via the layout
configuration property.  See Ext.Component.componentLayout for additional details.</description><constructors/><properties/><methods><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method><method name="needsLayout" scope="instance"><description>Check if the new size is different from the current size and only
trigger a layout if it is necessary.</description></method><method name="setElementSize" scope="instance"><description>Set the size of any element supporting undefined, null, and values.</description></method><method name="setTargetSize" scope="instance"><description>Set the size of the target element.</description></method></methods></class><class superclass="Ext.data.ServerProxy" type="Ext.data.ScriptTagProxy"><description>An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain
other than the originating domain of the running page.
Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
of the running page, you must use this class, rather than HttpProxy.
The content passed back from a server resource requested by a ScriptTagProxy must be executable JavaScript
source code because it is used as the source inside a &lt;script&gt; tag.
In order for the browser to process the returned data, the server must wrap the data object
with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.
Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
depending on whether the callback name was passed:
boolean scriptTag = false;
String cb = request.getParameter(&quot;callback&quot;);
if (cb != null) {
    scriptTag = true;
    response.setContentType(&quot;text/javascript&quot;);
} else {
    response.setContentType(&quot;application/x-json&quot;);
}
Writer out = response.getWriter();
if (scriptTag) {
    out.write(cb + &quot;(&quot;);
}
out.print(dataBlock.toJsonString());
if (scriptTag) {
    out.write(&quot;);&quot;);
}
Below is a PHP example to do the same thing:$callback = $_REQUEST['callback'];

// Create the output object.
$output = array('a' =&gt; 'Apple', 'b' =&gt; 'Banana');

//start output
if ($callback) {
    header('Content-Type: text/javascript');
    echo $callback . '(' . json_encode($output) . ');';
} else {
    header('Content-Type: application/x-json');
    echo json_encode($output);
}
Below is the ASP.Net code to do the same thing:
String jsonString = &quot;{success: true}&quot;;
String cb = Request.Params.Get(&quot;callback&quot;);
String responseString = &quot;&quot;;
if (!String.IsNullOrEmpty(cb)) {
    responseString = cb + &quot;(&quot; + jsonString + &quot;)&quot;;
} else {
    responseString = jsonString;
}
Response.Write(responseString);</description><constructors/><properties/><methods><method name="abort" scope="instance"><description>Aborts the current server request if one is currently running</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="afterRequest" scope="instance"><description>Cleans up after a completed request by removing the now unnecessary script tag from the DOM. Also removes the 
global JSON-P callback function.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="buildRequest" scope="instance"><description>Creates and returns an Ext.data.Request object based on the options passed by the Store
that this Proxy is attached to.</description></method><method name="buildUrl" scope="instance"><description>Generates a url based on a given Ext.data.Request object. Adds the params and callback function name to the url</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="doRequest" scope="instance"><description>In ServerProxy subclasses, the create, read, update and destroy methods all pass
through to doRequest. Each ServerProxy subclass must implement the doRequest method - see Ext.data.ScriptTagProxy
and Ext.data.AjaxProxy for examples. This method carries the same signature as each of the methods that delegate to it.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="encodeRecords" scope="instance"><description>Encodes an array of records into a string suitable to be appended to the script src url. This is broken
out into its own function so that it can be easily overridden.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.layout.ContainerLayout" type="Ext.layout.FitLayout"><description>This is a base class for layouts that contain a single item that automatically expands to fill the layout's
container.  This class is intended to be extended or created via the layout:'fit' Ext.Container.layout
config, and should generally not need to be created directly via the new keyword.
FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
multiple panels, only the first one will be displayed.</description><constructors/><properties/><methods><method name="getLayoutItems" scope="instance"><description>Returns an array of child components.</description></method><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.util.GeoLocation"><description>Provides a cross browser class for retrieving location information.

Based on the Geolocation API Specification.
If the browser does not implement that specification (Internet Explorer 6-8), it can fallback on Google Gears
as long as the browser has it installed, and the following javascript file from google is included on the page:
&lt;script type=&quot;text/javascript&quot; src=&quot;http://code.google.com/apis/gears/gears_init.js&quot;&gt;&lt;/script&gt;

Note: Location implementations are only required to return timestamp, longitude, latitude, and accuracy.
Other properties (altitude, altitudeAccuracy, heading, speed) can be null or sporadically returned.

When instantiated, by default this class immediately begins tracking location information, 
firing a locationupdate event when new location information is available.  To disable this 
location tracking (which may be battery intensive on mobile devices), set autoUpdate to false.
When this is done, only calls to updateLocation will trigger a location retrieval.

A locationerror event is raised when an error occurs retrieving the location, either due to a user
denying the application access to it, or the browser not supporting it.

The below code shows a GeoLocation making a single retrieval of location information.
var geo = new Ext.util.GeoLocation({
    autoUpdate: false,
    listeners: {
        locationupdate: function (geo) {
            alert('New latitude: ' + geo.latitude);
        },
        locationerror: function (   geo,
                                    bTimeout, 
                                    bPermissionDenied, 
                                    bLocationUnavailable, 
                                    message) {
            if(bTimeout){
                alert('Timeout occurred.');
            }
            else{
                alert('Error occurred.');
            }
        }
    }
});
geo.updateLocation();</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setAllowHighAccuracy" scope="instance"><description>Changes the allowHighAccuracy option and restarts any active 
location monitoring with the updated setting.</description></method><method name="setAutoUpdate" scope="instance"><description>Enabled/disables the auto-retrieval of the location information.
If called with autoUpdate=true, it will execute an immediate location update
and continue monitoring for location updates.
If autoUpdate=false, any current location change monitoring will be disabled.</description></method><method name="setMaximumAge" scope="instance"><description>Changes the maximumAge option and restarts any active 
location monitoring with the updated setting.</description></method><method name="setTimeout" scope="instance"><description>Changes the timeout option and restarts any active 
location monitoring with the updated setting.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="updateLocation" scope="instance"><description>Executes a onetime location update operation, 
raising either a locationupdate or locationerror event.
Does not interfere with or restart ongoing location monitoring.</description></method></methods></class><class superclass="Ext.data.Reader" type="Ext.data.JsonReader"><description>Data reader class to create an Array of Ext.data.Model objects from a
JSON packet based on mappings in a provided Ext.data.Model constructor.
Example code:
var myReader = new Ext.data.Store({
    proxy: {
        type: 'ajax',
        reader: {
            type: 'json',
            // metadata configuration options:
            idProperty: 'id'
            root: 'rows',
            totalProperty: 'results'
        }
    },

    // the fields config option will internally create an Ext.data.Model
    // constructor that provides mapping for reading the record data objects
    fields: [
        // map Record's 'firstname' field to data object's key of same name
        {name: 'name'},
        // map Record's 'job' field to data object's 'occupation' key
        {name: 'job', mapping: 'occupation'}
    ],
});
This would consume a JSON data object of the form:
{
    results: 2000, // Reader's configured totalProperty
    rows: [        // Reader's configured root
        // record data objects:
        { id: 1, firstname: 'Bill', occupation: 'Gardener' },
        { id: 2, firstname: 'Ben' , occupation: 'Horticulturalist' },
        ...
    ]
}</description><constructors/><properties/><methods><method name="getResponseData" scope="instance"><description>Takes a raw response object (as passed to this.read) and returns the useful data segment of it. This must be implemented by each subclass</description></method><method name="read" scope="instance"><description>Reads the given response object. This method normalizes the different types of response object that may be passed
to it, before handing off the reading of records to the readRecords function.</description></method><method name="readRecords" scope="instance"><description>Reads a JSON object and returns a ResultSet. Uses the internal getTotal and getSuccess extractors to
retrieve meta data from the response, and extractData to turn the JSON data into model instances.</description></method></methods></class><class superclass="Ext.Panel" type="Ext.Carousel"><description>A customized Panel which provides the ability to slide back and forth between
different child items.
var carousel = new Ext.Carousel({
   items: [{
       html: '&lt;h1&gt;Carousel&lt;/h1&gt;',
       cls: 'card1'
   }, {
       title: 'Tab 2',
       html: '2',
       cls: 'card2'
   }, {
       title: 'Tab 3',
       html: '3',
       cls: 'card3'
   }]
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveIndex" scope="instance"><description>Returns the index of the currently active card.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isHorizontal" scope="instance"><description>Method to determine whether this Sortable is currently sorting.</description></method><method name="isVertical" scope="instance"><description>Method to determine whether this Sortable is currently disabled.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="next" scope="instance"><description>Switches the next card</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="prev" scope="instance"><description>Switches the previous card</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext.util.Observable"><description>Base class that provides a common interface for publishing events. Subclasses are expected to
to have a property &quot;events&quot; with all the events defined, and, optionally, a property &quot;listeners&quot;
with configured listeners defined.
For example:
Employee = Ext.extend(Ext.util.Observable, {
    constructor: function(config){
        this.name = config.name;
        this.addEvents({
            &quot;fired&quot; : true,
            &quot;quit&quot; : true
        });

        // Copy configured listeners into *this* object so that the base class&#39;s
        // constructor will add them.
        this.listeners = config.listeners;

        // Call our superclass constructor to complete construction process.
        Employee.superclass.constructor.call(this, config)
    }
});
This could then be used like this:var newEmployee = new Employee({
    name: employeeName,
    listeners: {
        quit: function() {
            // By default, &quot;this&quot; will be the object that fired the event.
            alert(this.name + &quot; has quit!&quot;);
        }
    }
});</description><constructors/><properties/><methods><method name="Observable.capture" scope="instance"><description>Starts capture on the specified Observable. All events will be passed
to the supplied function with the event name + standard signature of the event
before the event is fired. If the supplied function returns false,
the event will not fire.</description></method><method name="Observable.observe" scope="instance"><description>Sets observability on the passed class constructor.
This makes any event fired on any instance of the passed class also fire a single event through
the class allowing for central handling of events on many instances at once.
Usage:Ext.util.Observable.observe(Ext.data.Connection);
Ext.data.Connection.on('beforerequest', function(con, options) {
    console.log('Ajax request made to ' + options.url);
});</description></method><method name="Observable.releaseCapture" scope="instance"><description>Removes all added captures from the Observable.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.fx2.target.Element" type="Ext.fx2.target.ElementCSS"><description/><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.chart.Scatter"><description/><constructors/><properties/><methods><method name="getItemForPoint" scope="instance"><description>For a given x/y point relative to the Surface, find a corresponding item from this
series, if any.
For Scatter series, this is the closest marker to the point within a tolerance radius.</description></method></methods></class><class superclass="Ext.DataView" type="Ext.scaffold.Index"><description>A scaffold view for easily displaying the instances of a given model</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="bindStore" scope="instance"><description>Changes the data store bound to this view and refreshes it.</description></method><method name="buildItemSelectorClass" scope="instance"><description>Returns the CSS selector used for this DataView's itemSelector. By default this generates a string
based on the model name.</description></method><method name="buildStore" scope="instance"><description>Builds and returns a store based on the configured model</description></method><method name="buildTemplate" scope="instance"><description>Creates and returns a customised XTemplate that is used to render the list of model instances</description></method><method name="buildToolbar" scope="instance"><description>Builds and returns the scaffold top toolbar. By default this just adds a &quot;New X&quot; button, where X is 
the name of the model being scaffolded.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="collectData" scope="instance"><description>Function which can be overridden which returns the data object passed to this
DataView's template to render the whole DataView.
This is usually an Array of data objects, each element of which is processed by an
XTemplate which uses '&lt;tpl for=&quot;.&quot;&gt;' to iterate over its supplied
data object as an Array. However, named properties may be placed into the data object to
provide non-repeating data such as headings, totals etc.</description></method><method name="deselect" scope="instance"><description>Deselects a record instance by record instance or index.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="findItemByChild" scope="instance"><description>Returns the template node the passed child belongs to, or null if it doesn't belong to one.</description></method><method name="findTargetByEvent" scope="instance"><description>Returns the template node by the Ext.EventObject or null if it is not found.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getNode" scope="instance"><description>Gets a template node.</description></method><method name="getNodes" scope="instance"><description>Gets a range nodes.</description></method><method name="getRecord" scope="instance"><description>Gets a record from a node</description></method><method name="getRecords" scope="instance"><description>Gets an array of the records from an array of nodes</description></method><method name="getSelectedNodes" scope="instance"><description>Gets the currently selected nodes.</description></method><method name="getSelectedRecords" scope="instance"><description>Gets an array of the selected records</description></method><method name="getSelectionCount" scope="instance"><description>Gets the number of selected nodes.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getStore" scope="instance"><description>Returns the store associated with this DataView.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="indexOf" scope="instance"><description>Finds the index of the passed node.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isSelected" scope="instance"><description>Returns true if the passed node is selected, else false.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="onEditButtonClick" scope="instance"><description>Handler tied to the Edit button's click or tap event.</description></method><method name="onNewButtonClick" scope="instance"><description>Handler tied to the New button's click or tap event. By default just fires the 'build' event</description></method><method name="prepareData" scope="instance"><description>Function which can be overridden to provide custom formatting for each Record that is used by this
DataView's template to render each node.</description></method><method name="refresh" scope="instance"><description>Refreshes the view by reloading the data from the store and re-rendering the template.</description></method><method name="refreshNode" scope="instance"><description>Refreshes an individual node's data from the store.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="select" scope="instance"><description>Selects a record instance by record instance or index.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setModel" scope="instance"><description>Sets the model used by this scaffold. Can pass in the model string name or the model constructor</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.Button" type="Ext.Tab"><description>Used in the Ext.TabBar component. This shouldn't be used directly, instead use Ext.TabBar or Ext.TabPanel.</description><constructors/><properties/><methods><method name="Button" scope="instance"><description></description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBadgeText" scope="instance"><description>Gets the text for this Button's badge</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getCard" scope="instance"><description>Retrieves a reference to the card associated with this tab</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getText" scope="instance"><description>Gets the text for this Button</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setBadge" scope="instance"><description>Creates a badge overlay on the button for displaying notifications.</description></method><method name="setCard" scope="instance"><description>Sets the card associated with this tab</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHandler" scope="instance"><description>Assigns this Button's click handler</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setIcon" scope="instance"><description>Sets the background image (inline style) of the button.  This method also changes
the value of the icon config internally.</description></method><method name="setIconAlign" scope="instance"><description>Adds a CSS class to the button that changes the align of the button's icon (if one has been defined).  If no icon or iconClass has
been defined, it will only set the value of the iconAlign internal config.</description></method><method name="setIconClass" scope="instance"><description>Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
the value of the iconCls config internally.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets this Button's text</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.data.AjaxProxy" type="Ext.data.RestProxy"><description>Specialization of the AjaxProxy which simply maps the four actions (create, read, 
update and destroy) to RESTful HTTP verbs</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="afterRequest" scope="instance"><description>Optional callback function which can be used to clean up after a request has been completed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="buildRequest" scope="instance"><description>Creates and returns an Ext.data.Request object based on the options passed by the Store
that this Proxy is attached to.</description></method><method name="buildUrl" scope="instance"><description>Generates a url based on a given Ext.data.Request object. By default, ServerProxy's buildUrl will
add the cache-buster param to the end of the url. Subclasses may need to perform additional modifications
to the url.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="doRequest" scope="instance"><description>In ServerProxy subclasses, the create, read, update and destroy methods all pass
through to doRequest. Each ServerProxy subclass must implement the doRequest method - see Ext.data.ScriptTagProxy
and Ext.data.AjaxProxy for examples. This method carries the same signature as each of the methods that delegate to it.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getMethod" scope="instance"><description>Returns the HTTP method name for a given request. By default this returns based on a lookup on actionMethods.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.AbstractStoreSelectionModel"><description>Tracks what records are currently selected in a databound widget.
This is an abstract class and is not meant to be directly used.
DataBound UI widgets such as GridPanel, TreePanel, and ListView
should subclass AbstractStoreSelectionModel and provide a way
to binding to the component.
The abstract methods onSelectChange and onLastFocusChanged should
be implemented in these subclasses to update the UI widget.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="deselect" scope="instance"><description>Deselects a record instance by record instance or index.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getLastSelected" scope="instance"><description>Returns the last selected record.</description></method><method name="getSelection" scope="instance"><description>Returns an array of the currently selected records.</description></method><method name="getSelectionMode" scope="instance"><description>Returns the current selectionMode. SINGLE, MULTI or SIMPLE.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hasSelection" scope="instance"><description>Returns true if there is a selected record.</description></method><method name="isLocked" scope="instance"><description>Returns true if the selections are locked.</description></method><method name="isSelected" scope="instance"><description>Returns true if the specified row is selected.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="select" scope="instance"><description>Selects a record instance by record instance or index.</description></method><method name="selectRange" scope="instance"><description>Selects a range of rows if the selection model
is not locked.
All rows in between startRow and endRow are also selected.</description></method><method name="setLastFocused" scope="instance"><description></description></method><method name="setLocked" scope="instance"><description>Locks the current selection and disables any changes from
happening to the selection.</description></method><method name="setSelectionMode" scope="instance"><description>Sets the current selectionMode. SINGLE, MULTI or SIMPLE.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.data.WebStorageProxy" type="Ext.data.SessionStorageProxy"><description>Proxy which uses HTML5 session storage as its data storage/retrieval mechanism.
If this proxy is used in a browser where session storage is not supported, the constructor will throw an error.
A session storage proxy requires a unique ID which is used as a key in which all record data are stored in the
session storage object.
It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
throw an error.
Proxies are almost always used with a store:
new Ext.data.Store({
    proxy: {
        type: 'sessionstorage',
        id  : 'myProxyKey'
    }
});
Alternatively you can instantiate the Proxy directly:
new Ext.data.SessionStorageProxy({
    id  : 'myOtherProxyKey'
});
Note that session storage is different to local storage (see Ext.data.LocalStorageProxy) - if a browser
session is ended (e.g. by closing the browser) then all data in a SessionStorageProxy are lost. Browser restarts
don't affect the Ext.data.LocalStorageProxy - the data are preserved.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="clear" scope="instance"><description>Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage object</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setRecord" scope="instance"><description>Saves the given record in the Proxy. Runs each field's encode function (if present) to encode the data</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Object" type="Ext.data.Reader"><description>Readers are used to interpret data to be loaded into a Model instance or a Store
- usually in response to an AJAX request. This is normally handled transparently by passing some configuration to either the 
Model or the Store in question - see their documentation for further details.
Loading Nested Data
Readers have the ability to automatically load deeply-nested data objects based on the associations
configured on each Model. Below is an example demonstrating the flexibility of these associations in a fictional CRM system which
manages a User, their Orders, OrderItems and Products. First we'll define the models:
Ext.regModel(&quot;User&quot;, {
    fields: [
        'id', 'name'
    ],

    hasMany: {model: 'Order', name: 'orders'},

    proxy: {
        type: 'rest',
        url : 'users.json',
        reader: {
            type: 'json',
            root: 'users'
        }
    }
});

Ext.regModel(&quot;Order&quot;, {
    fields: [
        'id', 'total'
    ],

    hasMany  : {model: 'OrderItem', name: 'orderItems', associationKey: 'order_items'},
    belongsTo: 'User'
});

Ext.regModel(&quot;OrderItem&quot;, {
    fields: [
        'id', 'price', 'quantity', 'order_id', 'product_id'
    ],

    belongsTo: ['Order', {model: 'Product', associationKey: 'product'}]
});

Ext.regModel(&quot;Product&quot;, {
    fields: [
        'id', 'name'
    ],

    hasMany: 'OrderItem'
});
This may be a lot to take in - basically a User has many Orders, each of which is composed of several OrderItems. Finally,
each OrderItem has a single Product. This allows us to consume data like this:
{
    &quot;users&quot;: [
        {
            &quot;id&quot;: 123,
            &quot;name&quot;: &quot;Ed&quot;,
            &quot;orders&quot;: [
                {
                    &quot;id&quot;: 50,
                    &quot;total&quot;: 100,
                    &quot;order_items&quot;: [
                        {
                            &quot;id&quot;      : 20,
                            &quot;price&quot;   : 40,
                            &quot;quantity&quot;: 2,
                            &quot;product&quot; : {
                                &quot;id&quot;: 1000,
                                &quot;name&quot;: &quot;MacBook Pro&quot;
                            }
                        },
                        {
                            &quot;id&quot;      : 21,
                            &quot;price&quot;   : 20,
                            &quot;quantity&quot;: 3,
                            &quot;product&quot; : {
                                &quot;id&quot;: 1001,
                                &quot;name&quot;: &quot;iPhone&quot;
                            }
                        }
                    ]
                }
            ]
        }
    ]
}
The JSON response is deeply nested - it returns all Users (in this case just 1 for simplicity's sake), all of the Orders
for each User (again just 1 in this case), all of the OrderItems for each Order (2 order items in this case), and finally
the Product associated with each OrderItem. Now we can read the data and use it as follows:
var store = new Ext.data.Store({
    model: &quot;User&quot;
});

store.load({
    callback: function() {
        //the user that was loaded
        var user = store.first();

        console.log(&quot;Orders for &quot; + user.get('name') + &quot;:&quot;)

        //iterate over the User's Orders
        user.orders().each(function(order) {
            console.log(&quot;Order ID: &quot; + order.getId() + &quot;, which contains items:&quot;);

            //iterate over the Order's OrderItems
            order.orderItems().each(function(orderItem) {
                //we know that the Product's data is already loaded, so we can use the synchronous getProduct
                //usually, we would use the asynchronous version (see Ext.data.BelongsToAssociation)
                var product = orderItem.getProduct();

                console.log(orderItem.get('quantity') + ' orders of ' + product.get('name'));
            });
        });
    }
});
Running the code above results in the following:
Orders for Ed:
Order ID: 50, which contains items:
2 orders of MacBook Pro
3 orders of iPhone</description><constructors/><properties/><methods><method name="getResponseData" scope="instance"><description>Takes a raw response object (as passed to this.read) and returns the useful data segment of it. This must be implemented by each subclass</description></method><method name="read" scope="instance"><description>Reads the given response object. This method normalizes the different types of response object that may be passed
to it, before handing off the reading of records to the readRecords function.</description></method><method name="readRecords" scope="instance"><description>Abstracts common functionality used by all Reader subclasses. Each subclass is expected to call
this function before running its own logic and returning the Ext.data.ResultSet instance. For most
Readers additional processing should not be needed.</description></method></methods></class><class superclass="Ext.chart.Axis" type="Ext.chart.CategoryAxis"><description>A type of axis that displays items in categories.</description><constructors/><properties/><methods/></class><class superclass="Ext.layout.FitLayout" type="Ext.layout.CardLayout"><description>This layout manages multiple child Components, each is fit to the Container, where only a single child Component
can be visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
This class is intended to be extended or created via the layout:'card' Ext.Container.layout config,
and should generally not need to be created directly via the new keyword.
The CardLayout's focal method is setActiveItem.  Since only one panel is displayed at a time,
the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
so that functionality must be provided by the developer.
Containers that are configured with a card layout will have a method setActiveItem dynamically added to it. 
var p = new Ext.Panel({
          fullscreen: true,
          layout: 'card',
          items: [{
              html: 'Card 1'
          },{
              html: 'Card 2'
          }]
      });
      p.setActiveItem(1);
</description><constructors/><properties/><methods><method name="getActiveItem" scope="instance"><description>Return the active (visible) component in the layout.</description></method><method name="getLayoutItems" scope="instance"><description>Returns an array of child components.</description></method><method name="getNext" scope="instance"><description>Return the active (visible) component in the layout to the next card, optional wrap parameter to wrap to the first
card when the end of the stack is reached.</description></method><method name="getPrev" scope="instance"><description>Return the active (visible) component in the layout to the previous card, optional wrap parameter to wrap to
the last card when the beginning of the stack is reached.</description></method><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method><method name="next" scope="instance"><description>Sets the active (visible) component in the layout to the next card, optional wrap parameter to wrap to the first
card when the end of the stack is reached.</description></method><method name="prev" scope="instance"><description>Sets the active (visible) component in the layout to the previous card, optional wrap parameter to wrap to
the last card when the beginning of the stack is reached.</description></method><method name="setActiveItem" scope="instance"><description>Sets the active (visible) item in the layout.</description></method></methods></class><class superclass="Ext.util.Stateful" type="Ext.View"><description>Base View class</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="commit" scope="instance"><description>Usually called by the Ext.data.Store which owns the model instance.
Commits all changes made to the instance since either creation or the last commit operation.
Developers should subscribe to the Ext.data.Store.update event
to have their code notified of commit operations.</description></method><method name="copy" scope="instance"><description>Creates a copy (clone) of this Model instance.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="get" scope="instance"><description>Returns the value of the given field</description></method><method name="getChanges" scope="instance"><description>Gets a hash of only the fields that have been modified since this Model was created or commited.</description></method><method name="getInstance" scope="instance"><description>This method will return an instance of our generated class. If the class
has not been generated yet (when this is the first instance you get),
this method will generate it on the fly for you.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isModified" scope="instance"><description>Returns true if the passed field name has been modified
since the load or last commit.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="prepareItems" scope="instance"><description>Loops over an items collection recursively and gets all the name references. Also makes
sure all items have an xtype and a name.</description></method><method name="reject" scope="instance"><description>Usually called by the Ext.data.Store to which this model instance has been joined.
Rejects all changes made to the model instance since either creation, or the last commit operation.
Modified fields are reverted to their original values.
Developers should subscribe to the Ext.data.Store.update event
to have their code notified of reject operations.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="set" scope="instance"><description>Sets the given field to the given value, marks the instance as dirty</description></method><method name="setDirty" scope="instance"><description>Marks this Record as dirty.  This method
is used interally when adding phantom records to a
writer enabled store.
Marking a record dirty causes the phantom to
be returned by Ext.data.Store.getModifiedRecords where it will
have a create action composed for it during store save
operations.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Object" type="Ext.ComponentQuery"><description>Provides searching of Components within Ext.ComponentMgr (globally) or a specific
Ext.Container on the page with a similar syntax to a CSS selector.
Xtypes can be retrieved by their name with an optional . prefix

    component or .component
    gridpanel or .gridpanel

An itemId or id must be prefixed with a #.

    #myContainer

Attributes must be wrapped in brackets

    component[autoScroll]
    panel[title=&quot;Test&quot;]

Queries return an array of components.
Here are some example queries.
// retrieve all Ext.Panel's on the page by xtype
    var panelsArray = Ext.ComponentQuery.query('.panel');

    // retrieve all Ext.Panels within the container with an id myCt
    var panelsWithinmyCt = Ext.ComponentQuery.query('#myCt .panel');

    // retrieve all direct children which are Ext.Panels within myCt
    var directChildPanel = Ext.ComponentQuery.query('#myCt &gt; .panel');

    // retrieve all gridpanels and listviews
    var gridsAndLists = Ext.ComponentQuery.query('gridpanel, listview');</description><constructors/><properties/><methods/></class><class superclass="Ext.util.Observable" type="Ext.Controller"><description/><constructors/><properties/><methods><method name="Surface.newInstance" scope="instance"><description>Create and return a new concrete Surface instance appropriate for the current environment.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addGradient" scope="instance"><description>Adds a definition to this Surface for a linear gradient. We convert the gradient definition
to its corresponding VML attributes and store it for later use by individual sprites.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="applyZIndex" scope="instance"><description>Insert or move a given sprite's element to the correct place in the DOM list for its zIndex</description></method><method name="build" scope="instance"><description>Callback automatically tied to the index view's 'build' event. By default this just renders the registered
'build' view</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="control" scope="instance"><description>This function allows you to add listeners to a view
in a convenient way</description></method><method name="create" scope="instance"><description>Saves a phantom Model instance via its configured Proxy. Fires the 'instance-created' event if successful,
the 'instance-creation-failed' event if not.</description></method><method name="createSurface" scope="instance"><description>Create the Surface instance. Resolves the correct Surface implementation to
instantiate based on the 'implOrder' config.</description></method><method name="destroy" scope="instance"><description>Clean up the Surface instance on component destruction</description></method><method name="doComponentLayout" scope="instance"><description>Pass through layout sizing to the Surface instance</description></method><method name="edit" scope="instance"><description>Renders the edit form for a given model instance</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBuildListeners" scope="instance"><description>Returns the listeners to attach to the view rendered by the build action. By default this returns listeners
for save and cancel, but this can be overridden</description></method><method name="getEditListeners" scope="instance"><description>Returns the listeners to attach to the view rendered by the edit action. By default this returns listeners
for save and cancel, but this can be overridden</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getModel" scope="instance"><description>Returns the constructor for the model type linked to this controller</description></method><method name="getRegion" scope="instance"><description>Get the region for the surface's canvas area</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="onCancelBuild" scope="instance"><description>Handler for the 'cancel' event fired by an build view. By default this just closes the view</description></method><method name="onCancelEdit" scope="instance"><description>Handler for the 'cancel' event fired by an edit view. By default this just closes the view</description></method><method name="onCreateInstance" scope="instance"><description>Callback automatically tied to the index view's 'create' event. By default this just calls the controller's
create function with the data and some basic callbacks to handle errors or show success. Can be overridden
to provide custom behavior</description></method><method name="onDestroyInstance" scope="instance"><description>Callback automatically tied to the index view's 'destroy' event. By default that just calls the controller's
destroy function with the model instance and some basic callbacks to handle errors or show success. Can be
overridden to provide custom behavior.</description></method><method name="onRender" scope="instance"><description>Create the Surface on initial render</description></method><method name="onUpdateInstance" scope="instance"><description>Callback automatically tied to the index view's 'update' event. By default this just calls the controller's
update function with the data and some basic callbacks to handle errors or show success. Can be overridden
to provide custom behavior</description></method><method name="positionSpriteInList" scope="instance"><description>Insert or move a given sprite into the correct position in the items
MixedCollection, according to its zIndex. Will be inserted at the end of
an existing series of sprites with the same or lower zIndex. If the sprite
is already positioned within an appropriate zIndex group, it will not be moved.
This ordering can be used by subclasses to assist in rendering the sprites in
the correct order for proper z-index stacking.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="render" scope="instance"><description>Renders a given view based on a registered name</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setRenderTarget" scope="instance"><description>Sets the default container that components rendered using render will be added to.
In many applications there is a fixed navigation panel and a content panel - the content
panel would usually form the render target in this type of setup.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Updates an existing model instance by applying optional updates to it and attempting to save</description></method></methods></class><class superclass="Ext.Sheet" type="Ext.MessageBox"><description/><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="alert" scope="instance"><description>Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).
If a callback function is passed it will be called after the user clicks the button, and the
itemId of the button that was clicked will be passed as the only parameter to the callback</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="confirm" scope="instance"><description>Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).
If a callback function is passed it will be called after the user clicks either button,
and the id of the button that was clicked will be passed as the only parameter to the callback
(could also be the top-right close button).</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="prompt" scope="instance"><description>Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).
The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user
clicks either button, and the id of the button that was clicked (could also be the top-right
close button) and the text that was entered will be passed as the two parameters to the callback.</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setIcon" scope="instance"><description>Adds the specified icon to the dialog.  By default, the class 'x-msgbox-icon' is applied for default
styling, and the class passed in is expected to supply the background image url. Pass in empty string ('')
to clear any existing icon. This method must be called before the MessageBox is shown.
The following built-in icon classes are supported, but you can also pass in a custom class name:

Ext.MessageBox.INFO
Ext.MessageBox.WARNING
Ext.MessageBox.QUESTION
Ext.MessageBox.ERROR
</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Displays a new message box, or reinitializes an existing message box, based on the config options
passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,
although those calls are basic shortcuts and do not support all of the config options allowed here.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="updateText" scope="instance"><description>Updates the message box body text</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Ext.lib.Panel" type="Ext.Panel"><description>Panel is a container that has specific functionality and structural components that make
it the perfect building block for application-oriented user interfaces.
Panels are, by virtue of their inheritance from Ext.Container, capable
of being configured with a layout, and containing child Components.
When either specifying child items of a Panel, or dynamically adding Components
to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
those child elements need to be sized using one of Ext's built-in layout schemes. By
default, Panels use the ContainerLayout scheme. This simply renders
child components, appending them one after the other inside the Container, and does not apply any sizing
at all.
Example usage:
var pnl = new Ext.Panel({
    fullscreen: true,
    dockedItems: [{
        dock: 'top',
        xtype: 'toolbar',
        title: 'Standard Titlebar'
    },{
        dock: 'top',
        xtype: 'toolbar',
        type: 'light',
        items: [{
            text: 'Test Button'
        }]
    }],
    html: 'Testing'
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Ext.data.Association" type="Ext.data.HasManyAssociation"><description>Represents a one-to-many relationship between two models. Usually created indirectly via a model definition:
Ext.regModel('Product', {
    fields: [
        {name: 'id',      type: 'int'},
        {name: 'user_id', type: 'int'},
        {name: 'name',    type: 'string'}
    ]
});

Ext.regModel('User', {
    fields: [
        {name: 'id',   type: 'int'},
        {name: 'name', type: 'string'}
    ],

    associations: [
        {type: 'hasMany', model: 'Product', name: 'products'}
    ]
});

Above we created Product and User models, and linked them by saying that a User hasMany Products. This gives
us a new function on every User instance, in this case the function is called 'products' because that is the name
we specified in the association configuration above.
This new function returns a specialized Store which is automatically filtered to load
only Products for the given model instance:
//first, we load up a User with id of 1
var user = Ext.ModelMgr.create({id: 1, name: 'Ed'}, 'User');

//the user.products function was created automatically by the association and returns a Store
//the created store is automatically scoped to the set of Products for the User with id of 1
var products = user.products();

//we still have all of the usual Store functions, for example it's easy to add a Product for this User
products.add({
    name: 'Another Product'
});

//saves the changes to the store - this automatically sets the new Product's user_id to 1 before saving
products.sync();
The new Store is only instantiated the first time you call products() to conserve memory and processing time,
though calling products() a second time returns the same store instance.
Custom filtering
The Store is automatically furnished with a filter - by default this filter tells the store to only return
records where the associated model's foreign key matches the owner model's primary key. For example, if a User
with ID = 100 hasMany Products, the filter loads only Products with user_id == 100.
Sometimes we want to filter by another field - for example in the case of a Twitter search application we may
have models for Search and Tweet:
var Search = Ext.regModel('Search', {
    fields: [
        'id', 'query'
    ],

    hasMany: {
        model: 'Tweet',
        name : 'tweets',
        filterProperty: 'query'
    }
});

Ext.regModel('Tweet', {
    fields: [
        'id', 'text', 'from_user'
    ]
});

//returns a Store filtered by the filterProperty
var store = new Search({query: 'Sencha Touch'}).tweets();
The tweets association above is filtered by the query property by setting the filterProperty, and is
equivalent to this:
var store = new Ext.data.Store({
    model: 'Tweet',
    filters: [
        {
            property: 'query',
            value   : 'Sencha Touch'
        }
    ]
});</description><constructors/><properties/><methods/></class><class superclass="Ext.Panel" type="Ext.Sheet"><description/><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext.data.Operation"><description>Represents a single read or write operation performed by a Proxy.
Operation objects are used to enable communication between Stores and Proxies. Application
developers should rarely need to interact with Operation objects directly.
Several Operations can be batched together in a batch.</description><constructors/><properties/><methods><method name="allowWrite" scope="instance"><description>Checks whether this operation should cause writing to occur.</description></method><method name="getError" scope="instance"><description>Returns the error string or object that was set using setException</description></method><method name="getRecords" scope="instance"><description>Returns an array of Ext.data.Model instances as set by the Proxy.</description></method><method name="getResultSet" scope="instance"><description>Returns the ResultSet object (if set by the Proxy). This object will contain the model instances
as well as meta data such as number of instances fetched, number available etc</description></method><method name="hasException" scope="instance"><description>Returns true if this Operation encountered an exception (see also getError)</description></method><method name="isComplete" scope="instance"><description>Returns true if the Operation has been completed</description></method><method name="isRunning" scope="instance"><description>Returns true if the Operation has been started but has not yet completed.</description></method><method name="isStarted" scope="instance"><description>Returns true if the Operation has been started. Note that the Operation may have started AND completed,
see isRunning to test if the Operation is currently running.</description></method><method name="setCompleted" scope="instance"><description>Marks the Operation as completed</description></method><method name="setException" scope="instance"><description>Marks the Operation as having experienced an exception. Can be supplied with an option error message/object.</description></method><method name="setStarted" scope="instance"><description>Marks the Operation as started</description></method><method name="setSuccessful" scope="instance"><description>Marks the Operation as successful</description></method><method name="wasSuccessful" scope="instance"><description>Returns true if the Operation has completed and was successful</description></method></methods></class><class superclass="Object" type="Ext.fx2.target.Sprite"><description/><constructors/><properties/><methods/></class><class superclass="Ext.util.Observable" type="Ext.Application"><description>Represents a Sencha Application. Most Applications consist of at least the application's name and a launch
function:
new Ext.Application({
    name: 'MyApp',

    launch: function() {
        this.viewport = new Ext.Panel({
            fullscreen: true,
            
            id    : 'mainPanel',
            layout: 'card',
            items : [
                {
                    html: 'Welcome to My App!'
                }
            ]
        });
    }
});
Instantiating a new application automatically creates a global variable using the configured name 
property and sets up namespaces for views, stores, models and controllers within the app:
//this code is run internally automatically when creating the app
Ext.ns('MyApp', 'MyApp.views', 'MyApp.stores', 'MyApp.models', 'MyApp.controllers');
The launch function usually creates the Application's Viewport and runs any actions the Application needs to 
perform when it boots up. The launch function is only expected to be run once.
Routes and history support
Sencha Applications provide in-app deep linking and history support, allowing your users both to use the back
button inside your application and to refresh the page and come back to the same screen even after navigating.
In-app history support relies on the Routing engine, which maps urls to controller/action pairs. Here's an example
route definition:
//Note the # in the url examples below
Ext.Router.draw(function(map) {
    //maps the url http://mydomain.com/#dashboard to the home controller's index action
    map.connect('dashboard', {controller: 'home', action: 'index'});

    //fallback route - would match routes like http://mydomain.com/#users/list to the 'users' controller's
    //'list' action
    map.connect(':controller/:action');
});
If you generated your Sencha app using the Sencha Command application generator script, you'll see this file is
already present in your application's app/routes.js file. History-driven apps can specify the defaultUrl
configuration option, which will dispatch to that url if no url is currently set:
new Ext.Application({
    name: 'MyApp',
    defaultUrl: 'dashboard'
});
Application profiles
Applications support multiple app profiles and reconfigure itself accordingly. Here we set up an Application
with 3 profiles - one if the device is a phone, one for tablets in landscape orientation and one for tablets in
portrait orientation:
new Ext.Application({
    name: 'MyApp',

    profiles: {
        phone: function() {
            return Ext.is.Phone;
        },
        tabletPortrait: function() {
            return Ext.is.Tablet &amp;&amp; Ext.orientation == 'portrait';
        },
        tabletLandscape: function() {
            return Ext.is.Tablet &amp;&amp; Ext.orientation == 'landscape';
        }
    }
});
When the Application checks its list of profiles, the first function that returns true becomes the current profile.
The Application will normally automatically detect when a profile change has occurred (e.g. if a tablet is rotated 
from portrait to landscape mode) and fire the profilechange event. It will also by default inform all 
Components on the page that the current profile has changed by calling their 
setProfile functions. The setProfile function is left as an empty function for you
to implement if your component needs to react to different device/application profiles.
The current profile can be found using getProfile. If the Application does not correctly detect device 
profile changes, calling the determineProfile function will force it to re-check.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="determineProfile" scope="instance"><description>Calls each configured profile function, marking the first one that returns true as the current
application profile. Fires the 'beforeprofilechange' and 'profilechange' events if the profile has changed</description></method><method name="dispatch" scope="instance"><description>Dispatches to a given controller/action combo with optional arguments.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getProfile" scope="instance"><description>Gets the name of the currently-detected application profile</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="launch" scope="instance"><description>Called automatically when the page has completely loaded. This is an empty function that should be
overridden by each application that needs to take action on page load</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.chart.CartesianSeries" type="Ext.chart.BarSeries"><description>Series which displays its items as horizontal bars</description><constructors/><properties/><methods><method name="getItemForPoint" scope="instance"><description>For a given x/y point relative to the Surface, find a corresponding item from this
series, if any.
For Bar/Column series, this is the bar directly under the point.</description></method><method name="getLabelSize" scope="instance"><description>Gets the dimensions of a given bar label. Uses a single hidden sprite to avoid
changing visible sprites.</description></method><method name="highlightItem" scope="instance"><description>Highlight the given series item.</description></method><method name="unHighlight" scope="instance"><description>Un-highlight any existing highlights</description></method></methods></class><class superclass="Object" type="Ext.data.Request"><description>Simple class that represents a Request that will be made by any Ext.data.ServerProxy subclass.
All this class does is standardize the representation of a Request as used by any ServerProxy subclass,
it does not contain any actual logic or perform the request itself.</description><constructors/><properties/><methods/></class><class superclass="Ext.util.Observable" type="Ext.data.Batch"><description>Provides a mechanism to run one or more operations in a given order. Fires the 'operation-complete' event
after the completion of each Operation, and the 'complete' event when all Operations have been successfully executed. Fires an 'exception'
event if any of the Operations encounter an exception.
Usually these are only used internally by Ext.data.Proxy classes</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds a new operation to this batch</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="pause" scope="instance"><description>Pauses execution of the batch, but does not cancel the current operation</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="runOperation" scope="instance"><description>Executes a operation by its numeric index</description></method><method name="start" scope="instance"><description>Kicks off the execution of the batch, continuing from the next operation if the previous
operation encountered an exception, or if execution was paused</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Object" type="Ext.Msg"><description/><constructors/><properties/><methods/></class><class superclass="Ext.data.ServerProxy" type="Ext.data.AjaxProxy"><description>An implementation of Ext.data.Proxy that processes data requests within the same
domain of the originating page.
Note: this class cannot be used to retrieve data from a domain other
than the domain from which the running page was served. For cross-domain requests, use a
ScriptTagProxy.
Be aware that to enable the browser to parse an XML document, the server must set
the Content-Type header in the HTTP response to &quot;text/xml&quot;.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="afterRequest" scope="instance"><description>Optional callback function which can be used to clean up after a request has been completed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="buildRequest" scope="instance"><description>Creates and returns an Ext.data.Request object based on the options passed by the Store
that this Proxy is attached to.</description></method><method name="buildUrl" scope="instance"><description>Generates a url based on a given Ext.data.Request object. By default, ServerProxy's buildUrl will
add the cache-buster param to the end of the url. Subclasses may need to perform additional modifications
to the url.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="doRequest" scope="instance"><description>In ServerProxy subclasses, the create, read, update and destroy methods all pass
through to doRequest. Each ServerProxy subclass must implement the doRequest method - see Ext.data.ScriptTagProxy
and Ext.data.AjaxProxy for examples. This method carries the same signature as each of the methods that delegate to it.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getMethod" scope="instance"><description>Returns the HTTP method name for a given request. By default this returns based on a lookup on actionMethods.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.data.Association" type="Ext.data.BelongsToAssociation"><description>Represents a one to one association with another model. The owner model is expected to have
a foreign key which references the primary key of the associated model:
var Category = Ext.regModel('Category', {
    fields: [
        {name: 'id',   type: 'int'},
        {name: 'name', type: 'string'}
    ]
});

var Product = Ext.regModel('Product', {
    fields: [
        {name: 'id',          type: 'int'},
        {name: 'category_id', type: 'int'},
        {name: 'name',        type: 'string'}
    ],

    associations: [
        {type: 'belongsTo', model: 'Category'}
    ]
});
In the example above we have created models for Products and Categories, and linked them together
by saying that each Product belongs to a Category. This automatically links each Product to a Category
based on the Product's category_id, and provides new functions on the Product model:
Generated getter function
The first function that is added to the owner model is a getter function:
var product = new Product({
    id: 100,
    category_id: 20,
    name: 'Sneakers'
});

product.getCategory(function(category, operation) {
    //do something with the category object
    alert(category.get('id')); //alerts 20
}, this);
The getCategory function was created on the Product model when we defined the association. This uses the
Category's configured proxy to load the Category asynchronously, calling the provided
callback when it has loaded. The new getCategory function will also accept an object containing success, 
failure and callback properties - callback will always be called, success will only be called if the associated
model was loaded successfully and failure will only be called if the associatied model could not be loaded:
product.getCategory({
    callback: function(category, operation), //a function that will always be called
    success : function(category, operation), //a function that will only be called if the load succeeded
    failure : function(category, operation), //a function that will only be called if the load did not succeed
    scope   : this //optionally pass in a scope object to execute the callbacks in
});
In each case above the callbacks are called with two arguments - the associated model instance and the 
operation object that was executed to load that instance. The Operation object is
useful when the instance could not be loaded.
Generated setter function
The second generated function sets the associated model instance - if only a single argument is passed to
the setter then the following two calls are identical:
//this call
product.setCategory(10);

//is equivalent to this call:
product.set('category_id', 10);
If we pass in a second argument, the model will be automatically saved and the second argument passed to
the owner model's save method:
product.setCategory(10, function(product, operation) {
    //the product has been saved
    alert(product.get('category_id')); //now alerts 10
});

//alternative syntax:
product.setCategory(10, {
    callback: function(product, operation), //a function that will always be called
    success : function(product, operation), //a function that will only be called if the load succeeded
    failure : function(product, operation), //a function that will only be called if the load did not succeed
    scope   : this //optionally pass in a scope object to execute the callbacks in
})
Customisation
Associations reflect on the models they are linking to automatically set up properties such as the
primaryKey and foreignKey. These can alternatively be specified:
var Product = Ext.regModel('Product', {
    fields: [...],

    associations: [
        {type: 'belongsTo', model: 'Category', primaryKey: 'unique_id', foreignKey: 'cat_id'}
    ]
});
Here we replaced the default primary key (defaults to 'id') and foreign key (calculated as 'category_id')
with our own settings. Usually this will not be needed.</description><constructors/><properties/><methods/></class><class superclass="Ext.Template" type="Ext.XTemplate"><description>A template class that supports advanced functionality like:
Autofilling arrays using templates and sub-templates
Conditional processing with basic comparison operators
Basic math function support
Execute arbitrary inline code with special built-in template variables
Custom member functions
Many special tags and built-in operators that aren't defined as part of
the API, but are supported in the templates that can be created

XTemplate provides the templating mechanism built into:
Ext.DataView

The Ext.Template describes
the acceptable parameters to pass to the constructor. The following
examples demonstrate all of the supported features.

Sample Data

This is the data object used for reference in each code example:
var data = {
name: 'Tommy Maintz',
title: 'Lead Developer',
company: 'Ext JS, Inc',
email: 'tommy@extjs.com',
address: '5 Cups Drive',
city: 'Palo Alto',
state: 'CA',
zip: '44102',
drinks: ['Coffee', 'Soda', 'Water'],
kids: [{
        name: 'Joshua',
        age:3
    },{
        name: 'Matthew',
        age:2
    },{
        name: 'Solomon',
        age:0
}]
};


Auto filling of arrays

The tpl tag and the for operator are used
to process the provided data object:

If the value specified in for is an array, it will auto-fill,
repeating the template block inside the tpl tag for each item in the
array.
If for=&quot;.&quot; is specified, the data object provided is examined.
While processing an array, the special variable {#}
will provide the current array index + 1 (starts at 1, not 0).


&lt;tpl for=&quot;.&quot;&gt;...&lt;/tpl&gt;       // loop through array at root node
&lt;tpl for=&quot;foo&quot;&gt;...&lt;/tpl&gt;     // loop through array at foo node
&lt;tpl for=&quot;foo.bar&quot;&gt;...&lt;/tpl&gt; // loop through array at foo.bar node
Using the sample data above:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Kids: ',
    '&lt;tpl for=&quot;.&quot;&gt;',       // process the data.kids node
        '&lt;p&gt;{#}. {name}&lt;/p&gt;',  // use current array index to autonumber
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
An example illustrating how the for property can be leveraged
to access specified members of the provided data object to populate the template:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Title: {title}&lt;/p&gt;',
    '&lt;p&gt;Company: {company}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for=&quot;kids&quot;&gt;',     // interrogate the kids property within the data
        '&lt;p&gt;{name}&lt;/p&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);  // pass the root node of the data object
Flat arrays that contain values (and not objects) can be auto-rendered
using the special {.} variable inside a loop.  This variable
will represent the value of the array at the current index:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;{name}\&#39;s favorite beverages:&lt;/p&gt;',
    '&lt;tpl for=&quot;drinks&quot;&gt;',
        '&lt;div&gt; - {.}&lt;/div&gt;',
    '&lt;/tpl&gt;'
);
tpl.overwrite(panel.body, data);
When processing a sub-template, for example while looping through a child array,
you can access the parent object's members via the parent object:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for=&quot;kids&quot;&gt;',
        '&lt;tpl if=&quot;age &amp;gt; 1&quot;&gt;',
            '&lt;p&gt;{name}&lt;/p&gt;',
            '&lt;p&gt;Dad: {parent.name}&lt;/p&gt;',
        '&lt;/tpl&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);


Conditional processing with basic comparison operators

The tpl tag and the if operator are used
to provide conditional checks for deciding whether or not to render specific
parts of the template. Notes:
Double quotes must be encoded if used within the conditional
There is no else operator &amp;mdash; if needed, two opposite
if statements should be used.

&lt;tpl if=&quot;age &gt; 1 &amp;&amp; age &lt; 10&quot;&gt;Child&lt;/tpl&gt;
&lt;tpl if=&quot;age &gt;= 10 &amp;&amp; age &lt; 18&quot;&gt;Teenager&lt;/tpl&gt;
&lt;tpl if=&quot;this.isGirl(name)&quot;&gt;...&lt;/tpl&gt;
&lt;tpl if=&quot;id==\'download\'&quot;&gt;...&lt;/tpl&gt;
&lt;tpl if=&quot;needsIcon&quot;&gt;&lt;img src=&quot;{icon}&quot; class=&quot;{iconCls}&quot;/&gt;&lt;/tpl&gt;
// no good:
&lt;tpl if=&quot;name == &quot;Tommy&quot;&quot;&gt;Hello&lt;/tpl&gt;
// encode &#34; if it is part of the condition, e.g.
&lt;tpl if=&quot;name == &#38;quot;Tommy&#38;quot;&quot;&gt;Hello&lt;/tpl&gt;
Using the sample data above:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for=&quot;kids&quot;&gt;',
        '&lt;tpl if=&quot;age &amp;gt; 1&quot;&gt;',
            '&lt;p&gt;{name}&lt;/p&gt;',
        '&lt;/tpl&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);


Basic math support

The following basic math operators may be applied directly on numeric
data values:
+ - * /

For example:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for=&quot;kids&quot;&gt;',
        '&lt;tpl if=&quot;age &amp;gt; 1&quot;&gt;',  // &lt;-- Note that the &gt; is encoded
            '&lt;p&gt;{#}: {name}&lt;/p&gt;',  // &lt;-- Auto-number each item
            '&lt;p&gt;In 5 Years: {age+5}&lt;/p&gt;',  // &lt;-- Basic math
            '&lt;p&gt;Dad: {parent.name}&lt;/p&gt;',
        '&lt;/tpl&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
);
tpl.overwrite(panel.body, data);


Execute arbitrary inline code with special built-in template variables

Anything between {[ ... ]} is considered code to be executed
in the scope of the template. There are some special variables available in that code:

values: The values in the current scope. If you are using
scope changing sub-templates, you can change what values is.
parent: The scope (values) of the ancestor template.
xindex: If you are in a looping template, the index of the
loop you are in (1-based).
xcount: If you are in a looping template, the total length
of the array you are looping.

This example demonstrates basic row striping using an inline code block and the
xindex variable:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Company: {[values.company.toUpperCase() + &quot;, &quot; + values.title]}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for=&quot;kids&quot;&gt;',
        '&lt;div class=&quot;{[xindex % 2 === 0 ? &quot;even&quot; : &quot;odd&quot;]}&quot;&gt;',
        '{name}',
        '&lt;/div&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;'
 );
tpl.overwrite(panel.body, data);


Template member functions

One or more member functions can be specified in a configuration
object passed into the XTemplate constructor for more complex processing:
var tpl = new Ext.XTemplate(
    '&lt;p&gt;Name: {name}&lt;/p&gt;',
    '&lt;p&gt;Kids: ',
    '&lt;tpl for=&quot;kids&quot;&gt;',
        '&lt;tpl if=&quot;this.isGirl(name)&quot;&gt;',
            '&lt;p&gt;Girl: {name} - {age}&lt;/p&gt;',
        '&lt;/tpl&gt;',
         // use opposite if statement to simulate 'else' processing:
        '&lt;tpl if=&quot;this.isGirl(name) == false&quot;&gt;',
            '&lt;p&gt;Boy: {name} - {age}&lt;/p&gt;',
        '&lt;/tpl&gt;',
        '&lt;tpl if=&quot;this.isBaby(age)&quot;&gt;',
            '&lt;p&gt;{name} is a baby!&lt;/p&gt;',
        '&lt;/tpl&gt;',
    '&lt;/tpl&gt;&lt;/p&gt;',
    {
        // XTemplate configuration:
        compiled: true,
        // member functions:
        isGirl: function(name){
           return name == 'Sara Grace';
        },
        isBaby: function(age){
           return age &lt; 1;
        }
    }
);
tpl.overwrite(panel.body, data);


</description><constructors/><properties/><methods><method name="XTemplate.from" scope="instance"><description>Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML.</description></method><method name="append" scope="instance"><description>Applies the supplied values to the template and appends
the new node(s) to the specified el.
For example usage see the constructor.</description></method><method name="apply" scope="instance"><description>Alias for applyTemplate
Returns an HTML fragment of this template with the specified values applied.</description></method><method name="applyTemplate" scope="instance"><description>Returns an HTML fragment of this template with the specified values applied.</description></method><method name="compile" scope="instance"><description>Compile the template to a function for optimized performance.  Recommended if the template will be used frequently.</description></method><method name="insertAfter" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) after el.</description></method><method name="insertBefore" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) before el.</description></method><method name="insertFirst" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) as the first child of el.</description></method><method name="overwrite" scope="instance"><description>Applies the supplied values to the template and overwrites the content of el with the new node(s).</description></method><method name="set" scope="instance"><description>Sets the HTML used as the template and optionally compiles it.</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.data.AbstractStore"><description>AbstractStore which provides interactivity with proxies and readers but
does NOT rely on any internal data storage representation. Subclasses of
Store and TreeStore use the internal representation of Ext.util.MixedCollection
and Ext.data.Tree respectively.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getNewRecords" scope="instance"><description>Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)</description></method><method name="getProxy" scope="instance"><description>Returns the proxy currently attached to this proxy instance</description></method><method name="getSortState" scope="instance"><description>Returns an object describing the current sort state of this Store.</description></method><method name="getUpdatedRecords" scope="instance"><description>Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="load" scope="instance"><description>Loads the Store using its configured proxy.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setProxy" scope="instance"><description>Sets the Store's Proxy by string, config object or Proxy instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="sync" scope="instance"><description>Synchronizes the Store with its Proxy. This asks the Proxy to batch together any new, updated
and deleted records in the store, updating the Store's internal representation of the records
as each operation completes.</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.form.FormPanel" type="Ext.scaffold.Form"><description/><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="buildFormItems" scope="instance"><description>Returns an array of form items to create for the scaffold. The configured model's fields are reflected upon
and automatically turned into the appropriate form item types</description></method><method name="buildToolbar" scope="instance"><description>Creates and returns a toolbar containing (by default) save and cancel buttons</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getFieldType" scope="instance"><description>Returns the xtype string for the best form field to create for a given field from a Model definition</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getRecord" scope="instance"><description>Returns the Model instance currently loaded into this form (if any)</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValues" scope="instance"><description>Returns an object containing the value of each field in the form, keyed to the field's name</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="hideMask" scope="instance"><description>Hides a previously shown wait mask (See showMask)</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="load" scope="instance"><description>(Shortcut to loadRecord method) Loads matching fields from a model instance into this form</description></method><method name="loadRecord" scope="instance"><description>Loads matching fields from a model instance into this form</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="onCancelButtonClick" scope="instance"><description>Handler tied to the cancel button. By default this just fires the 'cancel' event</description></method><method name="onSaveButtonClick" scope="instance"><description>Handler tied to the save button. By default this just fires the 'save' event</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets all fields in the form back to their original values</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setModel" scope="instance"><description>Sets the model used by this scaffold. Can pass in the model string name or the model constructor</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setValues" scope="instance"><description>Sets the values of form fields in bulk. Example usage:
myForm.setValues({
    name: 'Ed',
    crazy: true,
    username: 'edspencer'
});</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="showMask" scope="instance"><description>Shows a generic/custom mask over a designated Element.</description></method><method name="submit" scope="instance"><description>Performs a Ajax-based submission of form values (if standardSubmit is false) or otherwise 
executes a standard HTML Form submit action.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="updateRecord" scope="instance"><description>Updates a model instance with the current values of this form</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Ext.util.Draggable" type="Ext.util.Scroller"><description>Mimic the native scrolling experience on iDevices</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys this Draggable instance.</description></method><method name="disable" scope="instance"><description>Disable the Draggable.</description></method><method name="enable" scope="instance"><description>Enable the Draggable.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getOffset" scope="instance"><description>Returns the current offset relative to the original location of this Draggable.</description></method><method name="getProxyEl" scope="instance"><description>Returns the element thats is being visually dragged.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isDragging" scope="instance"><description>Method to determine whether this Draggable is currently dragging.</description></method><method name="isHorizontal" scope="instance"><description>Method to determine whether this Sortable is currently sorting.</description></method><method name="isVertical" scope="instance"><description>Method to determine whether this Sortable is currently disabled.</description></method><method name="moveTo" scope="instance"><description>Use this to move the draggable to a coordinate on the screen.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setEnabled" scope="instance"><description>Combined method to disable or enable the Draggable. This method is called by the enable and
disable methods.</description></method><method name="setOffset" scope="instance"><description>Sets the offset of this Draggable relative to its original offset.</description></method><method name="setUseCssTransform" scope="instance"><description>Change the Draggable to use css transforms instead of style offsets
or the other way around.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.util.TaskRunner" type="Ext.TaskMgr"><description>A static Ext.util.TaskRunner instance that can be used to start and stop arbitrary tasks.  See
Ext.util.TaskRunner for supported methods and task config properties.
// Start a simple clock task that updates a div once per second
var task = {
    run: function(){
        Ext.fly('clock').update(new Date().format('g:i:s A'));
    },
    interval: 1000 //1 second
}
Ext.TaskMgr.start(task);
See the start method for details about how to configure a task object.</description><constructors/><properties/><methods><method name="start" scope="instance"><description>Starts a new task.</description></method><method name="stop" scope="instance"><description>Stops an existing running task.</description></method><method name="stopAll" scope="instance"><description>Stops all tasks that are currently running.</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.TextArea"><description>Wraps a textarea. See FormPanel for example usage.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.form.Checkbox" type="Ext.form.Radio"><description>Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
Radio grouping is handled automatically by the browser if you give each radio in a group the same name.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getGroupValue" scope="instance"><description>If this radio is part of a group, it will return the selected value</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInputValue" scope="instance"><description>Returns the value that will be sent when the form is submitted and this is checked.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the checked state of the checkbox.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setInputValue" scope="instance"><description>Sets the value that will be sent when the form is submitted and this is checked.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets either the checked/unchecked status of this Radio, or, if a string value
is passed, checks a sibling Radio of the same name whose value is the value specified.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.data.Writer" type="Ext.data.JsonWriter"><description>Writer that outputs model data in JSON format</description><constructors/><properties/><methods><method name="getRecordData" scope="instance"><description>Formats the data for each record before sending it to the server. This
method should be overridden to format the data in a way that differs from the default.</description></method><method name="write" scope="instance"><description>Prepares a Proxy's Ext.data.Request object</description></method></methods></class><class superclass="Object" type="Ext.util.JSONP"><description>Provides functionality to make cross-domain requests with JSONP (JSON with Padding).
http://en.wikipedia.org/wiki/JSON#JSONP

Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
of the running page, you must use this class, because of the same origin policy.

The content passed back from a server resource requested by a JSONP requestmust be executable JavaScript
source code because it is used as the source inside a &lt;script&gt; tag.

In order for the browser to process the returned data, the server must wrap the data object
with a call to a callback function, the name of which is passed as a parameter callbackKey
Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
depending on whether the callback name was passed:

boolean scriptTag = false;
String cb = request.getParameter(&quot;callback&quot;);
if (cb != null) {
    scriptTag = true;
    response.setContentType(&quot;text/javascript&quot;);
} else {
    response.setContentType(&quot;application/x-json&quot;);
}
Writer out = response.getWriter();
if (scriptTag) {
    out.write(cb + &quot;(&quot;);
}
out.print(dataBlock.toJsonString());
if (scriptTag) {
    out.write(&quot;);&quot;);
}
Below is a PHP example to do the same thing:$callback = $_REQUEST['callback'];

// Create the output object.
$output = array('a' =&gt; 'Apple', 'b' =&gt; 'Banana');

//start output
if ($callback) {
    header('Content-Type: text/javascript');
    echo $callback . '(' . json_encode($output) . ');';
} else {
    header('Content-Type: application/x-json');
    echo json_encode($output);
}
Below is the ASP.Net code to do the same thing:String jsonString = &quot;{success: true}&quot;;
String cb = Request.Params.Get(&quot;callback&quot;);
String responseString = &quot;&quot;;
if (!String.IsNullOrEmpty(cb)) {
    responseString = cb + &quot;(&quot; + jsonString + &quot;)&quot;;
} else {
    responseString = jsonString;
}
Response.Write(responseString);</description><constructors/><properties/><methods><method name="request" scope="instance"><description>Make a cross-domain request using JSONP.</description></method></methods></class><class superclass="Object" type="Ext.data.Field"><description>This class encapsulates the field definition information specified in the field definition objects
passed to Ext.regModel.
Developers do not need to instantiate this class. Instances are created by Ext.regModel
and cached in the fields property of the created Model constructor's prototype.</description><constructors/><properties/><methods/></class><class superclass="Ext.layout.ContainerLayout" type="Ext.layout.BoxLayout"><description>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</description><constructors/><properties/><methods><method name="getLayoutItems" scope="instance"><description>Returns an array of child components.</description></method><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method></methods></class><class superclass="Object" type="Date"><description>The date parsing and formatting syntax contains a subset of
PHP's date() function, and the formats that are
supported will provide results equivalent to their PHP versions.
The following is a list of all currently supported formats:

Format  Description                                                               Example returned values
------  -----------------------------------------------------------------------   -----------------------
  d     Day of the month, 2 digits with leading zeros                             01 to 31
  D     A short textual representation of the day of the week                     Mon to Sun
  j     Day of the month without leading zeros                                    1 to 31
  l     A full textual representation of the day of the week                      Sunday to Saturday
  N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
  S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
  w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
  z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
  W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53
  F     A full textual representation of a month, such as January or March        January to December
  m     Numeric representation of a month, with leading zeros                     01 to 12
  M     A short textual representation of a month                                 Jan to Dec
  n     Numeric representation of a month, without leading zeros                  1 to 12
  t     Number of days in the given month                                         28 to 31
  L     Whether it's a leap year                                                  1 if it is a leap year, 0 otherwise.
  o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
        belongs to the previous or next year, that year is used instead)
  Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
  y     A two digit representation of a year                                      Examples: 99 or 03
  a     Lowercase Ante meridiem and Post meridiem                                 am or pm
  A     Uppercase Ante meridiem and Post meridiem                                 AM or PM
  g     12-hour format of an hour without leading zeros                           1 to 12
  G     24-hour format of an hour without leading zeros                           0 to 23
  h     12-hour format of an hour with leading zeros                              01 to 12
  H     24-hour format of an hour with leading zeros                              00 to 23
  i     Minutes, with leading zeros                                               00 to 59
  s     Seconds, with leading zeros                                               00 to 59
  u     Decimal fraction of a second                                              Examples:
        (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or
                                                                                  100 (i.e. 0.100s) or
                                                                                  999 (i.e. 0.999s) or
                                                                                  999876543210 (i.e. 0.999876543210s)
  O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
  P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
  T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
  Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
  c     ISO 8601 date
        Notes:                                                                    Examples:
        1) If unspecified, the month / day defaults to the current month / day,   1991 or
           the time defaults to midnight, while the timezone defaults to the      1992-10 or
           browser's timezone. If a time is specified, it must include both hours 1993-09-20 or
           and minutes. The &quot;T&quot; delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or
           are optional.                                                          1995-07-18T17:21:28-02:00 or
        2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or
           least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or
           of digits allowed), and may be delimited by either a '.' or a ','      1998-04-15T20:24:31.2468Z or
        Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or
        date-time granularity which are supported, or see                         2000-02-13T21:25:33
        http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34
  U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463
  M$    Microsoft AJAX serialized dates                                           \/Date(1238606590509)\/ (i.e. UTC milliseconds since epoch) or
                                                                                  \/Date(1238606590509+0800)\/

Example usage (note that you must escape format specifiers with '\\' to render them as character literals):
// Sample date:
// 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'

var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
document.write(dt.format('Y-m-d'));                           // 2007-01-10
document.write(dt.format('F j, Y, g:i a'));                   // January 10, 2007, 3:05 pm
document.write(dt.format('l, \\t\\he jS \\of F Y h:i:s A'));  // Wednesday, the 10th of January 2007 03:05:01 PM
Here are some standard date/time patterns that you might find helpful.  They
are not part of the source of Date.js, but to use them you can simply copy this
block of code into any script that is included after Date.js and they will also become
globally available on the Date object.  Feel free to add or remove patterns as needed in your code.
Date.patterns = {
    ISO8601Long:&quot;Y-m-d H:i:s&quot;,
    ISO8601Short:&quot;Y-m-d&quot;,
    ShortDate: &quot;n/j/Y&quot;,
    LongDate: &quot;l, F d, Y&quot;,
    FullDateTime: &quot;l, F d, Y g:i:s A&quot;,
    MonthDay: &quot;F d&quot;,
    ShortTime: &quot;g:i A&quot;,
    LongTime: &quot;g:i:s A&quot;,
    SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,
    UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,
    YearMonth: &quot;F, Y&quot;
};
Example usage:
var dt = new Date();
document.write(dt.format(Date.patterns.ShortDate));
Developer-written, custom formats may be used by supplying both a formatting and a parsing function
which perform to specialized requirements. The functions are stored in parseFunctions and formatFunctions.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Provides a convenient method for performing basic date arithmetic. This method
does not modify the Date instance being called - it creates and returns
a new Date instance containing the resulting date value.
Examples:
// Basic usage:
var dt = new Date('10/29/2006').add(Date.DAY, 5);
document.write(dt); //returns 'Fri Nov 03 2006 00:00:00'

// Negative values will be subtracted:
var dt2 = new Date('10/1/2006').add(Date.DAY, -5);
document.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'

// You can even chain several calls together in one line:
var dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);
document.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'</description></method><method name="between" scope="instance"><description>Checks if this date falls on or between the given start and end dates.</description></method><method name="clearTime" scope="instance"><description>Attempts to clear all time information from this Date by setting the time to midnight of the same day,
automatically adjusting for Daylight Saving Time (DST) where applicable.
(note: DST timezone information for the browser's host operating system is assumed to be up-to-date)</description></method><method name="clone" scope="instance"><description>Creates and returns a new Date instance with the exact same date value as the called instance.
Dates are copied and passed by reference, so if a copied date variable is modified later, the original
variable will also be changed.  When the intention is to create a new variable that will not
modify the original instance, you should create a clone.
Example of correctly cloning a date:
//wrong way:
var orig = new Date('10/1/2006');
var copy = orig;
copy.setDate(5);
document.write(orig);  //returns 'Thu Oct 05 2006'!

//correct way:
var orig = new Date('10/1/2006');
var copy = orig.clone();
copy.setDate(5);
document.write(orig);  //returns 'Thu Oct 01 2006'</description></method><method name="format" scope="instance"><description>Formats a date given the supplied format string.</description></method><method name="getDayOfYear" scope="instance"><description>Get the numeric day number of the year, adjusted for leap year.</description></method><method name="getDaysInMonth" scope="instance"><description>Get the number of days in the current month, adjusted for leap year.</description></method><method name="getFirstDateOfMonth" scope="instance"><description>Get the date of the first day of the month in which this date resides.</description></method><method name="getFirstDayOfMonth" scope="instance"><description>Get the first day of the current month, adjusted for leap year.  The returned value
is the numeric day index within the week (0-6) which can be used in conjunction with
the monthNames array to retrieve the textual day name.
Example:
var dt = new Date('1/10/2007');
document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'</description></method><method name="getGMTOffset" scope="instance"><description>Get the offset from GMT of the current date (equivalent to the format specifier 'O').</description></method><method name="getLastDateOfMonth" scope="instance"><description>Get the date of the last day of the month in which this date resides.</description></method><method name="getLastDayOfMonth" scope="instance"><description>Get the last day of the current month, adjusted for leap year.  The returned value
is the numeric day index within the week (0-6) which can be used in conjunction with
the monthNames array to retrieve the textual day name.
Example:
var dt = new Date('1/10/2007');
document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'</description></method><method name="getMonthNumber" scope="instance"><description>Get the zero-based javascript month number for the given short/full month name.
Override this function for international dates.</description></method><method name="getShortDayName" scope="instance"><description>Get the short day name for the given day number.
Override this function for international dates.</description></method><method name="getShortMonthName" scope="instance"><description>Get the short month name for the given month number.
Override this function for international dates.</description></method><method name="getSuffix" scope="instance"><description>Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').</description></method><method name="getTimezone" scope="instance"><description>Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').
Note: The date string returned by the javascript Date object's toString() method varies
between browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).
For a given date string e.g. &quot;Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)&quot;,
getTimezone() first tries to get the timezone abbreviation from between a pair of parentheses
(which may or may not be present), failing which it proceeds to get the timezone abbreviation
from the GMT offset portion of the date string.</description></method><method name="getWeekOfYear" scope="instance"><description>Get the numeric ISO-8601 week number of the year.
(equivalent to the format specifier 'W', but without a leading zero).</description></method><method name="isDST" scope="instance"><description>Checks if the current date is affected by Daylight Saving Time (DST).</description></method><method name="isLeapYear" scope="instance"><description>Checks if the current date falls within a leap year.</description></method><method name="isValid" scope="instance"><description>Checks if the passed Date parameters will cause a javascript Date &quot;rollover&quot;.</description></method><method name="parseDate" scope="instance"><description>Parses the passed string using the specified date format.
Note that this function expects normal calendar dates, meaning that months are 1-based (i.e. 1 = January).
The defaults hash will be used for any date value (i.e. year, month, day, hour, minute, second or millisecond)
which cannot be found in the passed string. If a corresponding default date value has not been specified in the defaults hash,
the current date's year, month, day or DST-adjusted zero-hour time value will be used instead.
Keep in mind that the input date string must precisely match the specified format string
in order for the parse operation to be successful (failed parse operations return a null value).
Example://dt = Fri May 25 2007 (current date)
var dt = new Date();

//dt = Thu May 25 2006 (today&#39;s month/day in 2006)
dt = Date.parseDate(&quot;2006&quot;, &quot;Y&quot;);

//dt = Sun Jan 15 2006 (all date parts specified)
dt = Date.parseDate(&quot;2006-01-15&quot;, &quot;Y-m-d&quot;);

//dt = Sun Jan 15 2006 15:20:01
dt = Date.parseDate(&quot;2006-01-15 3:20:01 PM&quot;, &quot;Y-m-d g:i:s A&quot;);

// attempt to parse Sun Feb 29 2006 03:20:01 in strict mode
dt = Date.parseDate(&quot;2006-02-29 03:20:01&quot;, &quot;Y-m-d H:i:s&quot;, true); // returns null</description></method></methods></class><class superclass="Ext.Container" type="Ext.form.Field"><description>Base class for form fields that provides default event handling, sizing, value handling and other functionality. Ext.form.Field
is not used directly in applications, instead the subclasses such as Ext.form.TextField should be used.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.TextField"><description>Simple text input field. See FormPanel for example usage.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.chart.Legend.Item"><description>A single item of a legend (marker plus label)</description><constructors/><properties/><methods><method name="createSprites" scope="instance"><description>Create all the individual sprites for this legend item</description></method><method name="updatePosition" scope="instance"><description>Update the positions of all this item's sprites to match the root position
of the legend box.</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.util.Stateful"><description>Represents any object whose data can be saved by a Proxy. Ext.Model
and Ext.View both inherit from this class as both can save state (Models save field state, 
Views save configuration)</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="commit" scope="instance"><description>Usually called by the Ext.data.Store which owns the model instance.
Commits all changes made to the instance since either creation or the last commit operation.
Developers should subscribe to the Ext.data.Store.update event
to have their code notified of commit operations.</description></method><method name="copy" scope="instance"><description>Creates a copy (clone) of this Model instance.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="get" scope="instance"><description>Returns the value of the given field</description></method><method name="getChanges" scope="instance"><description>Gets a hash of only the fields that have been modified since this Model was created or commited.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isModified" scope="instance"><description>Returns true if the passed field name has been modified
since the load or last commit.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="reject" scope="instance"><description>Usually called by the Ext.data.Store to which this model instance has been joined.
Rejects all changes made to the model instance since either creation, or the last commit operation.
Modified fields are reverted to their original values.
Developers should subscribe to the Ext.data.Store.update event
to have their code notified of reject operations.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="set" scope="instance"><description>Sets the given field to the given value, marks the instance as dirty</description></method><method name="setDirty" scope="instance"><description>Marks this Record as dirty.  This method
is used interally when adding phantom records to a
writer enabled store.
Marking a record dirty causes the phantom to
be returned by Ext.data.Store.getModifiedRecords where it will
have a create action composed for it during store save
operations.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.DatePickerField"><description>Specialized field which has a button which when pressed, shows a Ext.DatePicker.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the value of the field, which will be a Date unless the format parameter is true.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.data.AbstractStore" type="Ext.data.Store"><description>The Store class encapsulates a client side cache of Model objects. Stores load
data via a Proxy, and also provide functions for sorting,
filtering and querying the model instances contained within it.
Creating a Store is easy - we just tell it the Model and the Proxy to use to load and save its data:
// Set up a model to use in our Store
Ext.regModel('User', {
    fields: [
        {name: 'firstName', type: 'string'},
        {name: 'lastName',  type: 'string'},
        {name: 'age',       type: 'int'},
        {name: 'eyeColor',  type: 'string'}
    ]
});

var myStore = new Ext.data.Store({
    model: 'User',
    proxy: {
        type: 'ajax',
        url : '/users.json',
        reader: {
            type: 'json',
            root: 'users'
        }
    },
    autoLoad: true
});
In the example above we configured an AJAX proxy to load data from the url '/users.json'. We told our Proxy
to use a JsonReader to parse the response from the server into Model object -
see the docs on JsonReader for details.
Inline data
Stores can also load data inline. Internally, Store converts each of the objects we pass in as data
into Model instances:
new Ext.data.Store({
    model: 'User',
    data : [
        {firstName: 'Ed',    lastName: 'Spencer'},
        {firstName: 'Tommy', lastName: 'Maintz'},
        {firstName: 'Aaron', lastName: 'Conran'},
        {firstName: 'Jamie', lastName: 'Avins'}
    ]
});
Loading inline data using the method above is great if the data is in the correct format already (e.g. it doesn't need 
to be processed by a reader). If your inline data requires processing to decode the data structure,
use a MemoryProxy instead (see the MemoryProxy docs for an example).
Additional data can also be loaded locally using add.
Loading Nested Data
Applications often need to load sets of associated data - for example a CRM system might load a User and her Orders. 
Instead of issuing an AJAX request for the User and a series of additional AJAX requests for each Order, we can load a nested dataset
and allow the Reader to automatically populate the associated models. Below is a brief example, see the Ext.data.Reader intro
docs for a full explanation:
var store = new Ext.data.Store({
    autoLoad: true,
    model: &quot;User&quot;,
    proxy: {
        type: 'ajax',
        url : 'users.json',
        reader: {
            type: 'json',
            root: 'users'
        }
    }
});
Which would consume a response like this:
{
    &quot;users&quot;: [
        {
            &quot;id&quot;: 1,
            &quot;name&quot;: &quot;Ed&quot;,
            &quot;orders&quot;: [
                {
                    &quot;id&quot;: 10,
                    &quot;total&quot;: 10.76,
                    &quot;status&quot;: &quot;invoiced&quot;
                },
                {
                    &quot;id&quot;: 11,
                    &quot;total&quot;: 13.45,
                    &quot;status&quot;: &quot;shipped&quot;
                }
            ]
        }
    ]
}
See the Ext.data.Reader intro docs for a full explanation.
Filtering and Sorting
Stores can be sorted and filtered - in both cases either remotely or locally. The sorters and filters are 
held inside MixedCollection instances to make them easy to manage. Usually it is sufficient to
either just specify sorters and filters in the Store configuration or call sort or filter:
var store = new Ext.data.Store({
    model: 'User',
    sorters: [
        {
            property : 'age',
            direction: 'DESC'
        },
        {
            property : 'firstName',
            direction: 'ASC'
        }
    ],
    
    filters: [
        {
            property: 'firstName',
            value   : /Ed/
        }
    ]
});
The new Store will keep the configured sorters and filters in the MixedCollection instances mentioned above. By default, sorting
and filtering are both performed locally by the Store - see remoteSort and remoteFilter to allow the server to 
perform these operations instead.
Filtering and sorting after the Store has been instantiated is also easy. Calling filter adds another filter to the Store
and automatically filters the dataset (calling filter with no arguments simply re-applies all existing filters). Note that by
default sortOnFilter is set to true, which means that your sorters are automatically reapplied if using local sorting.
store.filter('eyeColor', 'Brown');
Change the sorting at any time by calling sort:
store.sort('height', 'ASC');
Note that all existing sorters will be removed in favor of the new sorter data (if sort is called with no arguments, 
the existing sorters are just reapplied instead of being removed). To keep existing filters and add new ones, just add sorters
to the MixedCollection:
store.sorters.add(new Ext.util.Sorter({
    property : 'shoeSize',
    direction: 'ASC'
}));

store.sort();
Registering with StoreMgr
Any Store that is instantiated with a storeId will automatically be registed with the StoreMgr.
This makes it easy to reuse the same store in multiple views:
//this store can be used several times
new Ext.data.Store({
    model: 'User',
    storeId: 'usersStore'
});

new Ext.List({
    store: 'usersStore',

    //other config goes here
});

new Ext.DataView({
    store: 'usersStore',

    //other config goes here
});
Further Reading
Stores are backed up by an ecosystem of classes that enables their operation. To gain a full understanding of these
pieces and how they fit together, see:

Proxy - overview of what Proxies are and how they are used
Model - the core class in the data package
Reader - used by any subclass of ServerProxy to read a response
</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Model instances to the Store by instantiating them based on a JavaScript object. When adding already-
instantiated Models, use insert instead. The instances will be added at the end of the existing collection.
Sample usage:
myStore.add({some: 'data'}, {some: 'other data'});</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearFilter" scope="instance"><description>Revert to a view of the Record cache with no filtering applied.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="collect" scope="instance"><description>Collects unique values for a particular dataIndex from this store.</description></method><method name="each" scope="instance"><description>Calls the specified function for each of the Records in the cache.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="filter" scope="instance"><description>Filters the loaded set of records by a given set of filters.</description></method><method name="filterBy" scope="instance"><description>Filter by a function. The specified function will be called for each
Record in this Store. If the function returns true the Record is included,
otherwise it is filtered out.</description></method><method name="find" scope="instance"><description>Finds the index of the first matching Record in this store by a specific field value.</description></method><method name="findBy" scope="instance"><description>Find the index of the first matching Record in this Store by a function.
If the function returns true it is considered a match.</description></method><method name="findExact" scope="instance"><description>Finds the index of the first matching Record in this store by a specific field value.</description></method><method name="findRecord" scope="instance"><description>Finds the first matching Record in this store by a specific field value.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="first" scope="instance"><description>Convenience function for getting the first model instance in the store</description></method><method name="getAt" scope="instance"><description>Get the Record at the specified index.</description></method><method name="getById" scope="instance"><description>Get the Record with the specified id.</description></method><method name="getCount" scope="instance"><description>Gets the number of cached records.
If using paging, this may not be the total size of the dataset. If the data object
used by the Reader contains the dataset size, then the getTotalCount function returns
the dataset size.  Note: see the Important note in load.</description></method><method name="getGroupString" scope="instance"><description>Returns the string to group on for a given model instance. The default implementation of this method returns the model's
groupField, but this can be overridden to group by an arbitrary string. For example, to group by the first letter
of a model's 'name' field, use the following code:
new Ext.data.Store({
    groupDir: 'ASC',
    getGroupString: function(instance) {
        return instance.get('name')[0];
    }
});</description></method><method name="getGroups" scope="instance"><description>Returns an object containing the result of applying grouping to the records in this store. See groupField,
groupDir and getGroupString. Example for a store containing records with a color field:
var myStore = new Ext.data.Store({
    groupField: 'color',
    groupDir  : 'DESC'
});

myStore.getGroups(); //returns:
[
    {
        name: 'yellow',
        children: [
            //all records where the color field is 'yellow'
        ]
    },
    {
        name: 'red',
        children: [
            //all records where the color field is 'red'
        ]
    }
]</description></method><method name="getNewRecords" scope="instance"><description>Returns all Model instances that are either currently a phantom (e.g. have no id), or have an ID but have not
yet been saved on this Store (this happens when adding a non-phantom record from another Store into this one)</description></method><method name="getProxy" scope="instance"><description>Returns the proxy currently attached to this proxy instance</description></method><method name="getRange" scope="instance"><description>Returns a range of Records between specified indices.</description></method><method name="getSortState" scope="instance"><description>Returns an object describing the current sort state of this Store.</description></method><method name="getUpdatedRecords" scope="instance"><description>Returns all Model instances that have been updated in the Store but not yet synchronized with the Proxy</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="indexOf" scope="instance"><description>Get the index within the cache of the passed Record.</description></method><method name="indexOfId" scope="instance"><description>Get the index within the cache of the Record with the passed id.</description></method><method name="insert" scope="instance"><description>Inserts Model instances into the Store at the given index and fires the add event.
See also add.</description></method><method name="isFiltered" scope="instance"><description>Returns true if this store is currently filtered</description></method><method name="isLoading" scope="instance"><description>Returns true if the Store is currently performing a load operation</description></method><method name="last" scope="instance"><description>Convenience function for getting the last model instance in the store</description></method><method name="load" scope="instance"><description>Loads data into the Store via the configured proxy. This uses the Proxy to make an
asynchronous call to whatever storage backend the Proxy uses, automatically adding the retrieved
instances into the Store and calling an optional callback if required. Example usage:
store.load({
    scope   : this,
    callback: function(records, operation, success) {
        //the operation object contains all of the details of the load operation
        console.log(records);
    }
});
If the callback scope does not need to be set, a function can simply be passed:
store.load(function(records, operation, success) {
    console.log('loaded records');
});</description></method><method name="loadData" scope="instance"><description>Loads an array of data straight into the Store</description></method><method name="loadPage" scope="instance"><description>Loads a given 'page' of data by setting the start and limit values appropriately. Internally this just causes a normal
load operation, passing in calculated 'start' and 'limit' params</description></method><method name="loadRecords" scope="instance"><description>Loads an array of {@Ext.data.Model model} instances into the store, fires the datachanged event. This should only usually
be called internally when loading from the Proxy, when adding records manually use add instead</description></method><method name="nextPage" scope="instance"><description>Loads the next 'page' in the current data set</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="previousPage" scope="instance"><description>Loads the previous 'page' in the current data set</description></method><method name="queryBy" scope="instance"><description>Query the cached records in this Store using a filtering function. The specified function
will be called with each record in this Store. If the function returns true the record is
included in the results.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes the given record from the Store, firing the 'remove' event for each instance that is removed, plus a single
'datachanged' event after removal.</description></method><method name="removeAt" scope="instance"><description>Removes the model instance at the given index</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setProxy" scope="instance"><description>Sets the Store's Proxy by string, config object or Proxy instance</description></method><method name="sort" scope="instance"><description>Sorts the data in the Store by one or more of its properties. Example usage:
//sort by a single field
myStore.sort('myField', 'DESC');

//sorting by multiple fields
myStore.sort([
    {
        field    : 'age',
        direction: 'ASC'
    },
    {
        field    : 'name',
        direction: 'DESC'
    }
]);
Internally, Store converts the passed arguments into an array of Ext.util.Sorter instances, and delegates the actual
sorting to its internal Ext.util.MixedCollection.
When passing a single string argument to sort, Store maintains a ASC/DESC toggler per field, so this code:
store.sort('myField');
store.sort('myField');
Is equivalent to this code, because Store handles the toggling automatically:
store.sort('myField', 'ASC');
store.sort('myField', 'DESC');</description></method><method name="sum" scope="instance"><description>Sums the value of property for each record between start
and end and returns the result.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="sync" scope="instance"><description>Synchronizes the Store with its Proxy. This asks the Proxy to batch together any new, updated
and deleted records in the store, updating the Store's internal representation of the records
as each operation completes.</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.layout.BoxLayout" type="Ext.layout.VBoxLayout"><description>A layout that arranges items vertically down a Container. This layout optionally divides available vertical
space between child items containing a numeric flex configuration.
This layout may also be used to set the widths of child items by configuring it with the align option.</description><constructors/><properties/><methods><method name="getLayoutItems" scope="instance"><description>Returns an array of child components.</description></method><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method><method name="isHorizontal" scope="instance"><description>Method to determine whether this Sortable is currently sorting.</description></method><method name="isVertical" scope="instance"><description>Method to determine whether this Sortable is currently disabled.</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.util.Droppable"><description/><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="constructor" scope="instance"><description></description></method><method name="disable" scope="instance"><description>Disable the Droppable target.</description></method><method name="enable" scope="instance"><description>Enable the Droppable target.
This is invoked immediately after constructing a Droppable if the
disabled parameter is NOT set to true.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isMonitoring" scope="instance"><description>Method to determine whether this Droppable is currently monitoring drag operations of Draggables.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.layout.ComponentLayout" type="Ext.layout.DockLayout"><description>This ComponentLayout handles docking for Panels. It takes care of panels that are
part of a ContainerLayout that sets this Panel's size and Panels that are part of
an AutoContainerLayout in which this panel get his height based of the CSS or
or its content.</description><constructors/><properties/><methods><method name="adjustAutoBox" scope="instance"><description></description></method><method name="adjustSizedBox" scope="instance"><description></description></method><method name="calculateDockBoxes" scope="instance"><description></description></method><method name="configureItem" scope="instance"><description></description></method><method name="dockItems" scope="instance"><description></description></method><method name="getLayoutItems" scope="instance"><description></description></method><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method><method name="initBox" scope="instance"><description></description></method><method name="needsLayout" scope="instance"><description>Check if the new size is different from the current size and only
trigger a layout if it is necessary.</description></method><method name="onLayout" scope="instance"><description></description></method><method name="setBodyBox" scope="instance"><description></description></method><method name="setElementSize" scope="instance"><description>Set the size of any element supporting undefined, null, and values.</description></method><method name="setTargetSize" scope="instance"><description>Set the size of the target element.</description></method></methods></class><class superclass="Object" type="Ext.fx2.propHandler.defaultHandler"><description/><constructors/><properties/><methods/></class><class superclass="Ext.util.Observable" type="Ext.data.Proxy"><description>Proxies are used by Stores to handle the loading and saving of Model data.
Usually developers will not need to create or interact with proxies directly.
Types of Proxy
There are two main types of Proxy - Client and Server. The Client proxies
save their data locally and include the following subclasses:

LocalStorageProxy - saves its data to localStorage if the browser supports it
SessionStorageProxy - saves its data to sessionStorage if the browsers supports it
MemoryProxy - holds data in memory only, any data is lost when the page is refreshed

The Server proxies save their data by sending requests to some remote server. These proxies include:

AjaxProxy - sends requests to a server on the same domain
ScriptTagProxy - uses JSON-P to send requests to a server on a different domain

Proxies operate on the principle that all operations performed are either Create, Read, Update or Delete. These four operations 
are mapped to the methods create, read, update and destroy respectively. Each Proxy subclass 
implements these functions.
The CRUD methods each expect an operation object as the sole argument. The Operation encapsulates 
information about the action the Store wishes to perform, the model instances that are to be modified, etc.
See the Operation documentation for more details. Each CRUD method also accepts a callback function to be 
called asynchronously on completion.
Proxies also support batching of Operations via a batch object, invoked by the batch method.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.Checkbox"><description>Simple Checkbox class. Can be used as a direct replacement for traditional checkbox fields.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInputValue" scope="instance"><description>Returns the value that will be sent when the form is submitted and this is checked.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the checked state of the checkbox.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setInputValue" scope="instance"><description>Sets the value that will be sent when the form is submitted and this is checked.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets the checked state of the checkbox and fires the 'check' event.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.fx2.target.Component"><description/><constructors/><properties/><methods/></class><class superclass="Ext.data.JsonReader" type="Ext.data.ArrayReader"><description>Data reader class to create an Array of Ext.data.Record objects from an Array.
Each element of that Array represents a row of data fields. The
fields are pulled into a Record object using as a subscript, the mapping property
of the field definition if it exists, or the field's ordinal position in the definition.
Example code:
var Employee = Ext.data.Record.create([
    {name: 'name', mapping: 1},         // &quot;mapping&quot; only needed if an &quot;id&quot; field is present which
    {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
]);
var myReader = new Ext.data.ArrayReader({
    idIndex: 0
}, Employee);
This would consume an Array like this:
[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]</description><constructors/><properties/><methods><method name="getResponseData" scope="instance"><description>Takes a raw response object (as passed to this.read) and returns the useful data segment of it. This must be implemented by each subclass</description></method><method name="read" scope="instance"><description>Reads the given response object. This method normalizes the different types of response object that may be passed
to it, before handing off the reading of records to the readRecords function.</description></method><method name="readRecords" scope="instance"><description>Reads a JSON object and returns a ResultSet. Uses the internal getTotal and getSuccess extractors to
retrieve meta data from the response, and extractData to turn the JSON data into model instances.</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.lib.Component"><description>Shared Component class</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.data.Connection"><description>The class encapsulates a connection to the page's originating domain, allowing requests to be made
either to a configured URL, or to a URL specified at request time.
Requests made by this class are asynchronous, and will return immediately. No data from
the server will be available to the statement immediately following the request call.
To process returned data, use a
success callback
in the request options object,
or an event listener.
File UploadsFile uploads are not performed using normal &quot;Ajax&quot; techniques, that
is they are not performed using XMLHttpRequests. Instead the form is submitted in the standard
manner with the DOM &lt;form&gt; element temporarily modified to have its
target set to refer
to a dynamically generated, hidden &lt;iframe&gt; which is inserted into the document
but removed after the return data has been gathered.
The server response is parsed by the browser to create the document for the IFRAME. If the
server is using JSON to send the return object, then the
Content-Type header
must be set to &quot;text/html&quot; in order to tell the browser to insert the text unchanged into the document body.
Characters which are significant to an HTML parser must be sent as HTML entities, so encode
&quot;&lt;&quot; as &quot;&amp;lt;&quot;, &quot;&amp;&quot; as &quot;&amp;amp;&quot; etc.
The response text is retrieved from the document, and a fake XMLHttpRequest object
is created containing a responseText property in order to conform to the
requirements of event handlers and callbacks.
Be aware that file upload packets are sent with the content type multipart/form
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.
Also note that it's not possible to check the response code of the hidden iframe, so the success handler will ALWAYS fire.</description><constructors/><properties/><methods><method name="abort" scope="instance"><description>Aborts any outstanding request.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isLoading" scope="instance"><description>Determine whether this object has a request outstanding.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="request" scope="instance"><description>Sends an HTTP request to a remote server.
Important: Ajax server requests are asynchronous, and this call will
return before the response has been received. Process any returned data
in a callback function.
Ext.Ajax.request({
   url: 'ajax_demo/sample.json',
   success: function(response, opts) {
      var obj = Ext.decode(response.responseText);
      console.dir(obj);
   },
   failure: function(response, opts) {
      console.log('server-side failure with status code ' + response.status);
   }
});
To execute a callback function in the correct scope, use the scope option.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Object" type="Ext.util.Date"><description/><constructors/><properties/><methods><method name="getElapsed" scope="instance"><description>Returns the number of milliseconds between two dates</description></method></methods></class><class superclass="Object" type="Ext.util.Functions"><description/><constructors/><properties/><methods><method name="createDelegate" scope="instance"><description>Creates a delegate (callback) that sets the scope to obj.
Call directly on any function. Example: Ext.createDelegate(this.myFunction, this, [arg1, arg2])
Will create a function that is automatically scoped to obj so that the this variable inside the
callback points to obj. Example usage:
var sayHi = function(name){
    // Note this use of &quot;this.text&quot; here.  This function expects to
    // execute within a scope that contains a text property.  In this
    // example, the &quot;this&quot; variable is pointing to the btn object that
    // was passed in createDelegate below.
    alert('Hi, ' + name + '. You clicked the &quot;' + this.text + '&quot; button.');
}

var btn = new Ext.Button({
    text: 'Say Hi',
    renderTo: Ext.getBody()
});

// This callback will execute in the scope of the
// button instance. Clicking the button alerts
// &quot;Hi, Fred. You clicked the &quot;Say Hi&quot; button.&quot;
btn.on('click', Ext.createDelegate(sayHi, btn, ['Fred']));</description></method><method name="createInterceptor" scope="instance"><description>Creates an interceptor function. The passed function is called before the original one. If it returns false,
the original one is not called. The resulting function returns the results of the original function.
The passed function is called with the parameters of the original function. Example usage:
var sayHi = function(name){
    alert('Hi, ' + name);
}

sayHi('Fred'); // alerts &quot;Hi, Fred&quot;

// create a new function that validates input without
// directly modifying the original function:
var sayHiToFriend = Ext.createInterceptor(sayHi, function(name){
    return name == 'Brian';
});

sayHiToFriend('Fred');  // no alert
sayHiToFriend('Brian'); // alerts &quot;Hi, Brian&quot;</description></method><method name="createSequence" scope="instance"><description>Create a combined function call sequence of the original function + the passed function.
The resulting function returns the results of the original function.
The passed fcn is called with the parameters of the original function. Example usage:
var sayHi = function(name){
    alert('Hi, ' + name);
}

sayHi('Fred'); // alerts &quot;Hi, Fred&quot;

var sayGoodbye = Ext.createSequence(sayHi, function(name){
    alert('Bye, ' + name);
});

sayGoodbye('Fred'); // both alerts show</description></method><method name="defer" scope="instance"><description>Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
var sayHi = function(name){
    alert('Hi, ' + name);
}

// executes immediately:
sayHi('Fred');

// executes after 2 seconds:
Ext.defer(sayHi, 2000, this, ['Fred']);

// this syntax is sometimes useful for deferring
// execution of an anonymous function:
Ext.defer(function(){
    alert('Anonymous');
}, 100);</description></method></methods></class><class superclass="Ext.Sheet" type="Ext.Picker"><description>A general picker class.  Slots are used to organize multiple scrollable slots into a single picker. slots is 
the only necessary property
Example usage:
var picker = new Ext.Picker({
    slots: [
        {
            name : 'limit_speed',
            title: 'Speed',
            data : [
                {text: '50 KB/s', value: 50},
                {text: '100 KB/s', value: 100},
                {text: '200 KB/s', value: 200},
                {text: '300 KB/s', value: 300}
            ]
        }
    ]
});
picker.show();
See also: Ext.DatePicker</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the values of each of the pickers slots</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Sets the values of the pickers slots</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Ext.chart.Axis" type="Ext.chart.NumericAxis"><description>A type of axis whose units are measured in numeric values.</description><constructors/><properties/><methods/></class><class superclass="Ext.chart.Axis" type="Ext.chart.TimeAxis"><description>A type of axis whose units are measured in time-based values.</description><constructors/><properties/><methods/></class><class superclass="Ext.util.Observable" type="Ext.util.TapRepeater"><description>A wrapper class which can be applied to any element. Fires a &quot;tap&quot; event while
touching the device. The interval between firings may be specified in the config but
defaults to 20 milliseconds.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.data.Writer" type="Ext.data.XmlWriter"><description>Writer that outputs model data in XML format</description><constructors/><properties/><methods><method name="getRecordData" scope="instance"><description>Formats the data for each record before sending it to the server. This
method should be overridden to format the data in a way that differs from the default.</description></method><method name="write" scope="instance"><description>Prepares a Proxy's Ext.data.Request object</description></method></methods></class><class superclass="Object" type="Ext.layout.Layout"><description>Base Layout class - extended by ComponentLayout and ContainerLayout</description><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.fx2.PseudoEasing"><description>PseudoEasing combines multiple cubic-bezier curves and creates an Ext.fx.Animation to achieve more complex effects.
Extended Pseudo Easing Values:

back-in
back-out
bounce-in
bounce-out
elastic-in
elastic-out
</description><constructors/><properties/><methods/></class><class superclass="Object" type="Array"><description/><constructors/><properties/><methods><method name="indexOf" scope="instance"><description>Checks whether or not the specified object exists in the array.</description></method><method name="remove" scope="instance"><description>Removes the specified object from the array.  If the object is not found nothing happens.</description></method></methods></class><class superclass="Ext.form.TextField" type="Ext.form.UrlField"><description>Wraps an HTML5 url field. See FormPanel for example usage.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.lib.Component" type="Ext.Component"><description>Base class for all Ext components.  All subclasses of Component may participate in the automated
Ext component lifecycle of creation, rendering and destruction which is provided by the Container class.
Components may be added to a Container through the items config option at the time the Container is created,
or they may be added dynamically via the add method.
The Component base class has built-in support for basic hide/show and enable/disable behavior.
All Components are registered with the Ext.ComponentMgr on construction so that they can be referenced at any time via
Ext.getCmp, passing the id.
All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or
Ext.BoxComponent if managed box model handling is required, ie height and width management).
See the Creating new UI controls tutorial for details on how
and to either extend or augment ExtJs base classes to create custom Components.
Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
xtype like getXType and isXType. This is the list of all valid xtypes:

xtype            Class
-------------    ------------------
button           Ext.Button
component        Ext.Component
container        Ext.Container
dataview         Ext.DataView
panel            Ext.Panel
slider           Ext.form.Slider
toolbar          Ext.Toolbar
spacer           Ext.Spacer
tabpanel         Ext.TabPanel

Form components
---------------------------------------
form             Ext.form.FormPanel
checkbox         Ext.form.Checkbox
select           Ext.form.Select
field            Ext.form.Field
fieldset         Ext.form.FieldSet
hidden           Ext.form.Hidden
numberfield      Ext.form.NumberField
radio            Ext.form.Radio
textarea         Ext.form.TextArea
textfield        Ext.form.TextField

Store xtypes
---------------------------------------
store            Ext.data.Store
arraystore       Ext.data.ArrayStore
jsonstore        Ext.data.JsonStore
xmlstore         Ext.data.XmlStore
</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.is"><description/><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.util.Indicator"><description>Scroll indicator for the ScrollView</description><constructors/><properties/><methods/></class><class superclass="Ext.layout.ComponentLayout" type="Ext.layout.AutoComponentLayout"><description>The AutoLayout is the default layout manager delegated by Ext.Component to
render any child Elements when no layout is configured.</description><constructors/><properties/><methods><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method><method name="needsLayout" scope="instance"><description>Check if the new size is different from the current size and only
trigger a layout if it is necessary.</description></method><method name="setElementSize" scope="instance"><description>Set the size of any element supporting undefined, null, and values.</description></method><method name="setTargetSize" scope="instance"><description>Set the size of the target element.</description></method></methods></class><class superclass="Ext.Container" type="Ext.Toolbar"><description>Toolbars are most commonly used as dockedItems within an Ext.Panel. They can
be docked at the 'top' or 'bottom' of a Panel by specifying the dock config.
The defaultType of Toolbar's is 'button'.
var myToolbar = new Ext.Toolbar({
    dock: 'top',
    title: 'My Toolbar',
    items: [{
        text: 'My Button'
    }]
});

var myPanel = new Ext.Panel({
    dockedItems: [myToolbar],
    fullscreen: true,
    html: 'Test Panel'
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="hideTitle" scope="instance"><description>Hide the title if it exists.</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setTitle" scope="instance"><description>Set the title of the Toolbar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="showTitle" scope="instance"><description>Show the title if it exists.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.Fx"><description>A class to provide basic animation and visual effects support.  Note: This class is automatically applied
to the Ext.Element interface when included, so all effects calls should be performed via Ext.Element.
Conversely, since the effects are not actually defined in Ext.Element, Ext.Fx must be
included in order for the Element effects to work.
Method Chaining
It is important to note that although the Fx methods and many non-Fx Element methods support &quot;method chaining&quot; in that
they return the Element object itself as the method return value, it is not always possible to mix the two in a single
method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.
Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,
while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the
expected results and should be done with care.  Also see callback.
Anchor Options for Motion Effects
Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element
that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:

Value  Description
-----  -----------------------------
tl     The top left corner
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner

Note: some Fx methods accept specific custom config parameters.  The options shown in the Config Options
section below are common options that can be passed to any Fx method unless otherwise noted.</description><constructors/><properties/><methods><method name="fadeIn" scope="instance"><description>Fade an element in (from transparent to opaque).  The ending opacity can be specified
using the endOpacity config option.
Usage:
// default: fade in from opacity 0 to 100%
el.fadeIn();

// custom: fade in from opacity 0 to 75% over 2 seconds
el.fadeIn({ endOpacity: .75, duration: 2});

// common config options shown with default values
el.fadeIn({
    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5
});</description></method><method name="fadeOut" scope="instance"><description>Fade an element out (from opaque to transparent).  The ending opacity can be specified
using the endOpacity config option.  Note that IE may require
useDisplay:true in order to redisplay correctly.
Usage:
// default: fade out from the element's current opacity to 0
el.fadeOut();

// custom: fade out from the element's current opacity to 25% over 2 seconds
el.fadeOut({ endOpacity: .25, duration: 2});

// common config options shown with default values
el.fadeOut({
    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});</description></method><method name="frame" scope="instance"><description>Shows a ripple of exploding, attenuating borders to draw attention to an Element.
Usage:
// default: a single light blue ripple
el.frame();

// custom: 3 red ripples lasting 3 seconds total
el.frame(&quot;ff0000&quot;, 3, { duration: 3 });

// common config options shown with default values
el.frame(&quot;C3DAF9&quot;, 1, {
    duration: 1 //duration of each individual ripple.
    // Note: Easing is not configurable and will be ignored if included
});</description></method><method name="ghost" scope="instance"><description>Slides the element while fading it out of view.  An anchor point can be optionally passed to set the 
ending point of the effect.
Usage:
// default: slide the element downward while fading out
el.ghost();

// custom: slide the element out to the right with a 2-second duration
el.ghost('r', { duration: 2 });

// common config options shown with default values
el.ghost('b', {
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});</description></method><method name="hasActiveFx" scope="instance"><description>Returns true if the element has any effects actively running or queued, else returns false.</description></method><method name="hasFxBlock" scope="instance"><description>Returns true if the element is currently blocking so that no other effect can be queued
until this effect is finished, else returns false if blocking is not set.  This is commonly
used to ensure that an effect initiated by a user action runs to completion prior to the
same effect being restarted (e.g., firing only one effect even if the user clicks several times).</description></method><method name="highlight" scope="instance"><description>Highlights the Element by setting a color (applies to the background-color by default, but can be
changed using the &quot;attr&quot; config option) and then fading back to the original color. If no original
color is available, you should provide the &quot;endColor&quot; config option which will be cleared after the animation.
Usage:
// default: highlight background to yellow
el.highlight();

// custom: highlight foreground text to blue for 2 seconds
el.highlight(&quot;0000ff&quot;, { attr: 'color', duration: 2 });

// common config options shown with default values
el.highlight(&quot;ffff9c&quot;, {
    attr: &quot;background-color&quot;, //can be any valid CSS property (attribute) that supports a color value
    endColor: (current color) or &quot;ffffff&quot;,
    easing: 'easeIn',
    duration: 1
});</description></method><method name="pause" scope="instance"><description>Creates a pause before any subsequent queued effects begin.  If there are
no effects queued after the pause it will have no effect.
Usage:
el.pause(1);</description></method><method name="puff" scope="instance"><description>Fades the element out while slowly expanding it in all directions.  When the effect is completed, the 
element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. 
The element must be removed from the DOM using the 'remove' config option if desired.
Usage:
// default
el.puff();

// common config options shown with default values
el.puff({
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});</description></method><method name="scale" scope="instance"><description>Animates the transition of an element's dimensions from a starting height/width
to an ending height/width.  This method is a convenience implementation of shift.
Usage:
// change height and width to 100x100 pixels
el.scale(100, 100);

// common config options shown with default values.  The height and width will default to
// the element&#39;s existing values if passed as null.
el.scale(
    [element&#39;s width],
    [element&#39;s height], {
        easing: 'easeOut',
        duration: .35
    }
);</description></method><method name="sequenceFx" scope="instance"><description>Ensures that all effects queued after sequenceFx is called on the element are
run in sequence.  This is the opposite of syncFx.</description></method><method name="shift" scope="instance"><description>Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
Any of these properties not specified in the config object will not be changed.  This effect 
requires that at least one new dimension, position or opacity setting must be passed in on
the config object in order for the function to have any effect.
Usage:
// slide the element horizontally to x position 200 while changing the height and opacity
el.shift({ x: 200, height: 50, opacity: .8 });

// common config options shown with default values.
el.shift({
    width: [element&#39;s width],
    height: [element&#39;s height],
    x: [element&#39;s x position],
    y: [element&#39;s y position],
    opacity: [element&#39;s opacity],
    easing: 'easeOut',
    duration: .35
});</description></method><method name="slideIn" scope="instance"><description>Slides the element into view.  An anchor point can be optionally passed to set the point of
origin for the slide effect.  This function automatically handles wrapping the element with
a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
Usage:
// default: slide the element in from the top
el.slideIn();

// custom: slide the element in from the right with a 2-second duration
el.slideIn('r', { duration: 2 });

// common config options shown with default values
el.slideIn('t', {
    easing: 'easeOut',
    duration: .5
});</description></method><method name="slideOut" scope="instance"><description>Slides the element out of view.  An anchor point can be optionally passed to set the end point
for the slide effect.  When the effect is completed, the element will be hidden (visibility = 
'hidden') but block elements will still take up space in the document.  The element must be removed
from the DOM using the 'remove' config option if desired.  This function automatically handles 
wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
Usage:
// default: slide the element out to the top
el.slideOut();

// custom: slide the element out to the right with a 2-second duration
el.slideOut('r', { duration: 2 });

// common config options shown with default values
el.slideOut('t', {
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});</description></method><method name="stopFx" scope="instance"><description>Stops any running effects and clears the element's internal effects queue if it contains
any additional effects that haven't started yet.</description></method><method name="switchOff" scope="instance"><description>Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still 
take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
Usage:
// default
el.switchOff();

// all config options shown with default values
el.switchOff({
    easing: 'easeIn',
    duration: .3,
    remove: false,
    useDisplay: false
});</description></method><method name="syncFx" scope="instance"><description>Ensures that all effects queued after syncFx is called on the element are
run concurrently.  This is the opposite of sequenceFx.</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.SpinnerField"><description>Wraps an HTML5 number field. Example usage:
new Ext.form.SpinnerField({
    minValue: 0,
    maxValue: 100,
    incrementValue: 2,
    cycle: true
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.chart.Series" type="Ext.chart.PieSeries"><description>PieSeries class for the charts widget.</description><constructors/><properties/><methods><method name="getItemForPoint" scope="instance"><description>For a given x/y point relative to the Surface, find a corresponding item from this
series, if any.
For Pie series, this is the pie slice directly under the point.</description></method><method name="highlightItem" scope="instance"><description>Highlight the given series item.</description></method><method name="unHighlight" scope="instance"><description>Un-highlight any existing highlights</description></method></methods></class><class superclass="Ext.data.WebStorageProxy" type="Ext.data.LocalStorageProxy"><description>Proxy which uses HTML5 local storage as its data storage/retrieval mechanism.
If this proxy is used in a browser where local storage is not supported, the constructor will throw an error.
A local storage proxy requires a unique ID which is used as a key in which all record data are stored in the
local storage object.
It's important to supply this unique ID as it cannot be reliably determined otherwise. If no id is provided
but the attached store has a storeId, the storeId will be used. If neither option is presented the proxy will
throw an error.
Proxies are almost always used with a store:
new Ext.data.Store({
    proxy: {
        type: 'localstorage',
        id  : 'myProxyKey'
    }
});
Alternatively you can instantiate the Proxy directly:
new Ext.data.LocalStorageProxy({
    id  : 'myOtherProxyKey'
});</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="clear" scope="instance"><description>Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage object</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setRecord" scope="instance"><description>Saves the given record in the Proxy. Runs each field's encode function (if present) to encode the data</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.Panel" type="Ext.TabBar"><description>Used in the Ext.TabPanel component to display Ext.Tab components.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext.EventManager"><description>Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
several useful events directly.
See Ext.EventObject for more details on normalized event objects.</description><constructors/><properties/><methods><method name="addListener" scope="instance"><description>Appends an event handler to an element.  The shorthand version on is equivalent.  Typically you will
use Ext.Element.addListener directly on an Element in favor of calling this version.</description></method><method name="getPageX" scope="instance"><description>Gets the x coordinate of the event.</description></method><method name="getPageY" scope="instance"><description>Gets the y coordinate of the event.</description></method><method name="getTarget" scope="instance"><description>Gets the target for the event.</description></method><method name="getXY" scope="instance"><description>Gets the page coordinates of the event.</description></method><method name="on" scope="instance"><description>Appends an event handler to an element.  Shorthand for addListener.</description></method><method name="onDocumentReady" scope="instance"><description>Adds a listener to be notified when the document is ready (before onload and before images are loaded). Can be
accessed shorthanded as Ext.onReady().</description></method><method name="onWindowResize" scope="instance"><description>Adds a listener to be notified when the browser window is resized and provides resize event buffering (50 milliseconds),
passes new viewport width and height to handlers.</description></method><method name="preventDefault" scope="instance"><description>Prevents the browsers default handling of the event.</description></method><method name="removeAll" scope="instance"><description>Removes all event handers from an element.  Typically you will use Ext.Element.removeAllListeners
directly on an Element in favor of calling this version.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler from an element.  The shorthand version un is equivalent.  Typically
you will use Ext.Element.removeListener directly on an Element in favor of calling this version.</description></method><method name="stopEvent" scope="instance"><description>Stop the event (preventDefault and stopPropagation)</description></method><method name="stopPropagation" scope="instance"><description>Cancels bubbling of the event.</description></method><method name="un" scope="instance"><description>Removes an event handler from an element.  Shorthand for removeListener.</description></method></methods></class><class superclass="Object" type="Ext.data.ResultSet"><description>Simple wrapper class that represents a set of records returned by a Proxy.</description><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.LayoutManager"><description>Provides a registry of all Layouts (instances of Ext.layout.Layout or any subclass
thereof) on a page.</description><constructors/><properties/><methods><method name="create" scope="instance"><description>Creates a new Component from the specified config object using the
config object's xtype to determine the class to instantiate.</description></method></methods></class><class superclass="Object" type="Ext.CompositeElement"><description>This class encapsulates a collection of DOM elements, providing methods to filter
members, or to perform collective actions upon the whole set.
Example:var els = Ext.select(&quot;#some-el div.some-class&quot;);
// or select directly from an existing element
var el = Ext.get('some-el');
el.select('div.some-class');

els.setWidth(100); // all elements become 100 width
els.hide(true); // all elements fade out and hide
// or
els.setWidth(100).hide(true);
</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds elements to this Composite object.</description></method><method name="clear" scope="instance"><description>Removes all elements.</description></method><method name="contains" scope="instance"><description>Returns true if this composite contains the passed element</description></method><method name="each" scope="instance"><description>Calls the passed function for each element in this composite.</description></method><method name="fill" scope="instance"><description>Clears this Composite and adds the elements passed.</description></method><method name="filter" scope="instance"><description>Filters this composite to only elements that match the passed selector.</description></method><method name="first" scope="instance"><description>Returns the first Element</description></method><method name="getCount" scope="instance"><description>Returns the number of elements in this Composite.</description></method><method name="indexOf" scope="instance"><description>Find the index of the passed element within the composite collection.</description></method><method name="item" scope="instance"><description>Returns a flyweight Element of the dom element object at the specified index</description></method><method name="last" scope="instance"><description>Returns the last Element</description></method></methods></class><class superclass="Ext.layout.ComponentLayout" type="Ext.layout.FieldLayout"><description>The FieldLayout is the default layout manager delegated by Ext.Field to
render field Elements.</description><constructors/><properties/><methods><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method><method name="needsLayout" scope="instance"><description>Check if the new size is different from the current size and only
trigger a layout if it is necessary.</description></method><method name="setElementSize" scope="instance"><description>Set the size of any element supporting undefined, null, and values.</description></method><method name="setTargetSize" scope="instance"><description>Set the size of the target element.</description></method></methods></class><class superclass="Object" type="Ext.util.Numbers"><description/><constructors/><properties/><methods><method name="constrain" scope="instance"><description>Checks whether or not the current number is within a desired range.  If the number is already within the
range it is returned, otherwise the min or max value is returned depending on which side of the range is
exceeded.  Note that this method returns the constrained value but does not change the current number.</description></method><method name="toFixed" scope="instance"><description>Formats a number using fixed-point notation</description></method></methods></class><class superclass="Ext.data.Proxy" type="Ext.data.ClientProxy"><description>Base class for any client-side storage. Used as a superclass for Memory and 
Web Storage proxies. Do not use directly, use one of the subclasses instead.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="clear" scope="instance"><description>Abstract function that must be implemented by each ClientProxy subclass. This should purge all record data
from the client side storage, as well as removing any supporting data (such as lists of record IDs)</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.Container" type="Ext.form.FieldSet"><description>Simple FieldSet, can contain fields as items. FieldSets do not add any behavior, other than an optional title, and
are just used to group similar fields together. Example usage (within a form):
new Ext.form.FormPanel({
    items: [
        {
            xtype: 'fieldset',
            title: 'About Me',
            items: [
                {
                    xtype: 'textfield',
                    name : 'firstName',
                    label: 'First Name'
                },
                {
                    xtype: 'textfield',
                    name : 'lastName',
                    label: 'Last Name'
                }
            ]
        }
    ]
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setInstructions" scope="instance"><description>Sets the instructions of the current fieldset.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setTitle" scope="instance"><description>Sets the title of the current fieldset.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.AbstractManager" type="Ext.ControllerManager"><description/><constructors/><properties/><methods><method name="create" scope="instance"><description>Creates and returns an instance of whatever this manager manages, based on the supplied type and config object</description></method><method name="get" scope="instance"><description>Returns a component by id.
For additional details see Ext.util.MixedCollection.get.</description></method><method name="isRegistered" scope="instance"><description>Checks if a Component type is registered.</description></method><method name="onAvailable" scope="instance"><description>Registers a function that will be called when a Component with the specified id is added to the manager. This will happen on instantiation.</description></method><method name="register" scope="instance"><description>Registers an item to be managed</description></method><method name="registerType" scope="instance"><description>Registers a new Component constructor, keyed by a new
Ext.Component.xtype.
Use this method (or its alias Ext.reg) to register new
subclasses of Ext.Component so that lazy instantiation may be used when specifying
child Components.
see Ext.Container.items</description></method><method name="unregister" scope="instance"><description>Unregisters a component by removing it from this manager</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.fx2.Animator"><description>Animation instance</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="applyAnimator" scope="instance"><description>Applies animation to the Ext.fx2.target</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.Panel" type="Ext.DataPanel"><description>Base class for all data-bound panels. This shouldn't be used directly, instead use a subclass like Ext.DataView or Ext.List.
This class has been deprecated. Please don't use this directly as it will be removed in the RC1.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="collectData" scope="instance"><description>Function which can be overridden which returns the data object passed to this
DataPanel's template to render the whole DataPanel.
This is usually an Array of data objects, each element of which is processed by an
XTemplate which uses '&lt;tpl for=&quot;.&quot;&gt;' to iterate over its supplied
data object as an Array. However, named properties may be placed into the data object to
provide non-repeating data such as headings, totals etc.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="findItemFromChild" scope="instance"><description>Returns the template node the passed child belongs to, or null if it doesn't belong to one.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getNode" scope="instance"><description>Gets a template node.</description></method><method name="getNodes" scope="instance"><description>Gets a range nodes.</description></method><method name="getRecord" scope="instance"><description>Gets a record from a node</description></method><method name="getRecords" scope="instance"><description>Gets an array of the records from an array of nodes</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getStore" scope="instance"><description>Returns the store associated with this DataPanel.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="indexOf" scope="instance"><description>Finds the index of the passed node.</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="onRemoveItem" scope="instance"><description>Callback when the item is removed</description></method><method name="onUpdateItem" scope="instance"><description>Callback when the item is updated</description></method><method name="prepareData" scope="instance"><description>Function which can be overridden to provide custom formatting for each Record that is used by this
DataPanel's template to render each node.</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="refresh" scope="instance"><description></description></method><method name="refreshNode" scope="instance"><description>Refreshes an individual node's data from the store.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext.fx2.target.Element"><description/><constructors/><properties/><methods/></class><class superclass="Object" type="Ext.fx2.Manager"><description>Animation Manager which keeps track of all current animations and manages them on a frame by frame basis.</description><constructors/><properties/><methods><method name="addAnim" scope="instance"><description>Add an Anim to the manager. This is done automatically when an Anim instance is created.</description></method><method name="collectTargetData" scope="instance"><description>Collect target attributes for the given Anim object at the given timestamp</description></method><method name="removeAnim" scope="instance"><description>Remove an Anim from the manager. This is done automatically when an Anim ends.</description></method></methods></class><class superclass="Ext.chart.Series" type="Ext.chart.CartesianSeries"><description>Common base class for series implementations which plot values using x/y coordinates.</description><constructors/><properties/><methods><method name="getItemForPoint" scope="instance"><description>For a given x/y point relative to the Surface, find a corresponding item from this
series, if any.</description></method><method name="highlightItem" scope="instance"><description>Highlight the given series item.</description></method><method name="unHighlight" scope="instance"><description>Un-highlight any existing highlights</description></method></methods></class><class superclass="Ext.layout.Layout" type="Ext.layout.ContainerLayout"><description>This class is intended to be extended or created via the layout
configuration property.  See Ext.Container.layout for additional details.</description><constructors/><properties/><methods><method name="getLayoutItems" scope="instance"><description>Returns an array of child components.</description></method><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method></methods></class><class superclass="Object" type="Ext.Template"><description>Represents an HTML fragment template. Templates may be precompiled
for greater performance.
For example usage see the constructor.</description><constructors/><properties/><methods><method name="Template.from" scope="instance"><description>Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML.</description></method><method name="append" scope="instance"><description>Applies the supplied values to the template and appends
the new node(s) to the specified el.
For example usage see the constructor.</description></method><method name="apply" scope="instance"><description>Alias for applyTemplate
Returns an HTML fragment of this template with the specified values applied.</description></method><method name="insertAfter" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) after el.</description></method><method name="insertBefore" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) before el.</description></method><method name="insertFirst" scope="instance"><description>Applies the supplied values to the template and inserts the new node(s) as the first child of el.</description></method><method name="overwrite" scope="instance"><description>Applies the supplied values to the template and overwrites the content of el with the new node(s).</description></method><method name="set" scope="instance"><description>Sets the HTML used as the template and optionally compiles it.</description></method></methods></class><class superclass="Object" type="Ext.util.Region"><description>Represents a rectangular region and provides a number of utility methods
to compare regions.</description><constructors/><properties/><methods><method name="Region.getRegion" scope="instance"><description></description></method><method name="adjust" scope="instance"><description>Modifies the current region to be adjusted by offsets.</description></method><method name="constrainTo" scope="instance"><description>Modifies the current region to be constrained to the targetRegion.</description></method><method name="constructor" scope="instance"><description></description></method><method name="contains" scope="instance"><description>Checks if this region completely contains the region that is passed in.</description></method><method name="copy" scope="instance"><description>Copy a new instance</description></method><method name="getOutOfBoundOffset" scope="instance"><description>Get the offset amount of a point outside the region</description></method><method name="intersect" scope="instance"><description>Checks if this region intersects the region passed in.</description></method><method name="toString" scope="instance"><description>Dump this to an eye-friendly string, great for debugging</description></method><method name="union" scope="instance"><description>Returns the smallest region that contains the current AND targetRegion.</description></method></methods></class><class superclass="Ext.Media" type="Ext.Video"><description>Provides a simple Container for HTML5 Video.
var pnl = new Ext.Panel({
    fullscreen: true,
    items: [{
        floating: true,
        x: 600,
        y: 300,
        width: 175,
        height: 98,
        xtype: 'video',
        url: &quot;porsche911.mov&quot;,
        posterUrl: 'porsche.png'
    }]
});</description><constructors/><properties/><methods><method name="" scope="instance"><description></description></method><method name="" scope="instance"><description></description></method><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="pause" scope="instance"><description>Pauses media playback</description></method><method name="play" scope="instance"><description>Starts or resumes media playback</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="toggle" scope="instance"><description>Toggles the media playback state</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.fx2.propHandler.transform"><description/><constructors/><properties/><methods/></class><class superclass="Ext.scaffold.Form" type="Ext.scaffold.Build"><description>Scaffold component allowing the easy creation of a new model instance</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="buildFormItems" scope="instance"><description>Returns an array of form items to create for the scaffold. The configured model's fields are reflected upon
and automatically turned into the appropriate form item types</description></method><method name="buildToolbar" scope="instance"><description>Creates and returns a toolbar containing (by default) save and cancel buttons</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getFieldType" scope="instance"><description>Returns the xtype string for the best form field to create for a given field from a Model definition</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getRecord" scope="instance"><description>Returns the Model instance currently loaded into this form (if any)</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValues" scope="instance"><description>Returns an object containing the value of each field in the form, keyed to the field's name</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="hideMask" scope="instance"><description>Hides a previously shown wait mask (See showMask)</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="load" scope="instance"><description>(Shortcut to loadRecord method) Loads matching fields from a model instance into this form</description></method><method name="loadRecord" scope="instance"><description>Loads matching fields from a model instance into this form</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="onCancelButtonClick" scope="instance"><description>Handler tied to the cancel button. By default this just fires the 'cancel' event</description></method><method name="onSaveButtonClick" scope="instance"><description>Handler tied to the save button. By default this just fires the 'save' event</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets all fields in the form back to their original values</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setModel" scope="instance"><description>Sets the model used by this scaffold. Can pass in the model string name or the model constructor</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setValues" scope="instance"><description>Sets the values of form fields in bulk. Example usage:
myForm.setValues({
    name: 'Ed',
    crazy: true,
    username: 'edspencer'
});</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="showMask" scope="instance"><description>Shows a generic/custom mask over a designated Element.</description></method><method name="submit" scope="instance"><description>Performs a Ajax-based submission of form values (if standardSubmit is false) or otherwise 
executes a standard HTML Form submit action.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="updateRecord" scope="instance"><description>Updates a model instance with the current values of this form</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext.CompositeElementLite"><description>This class encapsulates a collection of DOM elements, providing methods to filter
members, or to perform collective actions upon the whole set.
Although they are not listed, this class supports all of the methods of Ext.Element and
Ext.Fx. The methods from these classes will be performed on all the elements in this collection.
Example:var els = Ext.select(&quot;#some-el div.some-class&quot;);
// or select directly from an existing element
var el = Ext.get('some-el');
el.select('div.some-class');

els.setWidth(100); // all elements become 100 width
els.hide(true); // all elements fade out and hide
// or
els.setWidth(100).hide(true);
</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds elements to this Composite object.</description></method><method name="clear" scope="instance"><description>Removes all elements.</description></method><method name="each" scope="instance"><description>Calls the passed function for each element in this composite.</description></method><method name="fill" scope="instance"><description>Clears this Composite and adds the elements passed.</description></method><method name="filter" scope="instance"><description>Filters this composite to only elements that match the passed selector.</description></method><method name="getCount" scope="instance"><description>Returns the number of elements in this Composite.</description></method><method name="indexOf" scope="instance"><description>Find the index of the passed element within the composite collection.</description></method><method name="item" scope="instance"><description>Returns a flyweight Element of the dom element object at the specified index</description></method><method name="removeElement" scope="instance"><description>Removes the specified element(s).</description></method><method name="replaceElement" scope="instance"><description>Replaces the specified element with the passed element.</description></method></methods></class><class superclass="Ext.scaffold.Form" type="Ext.scaffold.Edit"><description/><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="buildFormItems" scope="instance"><description>Returns an array of form items to create for the scaffold. The configured model's fields are reflected upon
and automatically turned into the appropriate form item types</description></method><method name="buildToolbar" scope="instance"><description>Creates and returns a toolbar containing (by default) save and cancel buttons</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getFieldType" scope="instance"><description>Returns the xtype string for the best form field to create for a given field from a Model definition</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getRecord" scope="instance"><description>Returns the Model instance currently loaded into this form (if any)</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValues" scope="instance"><description>Returns an object containing the value of each field in the form, keyed to the field's name</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="hideMask" scope="instance"><description>Hides a previously shown wait mask (See showMask)</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="load" scope="instance"><description>(Shortcut to loadRecord method) Loads matching fields from a model instance into this form</description></method><method name="loadRecord" scope="instance"><description>Loads matching fields from a model instance into this form</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="onCancelButtonClick" scope="instance"><description>Handler tied to the cancel button. By default this just fires the 'cancel' event</description></method><method name="onSaveButtonClick" scope="instance"><description>Handler tied to the save button. By default this just fires the 'save' event</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets all fields in the form back to their original values</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setModel" scope="instance"><description>Sets the model used by this scaffold. Can pass in the model string name or the model constructor</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setValues" scope="instance"><description>Sets the values of form fields in bulk. Example usage:
myForm.setValues({
    name: 'Ed',
    crazy: true,
    username: 'edspencer'
});</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="showMask" scope="instance"><description>Shows a generic/custom mask over a designated Element.</description></method><method name="submit" scope="instance"><description>Performs a Ajax-based submission of form values (if standardSubmit is false) or otherwise 
executes a standard HTML Form submit action.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="updateRecord" scope="instance"><description>Updates a model instance with the current values of this form</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext.Element"><description>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.
All instances of this class inherit the methods of Ext.Fx making visual effects easily available to all DOM elements.
Note that the events documented in this class are not Ext events, they encapsulate browser events. To
access the underlying browser event, see Ext.EventObject.browserEvent. Some older
browsers may not support the full range of events. Which events are supported is beyond the control of ExtJs.
Usage:
// by id
var el = Ext.get(&quot;my-div&quot;);

// by DOM element reference
var el = Ext.get(myDivElement);
Animations
When an element is manipulated, by default there is no animation.
var el = Ext.get(&quot;my-div&quot;);

// no animation
el.setWidth(100);
Many of the functions for manipulating an element have an optional &quot;animate&quot; parameter.  This
parameter can be specified as boolean (true) for default animation effects.
// default animation
el.setWidth(100, true);
To configure the effects, an object literal with animation options to use as the Element animation
configuration object can also be specified. Note that the supported Element animation configuration
options are a subset of the Ext.Fx animation options specific to Fx effects.  The supported
Element animation configuration options are:

Option    Default   Description
--------- --------  ---------------------------------------------
duration  .35       The duration of the animation in seconds
easing    easeOut   The easing method
callback  none      A function to execute when the anim completes
scope     this      The scope (this) of the callback function

// Element animation options object
var opt = {
    duration: 1,
    easing: 'elasticIn',
    callback: this.foo,
    scope: this
};
// animation with some options set
el.setWidth(100, opt);
The Element animation object being used for the animation will be set on the options
object as &quot;anim&quot;, which allows you to stop or manipulate the animation. Here is an example:
// using the &quot;anim&quot; property to get the Anim object
if(opt.anim.isAnimated()){
    opt.anim.stop();
}
Also see the animate method for another animation technique.
 Composite (Collections of) Elements
For working with collections of Elements, see Ext.CompositeElement</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this element.  The shorthand version on is equivalent.</description></method><method name="alignTo" scope="instance"><description>Aligns this element with another element relative to the specified anchor points. If the other element is the
document it aligns it to the viewport.
The position parameter is optional, and can be specified in any one of the following formats:

Blank: Defaults to aligning the element's top-left corner to the target's bottom-left corner (&quot;tl-bl&quot;).
One anchor (deprecated): The passed anchor position is used as the target element's anchor point.
The element being aligned will position its top-left corner (tl) to that point.  This method has been
deprecated in favor of the newer two anchor syntax below.
Two anchors: If two values from the table below are passed separated by a dash, the first value is used as the
element's anchor point, and the second value is used as the target's anchor point.

In addition to the anchor points, the position parameter also supports the &quot;?&quot; character.  If &quot;?&quot; is passed at the end of
the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
that specified in order to enforce the viewport constraints.
Following are all of the supported anchor positions:

Value  Description
-----  -----------------------------
tl     The top left corner (default)
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
c      In the center of the element
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner

Example Usage:
// align el to other-el using the default positioning (&quot;tl-bl&quot;, non-constrained)
el.alignTo(&quot;other-el&quot;);

// align the top left corner of el with the top right corner of other-el (constrained to viewport)
el.alignTo(&quot;other-el&quot;, &quot;tr?&quot;);

// align the bottom right corner of el with the center left edge of other-el
el.alignTo(&quot;other-el&quot;, &quot;br-l?&quot;);

// align the center of el with the bottom left corner of other-el and
// adjust the x position by -6 pixels (and the y position by 0)
el.alignTo(&quot;other-el&quot;, &quot;c-bl&quot;, [-6, 0]);</description></method><method name="anchorTo" scope="instance"><description>Anchors an element to another element and realigns it when the window is resized.</description></method><method name="animate" scope="instance"><description>Perform custom animation on this element.

Animation Properties
The Animation Control Object enables gradual transitions for any member of an
element's style object that takes a numeric value including but not limited to
these properties:
bottom, top, left, right
height, width
margin, padding
borderWidth
opacity
fontSize
lineHeight

Animation Property Attributes
Each Animation Property is a config object with optional properties:

by*  : relative change - start at current value, change by this value
from : ignore current value, start from this value
to*  : start at current value, go to this value
unit : any allowable unit specification
* do not specify both to and by for an animation property

Animation Types
The supported animation types:
'run' : Default
var el = Ext.get('complexEl');
el.animate(
    // animation control object
    {
        borderWidth: {to: 3, from: 0},
        opacity: {to: .3, from: 1},
        height: {to: 50, from: el.getHeight()},
        width: {to: 300, from: el.getWidth()},
        top  : {by: - 100, unit: 'px'},
    },
    0.35,      // animation duration
    null,      // callback
    'easeOut', // easing method
    'run'      // animation type ('run','color','motion','scroll')
);

'color'
Animates transition of background, text, or border colors.
el.animate(
    // animation control object
    {
        color: { to: '#06e' },
        backgroundColor: { to: '#e06' }
    },
    0.35,      // animation duration
    null,      // callback
    'easeOut', // easing method
    'color'    // animation type ('run','color','motion','scroll')
);

'motion'
Animates the motion of an element to/from specific points using optional bezier
way points during transit.
el.animate(
    // animation control object
    {
        borderWidth: {to: 3, from: 0},
        opacity: {to: .3, from: 1},
        height: {to: 50, from: el.getHeight()},
        width: {to: 300, from: el.getWidth()},
        top  : {by: - 100, unit: 'px'},
        points: {
            to: [50, 100],  // go to this point
            control: [      // optional bezier way points
                [ 600, 800],
                [-100, 200]
            ]
        }
    },
    3000,      // animation duration (milliseconds!)
    null,      // callback
    'easeOut', // easing method
    'motion'   // animation type ('run','color','motion','scroll')
);

'scroll'
Animate horizontal or vertical scrolling of an overflowing page element.
el.animate(
    // animation control object
    {
        scroll: {to: [400, 300]}
    },
    0.35,      // animation duration
    null,      // callback
    'easeOut', // easing method
    'scroll'   // animation type ('run','color','motion','scroll')
);


</description></method><method name="appendChild" scope="instance"><description>Appends the passed element(s) to this element</description></method><method name="appendTo" scope="instance"><description>Appends this element to the passed element</description></method><method name="applyStyles" scope="instance"><description>Applies a style specification to an element.</description></method><method name="blur" scope="instance"><description>Tries to blur the element. Any exceptions are caught and ignored.</description></method><method name="center" scope="instance"><description>// * Centers the Element in either the viewport, or another Element.
    // *</description></method><method name="child" scope="instance"><description>Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).</description></method><method name="clearListeners" scope="instance"><description>Removes all previous added listeners from this element</description></method><method name="clearOpacity" scope="instance"><description>Clears any opacity settings from this element. Required in some cases for IE.</description></method><method name="clearPositioning" scope="instance"><description>Clear positioning back to the default when the document was loaded</description></method><method name="clip" scope="instance"><description>Store the current overflow setting and clip overflow on the element - use unclip to remove</description></method><method name="contains" scope="instance"><description>Returns true if this element is an ancestor of the passed element</description></method><method name="createChild" scope="instance"><description>Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.</description></method><method name="cssTransform" scope="instance"><description>Transform an element using CSS 3</description></method><method name="down" scope="instance"><description>Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).</description></method><method name="findParent" scope="instance"><description>Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)</description></method><method name="findParentNode" scope="instance"><description>Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)</description></method><method name="first" scope="instance"><description>Gets the first child, skipping text nodes</description></method><method name="fly" scope="instance"><description>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
the dom node can be overwritten by other code. Shorthand of Ext.Element.fly
Use this to make one-time references to DOM elements which are not going to be accessed again either by
application code, or by Ext's classes. If accessing an element which will be processed regularly, then Ext.get
will be more appropriate to take advantage of the caching provided by the Ext.Element class.</description></method><method name="focus" scope="instance"><description>Tries to focus the element. Any exceptions are caught and ignored.</description></method><method name="fromPoint" scope="instance"><description>Returns the top Element that is located at the passed coordinates
Function description</description></method><method name="get" scope="instance"><description>Retrieves Ext.Element objects.
This method does not retrieve Components. This method
retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
its ID, use Ext.ComponentMgr.get.
Uses simple caching to consistently return the same object. Automatically fixes if an
object was recreated with the same id via AJAX or DOM.</description></method><method name="getAlignToXY" scope="instance"><description>Gets the x,y coordinates to align this element with another element. See alignTo for more info on the
supported position values.</description></method><method name="getAnchorXY" scope="instance"><description>Gets the x,y coordinates specified by the anchor position on the element.</description></method><method name="getAttribute" scope="instance"><description>Returns the value of an attribute from the element's underlying DOM node.</description></method><method name="getAttributeNS" scope="instance"><description>Returns the value of a namespaced attribute from the element's underlying DOM node.</description></method><method name="getBorderWidth" scope="instance"><description>Gets the width of the border(s) for the specified side(s)</description></method><method name="getBottom" scope="instance"><description>Gets the bottom Y coordinate of the element (element Y position + element height)</description></method><method name="getBox" scope="instance"><description>Return an object defining the area of this Element which can be passed to setBox to
set another Element's size/location to match this element.</description></method><method name="getCenterXY" scope="instance"><description>// * Calculates the x, y to center this element on the screen
    // *</description></method><method name="getColor" scope="instance"><description>Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
are convert to standard 6 digit hex color.</description></method><method name="getComputedTransformOffset" scope="instance"><description>Returns the calculated CSS 2D transform offset values (translate x and y)</description></method><method name="getDocumentHeight" scope="instance"><description>Retrieves the document height</description></method><method name="getDocumentWidth" scope="instance"><description>Retrieves the document width</description></method><method name="getHTML" scope="instance"><description>Returns the innerHTML of an Element or an empty string if the element's
dom no longer exists.</description></method><method name="getHeight" scope="instance"><description>Returns the offset height of the element</description></method><method name="getLeft" scope="instance"><description>Gets the left X coordinate</description></method><method name="getMargin" scope="instance"><description>Gets the size of the margins(s) for the specified side(s)</description></method><method name="getOffsetsTo" scope="instance"><description>Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.</description></method><method name="getOrientation" scope="instance"><description>Retrieves the current orientation of the window. This is calculated by
determing if the height is greater than the width.</description></method><method name="getOuterHeight" scope="instance"><description>Retrieves the height of the element account for the top and bottom
margins.</description></method><method name="getOuterWidth" scope="instance"><description>Retrieves the width of the element accounting for the left and right
margins.</description></method><method name="getPadding" scope="instance"><description>Gets the width of the padding(s) for the specified side(s)</description></method><method name="getPageBox" scope="instance"><description>Return an object defining the area of this Element which can be passed to setBox to
set another Element's size/location to match this element.</description></method><method name="getPositioning" scope="instance"><description>Gets an object with all CSS positioning properties. Useful along with setPostioning to get
snapshot before performing an update and then restoring the element.</description></method><method name="getRight" scope="instance"><description>Gets the right X coordinate of the element (element X position + element width)</description></method><method name="getScroll" scope="instance"><description>Returns the current scroll position of the element.</description></method><method name="getScrollParent" scope="instance"><description>Gets the Scroller instance of the first parent that has one.</description></method><method name="getSize" scope="instance"><description>Returns the size of the element.</description></method><method name="getStyle" scope="instance"><description>Normalizes currentStyle and computedStyle.</description></method><method name="getTop" scope="instance"><description>Gets the top Y coordinate</description></method><method name="getValue" scope="instance"><description>Returns the value of the &quot;value&quot; attribute</description></method><method name="getViewSize" scope="instance"><description>Retrieves the viewport size of the window.</description></method><method name="getViewportHeight" scope="instance"><description>Retrieves the viewport height of the window.</description></method><method name="getViewportWidth" scope="instance"><description>Retrieves the viewport width of the window.</description></method><method name="getWidth" scope="instance"><description>Returns the offset width of the element</description></method><method name="getX" scope="instance"><description>Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description></method><method name="getXY" scope="instance"><description>Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description></method><method name="getY" scope="instance"><description>Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description></method><method name="hasCls" scope="instance"><description>Checks if the specified CSS class exists on this element's DOM node.</description></method><method name="hide" scope="instance"><description>Hide this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See setVisible.</description></method><method name="hover" scope="instance"><description>Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.</description></method><method name="insertAfter" scope="instance"><description>Inserts this element after the passed element in the DOM</description></method><method name="insertBefore" scope="instance"><description>Inserts this element before the passed element in the DOM</description></method><method name="insertFirst" scope="instance"><description>Inserts (or creates) an element (or DomHelper config) as the first child of this element</description></method><method name="insertHtml" scope="instance"><description>Inserts an html fragment into this element</description></method><method name="insertSibling" scope="instance"><description>Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element</description></method><method name="is" scope="instance"><description>Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)</description></method><method name="isBorderBox" scope="instance"><description>Tests various css rules/browsers to determine if this element uses a border box</description></method><method name="isDescendent" scope="instance"><description>Determines if this element is a descendent of the passed in Element.</description></method><method name="isScrollable" scope="instance"><description>Returns true if this element is scrollable.</description></method><method name="isVisible" scope="instance"><description>Checks whether the element is currently visible using both visibility and display properties.</description></method><method name="last" scope="instance"><description>Gets the last child, skipping text nodes</description></method><method name="load" scope="instance"><description>Updates the innerHTML of this Element
from a specified URL. Note that this is subject to the Same Origin Policy
Updating innerHTML of an element will not execute embedded &lt;script&gt; elements. This is a browser restriction.</description></method><method name="mask" scope="instance"><description>Puts a mask over this element to disable user interaction.
This method can only be applied to elements which accept child nodes.</description></method><method name="moveTo" scope="instance"><description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description></method><method name="next" scope="instance"><description>Gets the next sibling, skipping text nodes</description></method><method name="normalize" scope="instance"><description>Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax.
For example:

border-width -&gt; borderWidth
padding-top -&gt; paddingTop
</description></method><method name="on" scope="instance"><description>Appends an event handler (shorthand for addListener).</description></method><method name="parent" scope="instance"><description>Gets the parent node for this element, optionally chaining up trying to match a selector</description></method><method name="parseBox" scope="instance"><description>Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
(e.g. 10, &quot;10&quot;, &quot;10 10&quot;, &quot;10 10 10&quot; and &quot;10 10 10 10&quot; are all valid options and would return the same result)</description></method><method name="position" scope="instance"><description>Initializes positioning on this element. If a desired position is not passed, it will make the
the element positioned relative IF it is not already positioned.</description></method><method name="prev" scope="instance"><description>Gets the previous sibling, skipping text nodes</description></method><method name="purgeAllListeners" scope="instance"><description>Recursively removes all previous added listeners from this element and its children</description></method><method name="query" scope="instance"><description>Selects child nodes based on the passed CSS selector (the selector should not contain an id).</description></method><method name="radioCls" scope="instance"><description>Adds one or more CSS classes to this element and removes the same class(es) from all siblings.</description></method><method name="remove" scope="instance"><description>Removes this element's dom reference.  Note that event and cache removal is handled at Ext.removeNode</description></method><method name="removeAllListeners" scope="instance"><description>Removes all previous added listeners from this element</description></method><method name="removeAnchor" scope="instance"><description>Remove any anchor to this element. See anchorTo.</description></method><method name="removeCls" scope="instance"><description>Removes one or more CSS classes from the element.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler from this element.  The shorthand version un is equivalent.
Note: if a scope was explicitly specified when adding the
listener, the same scope must be specified here.
Example:
el.removeListener('click', this.handlerFn);
// or
el.un('click', this.handlerFn);</description></method><method name="repaint" scope="instance"><description>Forces the browser to repaint this element</description></method><method name="replace" scope="instance"><description>Replaces the passed element with this element</description></method><method name="replaceCls" scope="instance"><description>Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.</description></method><method name="replaceWith" scope="instance"><description>Replaces this element with the passed element</description></method><method name="scrollTo" scope="instance"><description>Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().</description></method><method name="select" scope="instance"><description>Creates a Ext.CompositeElement for child nodes based on the passed CSS selector (the selector should not contain an id).</description></method><method name="set" scope="instance"><description>Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)</description></method><method name="setBottom" scope="instance"><description>Sets the element's CSS bottom style.</description></method><method name="setBox" scope="instance"><description>Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.</description></method><method name="setDisplayed" scope="instance"><description>Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.</description></method><method name="setHTML" scope="instance"><description>Set the innerHTML of this element</description></method><method name="setHeight" scope="instance"><description>Set the height of this Element.
// change the height to 200px and animate with default configuration
Ext.fly('elementId').setHeight(200, true);

// change the height to 150px and animate with a custom configuration
Ext.fly('elId').setHeight(150, {
    duration : .5, // animation will have a duration of .5 seconds
    // will change the content to &quot;finished&quot;
    callback: function(){ this.update(&quot;finished&quot;); }
});</description></method><method name="setLeft" scope="instance"><description>Sets the element's left position directly using CSS style (instead of setX).</description></method><method name="setLocation" scope="instance"><description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description></method><method name="setOpacity" scope="instance"><description>Set the opacity of the element</description></method><method name="setPositioning" scope="instance"><description>Set positioning with an object returned by getPositioning().</description></method><method name="setRight" scope="instance"><description>Sets the element's CSS right style.</description></method><method name="setSize" scope="instance"><description>Set the size of this Element. If animation is true, both width and height will be animated concurrently.</description></method><method name="setStyle" scope="instance"><description>Wrapper for setting style properties, also takes single object parameter of multiple styles.</description></method><method name="setTop" scope="instance"><description>Sets the element's top position directly using CSS style (instead of setY).</description></method><method name="setTopLeft" scope="instance"><description>Sets the element's top and left positions directly using CSS style (instead of setXY)</description></method><method name="setVisibilityMode" scope="instance"><description>Sets the element's visibility mode. When setVisible() is called it
will use this to determine whether to set the visibility or the display property.</description></method><method name="setVisible" scope="instance"><description>Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.</description></method><method name="setWidth" scope="instance"><description>Set the width of this Element.</description></method><method name="setX" scope="instance"><description>Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description></method><method name="setXY" scope="instance"><description>Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description></method><method name="setY" scope="instance"><description>Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).</description></method><method name="show" scope="instance"><description>Show this element - Uses display mode to determine whether to use &quot;display&quot; or &quot;visibility&quot;. See setVisible.</description></method><method name="toggle" scope="instance"><description>Toggles the element's visibility or display, depending on visibility mode.</description></method><method name="toggleCls" scope="instance"><description>Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).</description></method><method name="translatePoints" scope="instance"><description>Translates the passed page coordinates into left/top css values for this element</description></method><method name="un" scope="instance"><description>Removes an event handler from this element (see removeListener for additional notes).</description></method><method name="unclip" scope="instance"><description>Return clipping (overflow) to original clipping before clip was called</description></method><method name="unitizeBox" scope="instance"><description>Parses a number or string representing margin sizes into an object. Supports CSS-style margin declarations
(e.g. 10, &quot;10&quot;, &quot;10 10&quot;, &quot;10 10 10&quot; and &quot;10 10 10 10&quot; are all valid options and would return the same result)</description></method><method name="unmask" scope="instance"><description>Removes a previously applied mask.</description></method><method name="up" scope="instance"><description>Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
This is a shortcut for findParentNode() that always returns an Ext.Element.</description></method><method name="update" scope="instance"><description>Update the innerHTML of this element</description></method><method name="wrap" scope="instance"><description>Creates and wraps this element with another element</description></method></methods></class><class superclass="Ext.Panel" type="Ext.form.FormPanel"><description>Simple form panel which enables easy getting and setting of field values. Can load model instances. Example usage:
var form = new Ext.form.FormPanel({
    items: [
        {
            xtype: 'textfield',
            name : 'first',
            label: 'First name'
        },
        {
            xtype: 'textfield',
            name : 'last',
            label: 'Last name'
        },
        {
            xtype: 'numberfield',
            name : 'age',
            label: 'Age'
        },
        {
            xtype: 'urlfield',
            name : 'url',
            label: 'Website'
        }
    ]
});
Loading model instances:
Ext.regModel('User', {
    fields: [
        {name: 'first', type: 'string'},
        {name: 'last',  type: 'string'},
        {name: 'age',   type: 'int'},
        {name: 'url',   type: 'string'}
    ]
});

var user = Ext.ModelMgr.create({
    first: 'Ed',
    last : 'Spencer',
    age  : 24,
    url  : 'http://extjs.com'
}, 'User');

form.load(user);</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getRecord" scope="instance"><description>Returns the Model instance currently loaded into this form (if any)</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValues" scope="instance"><description>Returns an object containing the value of each field in the form, keyed to the field's name</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="hideMask" scope="instance"><description>Hides a previously shown wait mask (See showMask)</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="load" scope="instance"><description>(Shortcut to loadRecord method) Loads matching fields from a model instance into this form</description></method><method name="loadRecord" scope="instance"><description>Loads matching fields from a model instance into this form</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets all fields in the form back to their original values</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setValues" scope="instance"><description>Sets the values of form fields in bulk. Example usage:
myForm.setValues({
    name: 'Ed',
    crazy: true,
    username: 'edspencer'
});</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="showMask" scope="instance"><description>Shows a generic/custom mask over a designated Element.</description></method><method name="submit" scope="instance"><description>Performs a Ajax-based submission of form values (if standardSubmit is false) or otherwise 
executes a standard HTML Form submit action.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="updateRecord" scope="instance"><description>Updates a model instance with the current values of this form</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Ext.Component" type="Ext.lib.Container"><description>Shared Container class</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.Container" type="Ext.SegmentedButton"><description>SegmentedButton is a container for a group of Ext.Buttons. Example usage:
var segmentedButton = new Ext.SegmentedButton({
    allowMultiple: true,
    items: [{
        text: 'Option 1',
        pressed: true
    },{
        text: 'Option 2',
        handler: tappedFn
    },{
        text: 'Option 3',
        pressed: true
    }],
    listeners : {
        toggle : function(container, button, pressed){
            console.log(&quot;User toggled the '&quot; + button.text + &quot;' button: &quot; + (pressed ? 'on' : 'off'));
        }
    }
});</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disables all buttons</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enables all buttons</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getPressed" scope="instance"><description>Gets the pressed button(s)</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setPressed" scope="instance"><description>Activates a button</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.chart.Series"><description>Common base class for chart series implementations.</description><constructors/><properties/><methods><method name="getItemForPoint" scope="instance"><description>For a given x/y point relative to the Surface, find a corresponding item from this
series, if any.</description></method><method name="highlightItem" scope="instance"><description>Highlight the given series item.</description></method><method name="unHighlight" scope="instance"><description>Un-highlight any existing highlights</description></method></methods></class><class superclass="Object" type="Ext.chart.Legend"><description>Defines a legend for a chart's series.
The 'chart' member must be set prior to rendering.</description><constructors/><properties/><methods><method name="create" scope="instance"><description>Create all the sprites for the legend</description></method><method name="createBox" scope="instance"><description>Create the box around the legend items</description></method><method name="createItems" scope="instance"><description>Create the series markers and labels</description></method><method name="getBBox" scope="instance"><description>Get the bounds for the legend's outer box</description></method><method name="isDisplayed" scope="instance"><description>Determine whether the legend should be displayed. Looks at the legend's 'visible' config,
and also the 'showInLegend' config for each of the series.</description></method><method name="updatePosition" scope="instance"><description>Update the position of all the legend's sprites to match its current x/y values</description></method></methods></class><class superclass="Ext.form.Slider" type="Ext.form.Toggle"><description>Specialized Slider with a single thumb and only two values. By default the toggle component can
be switched between the values of 0 and 1.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disables the slider by calling the internal setThumbsDisabled method</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enables the slider by calling the internal setThumbsDisabled method.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getThumb" scope="instance"><description>Returns the Thumb instance bound to this Slider</description></method><method name="getValue" scope="instance"><description>Returns the current value of the Slider's thumb</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets the new value of the slider, constraining it within minValue and maxValue, and snapping to the nearest
increment if set</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="toggle" scope="instance"><description>Toggles between the minValue (0 by default) and the maxValue (1 by default)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.Sheet" type="Ext.ActionSheet"><description>A Button Sheet class designed to popup or slide/anchor a series of buttons
var actionSheet = new Ext.ActionSheet({
    items: [{
        text: 'Confirm',
        ui: 'confirm',
        handler : Ext.emptyFn
    },{
        text : 'Cancel',
        ui: 'decline',
        handler: Ext.emptyFn
    }]
});
actionSheet.show();</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addDocked" scope="instance"><description>Adds docked item(s) to the panel.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Attempts a default component lookup (see Ext.Container.getComponent). If the component is not found in the normal
items, the dockedItems are searched and the matched component (if any) returned (see {@loink #getDockedComponent}).</description></method><method name="getDockedComponent" scope="instance"><description>Finds a docked component by id, itemId or position</description></method><method name="getDockedItems" scope="instance"><description>Retrieve an array of all currently docked components.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="insertDocked" scope="instance"><description>Inserts docked item(s) to the panel at the indicated position.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeDocked" scope="instance"><description>Removes the docked item from the panel.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the state of the progress bar, with an empty value and no text.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setText" scope="instance"><description>Sets the text for the progress bar.</description></method><method name="setValue" scope="instance"><description>Set the value of the progress bar</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method><method name="wait" scope="instance"><description>Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling reset.  The wait method accepts a config object with
the following properties:

Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.

Example usage:
var p = new Ext.ProgressBar({
    width: 200
}).show();

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function(){
    p.reset();
});</description></method></methods></class><class superclass="Object" type="Ext.ComponentMgr"><description>Provides a registry of all Components (instances of Ext.Component or any subclass
thereof) on a page so that they can be easily accessed by component
id (see get, or the convenience method Ext.getCmp).
This object also provides a registry of available Component classes
indexed by a mnemonic code known as the Component's xtype.
The xtype provides a way to avoid instantiating child Components
when creating a full, nested config object for a complete Ext page.
A child Component may be specified simply as a config object
as long as the correct xtype is specified so that if and when the Component
needs rendering, the correct type can be looked up for lazy instantiation.
For a list of all available xtypes, see Ext.Component.</description><constructors/><properties/><methods><method name="create" scope="instance"><description>Creates a new Component from the specified config object using the
config object's xtype to determine the class to instantiate.</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.NumberField"><description>Wraps an HTML5 number field. See FormPanel for example usage.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Object" type="Ext.fx2.propHandler.color"><description/><constructors/><properties/><methods/></class><class superclass="Ext.util.Observable" type="Ext.fx2.Anim"><description>Animation instance...</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.util.Draggable"><description/><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys this Draggable instance.</description></method><method name="disable" scope="instance"><description>Disable the Draggable.</description></method><method name="enable" scope="instance"><description>Enable the Draggable.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getOffset" scope="instance"><description>Returns the current offset relative to the original location of this Draggable.</description></method><method name="getProxyEl" scope="instance"><description>Returns the element thats is being visually dragged.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="isDragging" scope="instance"><description>Method to determine whether this Draggable is currently dragging.</description></method><method name="isHorizontal" scope="instance"><description>Method to determine whether this Sortable is currently sorting.</description></method><method name="isVertical" scope="instance"><description>Method to determine whether this Sortable is currently disabled.</description></method><method name="moveTo" scope="instance"><description>Use this to move the draggable to a coordinate on the screen.</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setEnabled" scope="instance"><description>Combined method to disable or enable the Draggable. This method is called by the enable and
disable methods.</description></method><method name="setOffset" scope="instance"><description>Sets the offset of this Draggable relative to its original offset.</description></method><method name="setUseCssTransform" scope="instance"><description>Change the Draggable to use css transforms instead of style offsets
or the other way around.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Object" type="Function"><description>These functions are available on every Function object (any JavaScript function).</description><constructors/><properties/><methods><method name="createCallback" scope="instance"><description>Creates a callback that passes arguments[0], arguments[1], arguments[2], ...
Call directly on any function. Example: myFunction.createCallback(arg1, arg2)
Will create a function that is bound to those 2 args. If a specific scope is required in the
callback, use Ext.util.Function.createDelegate instead. The function returned by createCallback always
executes in the window scope.
This method is required when you want to pass arguments to a callback function.  If no arguments
are needed, you can simply pass a reference to the function as a callback (e.g., callback: myFn).
However, if you tried to pass a function with arguments (e.g., callback: myFn(arg1, arg2)) the function
would simply execute immediately when the code is parsed. Example usage:
var sayHi = function(name){
    alert('Hi, ' + name);
}

// clicking the button alerts &quot;Hi, Fred&quot;
new Ext.Button({
    text: 'Say Hi',
    renderTo: Ext.getBody(),
    handler: sayHi.createCallback('Fred')
});</description></method></methods></class><class superclass="Ext.Component" type="Ext.DataView"><description>A mechanism for displaying data using custom layout templates and formatting. DataView uses an Ext.XTemplate
as its internal templating mechanism, and is bound to an Ext.data.Store
so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
mouseover, mouseout, etc. as well as a built-in selection model. In order to use these features, an itemSelector
config must be provided for the DataView to determine what nodes it will be working with.
The example below binds a DataView to a Ext.data.Store and renders it into an Ext.Panel.
var store = new Ext.data.JsonStore({
    url: 'get-images.php',
    root: 'images',
    fields: [
        'name', 'url',
        {name:'size', type: 'float'},
        {name:'lastmod', type:'date', dateFormat:'timestamp'}
    ]
});
store.load();

var tpl = new Ext.XTemplate(
    '&lt;tpl for=&quot;.&quot;&gt;',
        '&lt;div class=&quot;thumb-wrap&quot; id=&quot;{name}&quot;&gt;',
        '&lt;div class=&quot;thumb&quot;&gt;&lt;img src=&quot;{url}&quot; title=&quot;{name}&quot;&gt;&lt;/div&gt;',
        '&lt;span class=&quot;x-editable&quot;&gt;{shortName}&lt;/span&gt;&lt;/div&gt;',
    '&lt;/tpl&gt;',
    '&lt;div class=&quot;x-clear&quot;&gt;&lt;/div&gt;'
);

var panel = new Ext.Panel({
    id:'images-view',
    frame:true,
    width:535,
    autoHeight:true,
    collapsible:true,
    layout:'fit',
    title:'Simple DataView',

    items: new Ext.DataView({
        store: store,
        tpl: tpl,
        autoHeight:true,
        multiSelect: true,
        overCls:'x-view-over',
        itemSelector:'div.thumb-wrap',
        emptyText: 'No images to display'
    })
});
panel.render(document.body);</description><constructors/><properties/><methods><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="bindStore" scope="instance"><description>Changes the data store bound to this view and refreshes it.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="collectData" scope="instance"><description>Function which can be overridden which returns the data object passed to this
DataView's template to render the whole DataView.
This is usually an Array of data objects, each element of which is processed by an
XTemplate which uses '&lt;tpl for=&quot;.&quot;&gt;' to iterate over its supplied
data object as an Array. However, named properties may be placed into the data object to
provide non-repeating data such as headings, totals etc.</description></method><method name="deselect" scope="instance"><description>Deselects a record instance by record instance or index.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable the component.</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="enable" scope="instance"><description>Enable the component</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="findItemByChild" scope="instance"><description>Returns the template node the passed child belongs to, or null if it doesn't belong to one.</description></method><method name="findTargetByEvent" scope="instance"><description>Returns the template node by the Ext.EventObject or null if it is not found.</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getNode" scope="instance"><description>Gets a template node.</description></method><method name="getNodes" scope="instance"><description>Gets a range nodes.</description></method><method name="getRecord" scope="instance"><description>Gets a record from a node</description></method><method name="getRecords" scope="instance"><description>Gets an array of the records from an array of nodes</description></method><method name="getSelectedNodes" scope="instance"><description>Gets the currently selected nodes.</description></method><method name="getSelectedRecords" scope="instance"><description>Gets an array of the selected records</description></method><method name="getSelectionCount" scope="instance"><description>Gets the number of selected nodes.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getStore" scope="instance"><description>Returns the store associated with this DataView.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="indexOf" scope="instance"><description>Finds the index of the passed node.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isSelected" scope="instance"><description>Returns true if the passed node is selected, else false.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="prepareData" scope="instance"><description>Function which can be overridden to provide custom formatting for each Record that is used by this
DataView's template to render each node.</description></method><method name="refresh" scope="instance"><description>Refreshes the view by reloading the data from the store and re-rendering the template.</description></method><method name="refreshNode" scope="instance"><description>Refreshes an individual node's data from the store.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="select" scope="instance"><description>Selects a record instance by record instance or index.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.layout.ContainerLayout" type="Ext.layout.AutoContainerLayout"><description>The AutoLayout is the default layout manager delegated by Ext.Container to
render any child Components when no layout is configured into
a Container..  AutoLayout provides only a passthrough of any layout calls
to any child containers.</description><constructors/><properties/><methods><method name="getLayoutItems" scope="instance"><description>Returns an array of child components.</description></method><method name="getTarget" scope="instance"><description>Returns the owner component's resize element.</description></method></methods></class><class superclass="Object" type="Ext.data.Writer"><description>Base Writer class used by most subclasses of Ext.data.ServerProxy. This class is
responsible for taking a set of Ext.data.Operation objects and a Ext.data.Request
object and modifying that request based on the Operations.
For example a Ext.data.JsonWriter would format the Operations and their Ext.data.Model 
instances based on the config options passed to the JsonWriter's constructor.
Writers are not needed for any kind of local storage - whether via a
Web Storage proxy (see localStorage
and sessionStorage) or just in memory via a
MemoryProxy.</description><constructors/><properties/><methods><method name="getRecordData" scope="instance"><description>Formats the data for each record before sending it to the server. This
method should be overridden to format the data in a way that differs from the default.</description></method><method name="write" scope="instance"><description>Prepares a Proxy's Ext.data.Request object</description></method></methods></class><class superclass="Ext.util.Observable" type="Ext.data.Tree"><description>Represents a tree data structure and bubbles all the events for its nodes. The nodes
in the tree have most standard DOM functionality.</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getNodeById" scope="instance"><description>Gets a node in this tree by its id.</description></method><method name="getRootNode" scope="instance"><description>Returns the root node for this tree.</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setRootNode" scope="instance"><description>Sets the root node for this tree.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method></methods></class><class superclass="Object" type="Ext.LoadMask"><description>A simple utility class for generically masking elements while loading data.  If the store
config option is specified, the masking will be automatically synchronized with the store's loading
process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
element's Updater load indicator and will be destroyed after the initial load.
Example usage:
// Basic mask:
var myMask = new Ext.LoadMask(Ext.getBody(), {msg:&quot;Please wait...&quot;});
myMask.show();</description><constructors/><properties/><methods><method name="bindStore" scope="instance"><description>Changes the data store bound to this LoadMask.</description></method><method name="disable" scope="instance"><description>Disables the mask to prevent it from being displayed</description></method><method name="enable" scope="instance"><description>Enables the mask so that it can be displayed</description></method><method name="hide" scope="instance"><description>Hide this LoadMask.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this LoadMask is currently disabled.</description></method><method name="show" scope="instance"><description>Show this LoadMask over the configured Element.</description></method></methods></class><class superclass="Ext.data.Proxy" type="Ext.data.ServerProxy"><description>ServerProxy is a superclass of ScriptTagProxy and AjaxProxy,
and would not usually be used directly.
ServerProxy should ideally be named HttpProxy as it is a superclass for all HTTP proxies - for Ext JS 4.x it has been 
called ServerProxy to enable any 3.x applications that reference the HttpProxy to continue to work (HttpProxy is now an 
alias of AjaxProxy).</description><constructors/><properties/><methods><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="afterRequest" scope="instance"><description>Optional callback function which can be used to clean up after a request has been completed.</description></method><method name="batch" scope="instance"><description>Performs a batch of Operations, in the order specified by batchOrder. Used internally by
Ext.data.Store's sync method. Example usage:
myProxy.batch({
create : [myModel1, myModel2],
update : [myModel3],
destroy: [myModel4, myModel5]
});
Where the myModel* above are Model instances - in this case 1 and 2 are new instances and have not been 
saved before, 3 has been saved previously but needs to be updated, and 4 and 5 have already been saved but should now be destroyed.</description></method><method name="buildRequest" scope="instance"><description>Creates and returns an Ext.data.Request object based on the options passed by the Store
that this Proxy is attached to.</description></method><method name="buildUrl" scope="instance"><description>Generates a url based on a given Ext.data.Request object. By default, ServerProxy's buildUrl will
add the cache-buster param to the end of the url. Subclasses may need to perform additional modifications
to the url.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="create" scope="instance"><description>Performs the given create operation.</description></method><method name="destroy" scope="instance"><description>Performs the given destroy operation.</description></method><method name="doRequest" scope="instance"><description>In ServerProxy subclasses, the create, read, update and destroy methods all pass
through to doRequest. Each ServerProxy subclass must implement the doRequest method - see Ext.data.ScriptTagProxy
and Ext.data.AjaxProxy for examples. This method carries the same signature as each of the methods that delegate to it.</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="getModel" scope="instance"><description>Returns the model attached to this Proxy</description></method><method name="getReader" scope="instance"><description>Returns the reader currently attached to this proxy instance</description></method><method name="getWriter" scope="instance"><description>Returns the writer currently attached to this proxy instance</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="read" scope="instance"><description>Performs the given read operation.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setModel" scope="instance"><description>Sets the model associated with this proxy. This will only usually be called by a Store</description></method><method name="setReader" scope="instance"><description>Sets the Proxy's Reader by string, config object or Reader instance</description></method><method name="setWriter" scope="instance"><description>Sets the Proxy's Writer by string, config object or Writer instance</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Performs the given update operation.</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.PasswordField"><description>Wraps an HTML5 password field. See FormPanel for example usage.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>//         * Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.
//         *</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>//         * Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.
//         *</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class><class superclass="Ext.form.Field" type="Ext.form.HiddenField"><description>Wraps a hidden field. See FormPanel for example usage.</description><constructors/><properties/><methods><method name="add" scope="instance"><description>Adds Component(s) to this Container.
Description :

Fires the beforeadd event before adding
The Container's default config values will be applied
accordingly (see defaults for details).
Fires the add event after the component has been added.

Notes :

If the Container is already rendered when add
is called, you may need to call doLayout to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
add multiple child components if needed while only refreshing the layout
once. For example:var tb = new Ext.Toolbar();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items (defaultType for Toolbar is 'button')
tb.add({text:'Button 2'});
tb.doLayout();             // refresh the layout
Warning: Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for BorderLayout
for more details.
</description></method><method name="addCls" scope="instance"><description>Adds a CSS class to the top level element representing this component.</description></method><method name="addEvents" scope="instance"><description>Adds the specified events to the list of events which this Observable may fire.</description></method><method name="addListener" scope="instance"><description>Appends an event handler to this object.</description></method><method name="addManagedListener" scope="instance"><description>Adds listeners to any Observable object (or Element) which are automatically removed when this Component
is destroyed.</description></method><method name="blur" scope="instance"><description>Attempts to forcefully blur input focus for the field.</description></method><method name="child" scope="instance"><description>Retrieves the first direct child of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="clearListeners" scope="instance"><description>Removes all listeners for this object including the managed listeners</description></method><method name="clearManagedListeners" scope="instance"><description>Removes all managed listeners for this object.</description></method><method name="destroy" scope="instance"><description>Destroys the Component.</description></method><method name="disable" scope="instance"><description>Disable this container by masking out</description></method><method name="doComponentLayout" scope="instance"><description>This method needs to be called whenever you change something on this component that requires the components
layout to be recalculated. An example is adding, showing or hiding a docked item to a Panel, or changing the
label of a form field. After a component layout, the container layout will automatically be run. So you could
be on the safe side and always call doComponentLayout instead of doLayout.</description></method><method name="doLayout" scope="instance"><description>Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.</description></method><method name="down" scope="instance"><description>Retrieves the first descendant of this container which matches the passed selector.
The passed in selector must comply with an Ext.ComponentQuery selector.</description></method><method name="enable" scope="instance"><description>Enable this container by removing mask</description></method><method name="enableBubble" scope="instance"><description>Enables events fired by this Observable to bubble up an owner hierarchy by calling
this.getBubbleTarget() if present. There is no implementation in the Observable base class.
This is commonly used by Ext.Components to bubble events to owner Containers. See Ext.Component.getBubbleTarget. The default
implementation in Ext.Component returns the Component's immediate owner. But if a known target is required, this can be overridden to
access the required target more quickly.
Example:Ext.override(Ext.form.Field, {
//  Add functionality to Field&#39;s initComponent to enable the change event to bubble
initComponent : Ext.createSequence(Ext.form.Field.prototype.initComponent, function() {
    this.enableBubble('change');
}),

//  We know that we want Field&#39;s events to bubble directly to the FormPanel.
getBubbleTarget : function() {
    if (!this.formPanel) {
        this.formPanel = this.findParentByType('form');
    }
    return this.formPanel;
}
});

var myForm = new Ext.formPanel({
title: 'User Details',
items: [{
    ...
}],
listeners: {
    change: function() {
        // Title goes red if form has been modified.
        myForm.header.setStyle('color', 'red');
    }
}
});</description></method><method name="fireEvent" scope="instance"><description>Fires the specified event with the passed parameters (minus the event name).
An event may be set to bubble up an Observable parent hierarchy (See Ext.Component.getBubbleTarget)
by calling enableBubble.</description></method><method name="focus" scope="instance"><description>Attempts to set the field as the active input focus.</description></method><method name="getActiveItem" scope="instance"><description>Returns the current activeItem for the layout (only for a card layout)</description></method><method name="getBubbleTarget" scope="instance"><description>Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.</description></method><method name="getComponent" scope="instance"><description>Examines this container's items property
and gets a direct child component of this container.</description></method><method name="getEl" scope="instance"><description>Retrieves the top level element representing this component.</description></method><method name="getHeight" scope="instance"><description>Gets the current height of the component's underlying element.</description></method><method name="getId" scope="instance"><description>Retrieves the id of this component.
Will autogenerate an id if one has not already been set.</description></method><method name="getInsertPosition" scope="instance"><description>This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insertBefore.</description></method><method name="getLayout" scope="instance"><description>Returns the layout instance currently associated with this Container.
If a layout has not been instantiated yet, that is done first</description></method><method name="getName" scope="instance"><description>Returns the name or hiddenName
attribute of the field if available.</description></method><method name="getSize" scope="instance"><description>Gets the current size of the component's underlying element.</description></method><method name="getValue" scope="instance"><description>Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see getRawValue.</description></method><method name="getWidth" scope="instance"><description>Gets the current width of the component's underlying element.</description></method><method name="getXTypes" scope="instance"><description>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the Ext.Component header.
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
Example usage:
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'</description></method><method name="hasListener" scope="instance"><description>Checks to see if this object has any listeners for a specified event</description></method><method name="hide" scope="instance"><description>Hide the component</description></method><method name="insert" scope="instance"><description>Inserts a Component into this Container at a specified index. Fires the
beforeadd event before inserting, then fires the add event after the
Component has been inserted.</description></method><method name="isDirty" scope="instance"><description>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.
Note that if the owning form was configured with
Ext.form.BasicForm.trackResetOnLoad
then the original value is updated when the values are loaded by
Ext.form.BasicForm.setValues.</description></method><method name="isDisabled" scope="instance"><description>Method to determine whether this Component is currently disabled.</description></method><method name="isDraggable" scope="instance"><description>Method to determine whether this Component is draggable.</description></method><method name="isDroppable" scope="instance"><description>Method to determine whether this Component is droppable.</description></method><method name="isFloating" scope="instance"><description>Method to determine whether this Component is floating.</description></method><method name="isHidden" scope="instance"><description>Method to determine whether this Component is currently set to hidden.</description></method><method name="isVisible" scope="instance"><description>Returns true if this component is visible.</description></method><method name="isXType" scope="instance"><description>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).
If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.
For a list of all available xtypes, see the Ext.Component header.
Example usage:
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance</description></method><method name="on" scope="instance"><description>Appends an event handler to this object (shorthand for addListener.)</description></method><method name="query" scope="instance"><description>Retrieves all descendant components which match the passed selector.
Executes an Ext.ComponentQuery.query using this container as its root.</description></method><method name="relayEvents" scope="instance"><description>Relays selected events from the specified Observable as if the events were fired by this.</description></method><method name="remove" scope="instance"><description>Removes a component from this container.  Fires the beforeremove event before removing, then fires
the remove event after the component has been removed.</description></method><method name="removeAll" scope="instance"><description>Removes all components from this container.</description></method><method name="removeCls" scope="instance"><description>Removes a CSS class from the top level element representing this component.</description></method><method name="removeListener" scope="instance"><description>Removes an event handler.</description></method><method name="removeManagedListener" scope="instance"><description>Removes listeners that were added by the mon method.</description></method><method name="reset" scope="instance"><description>Resets the current field value to the originally loaded value and clears any validation messages.
See Ext.form.BasicForm.trackResetOnLoad</description></method><method name="resumeEvents" scope="instance"><description>Resume firing events. (see suspendEvents)
If events were suspended using the queueSuspended parameter, then all
events fired during event suspension will be sent to any listeners now.</description></method><method name="setActiveItem" scope="instance"><description>Allows you to set the active card in this container. This
method is only available if the container uses a CardLayout.
Note that a Carousel and TabPanel both get a CardLayout
automatically, so both of those components are able to use this method.</description></method><method name="setCentered" scope="instance"><description>Show this component centered of its parent or the window
This only applies when the component is floating.</description></method><method name="setDisabled" scope="instance"><description>Enable or disable the component.</description></method><method name="setDocked" scope="instance"><description>Sets the dock position of this component in its parent panel. Note that
this only has effect if this item is part of the dockedItems collection
of a parent that has a DockLayout (note that any Panel has a DockLayout
by default)</description></method><method name="setDraggable" scope="instance"><description>Sets a Component as draggable.</description></method><method name="setFloating" scope="instance"><description>Sets a Component as floating.</description></method><method name="setHeight" scope="instance"><description>Sets the height of the component.  This method fires the resize event.</description></method><method name="setLoading" scope="instance"><description>This method allows you to show or hide a LoadMask on top of this component.</description></method><method name="setOrientation" scope="instance"><description>Sets the orientation for the Panel.</description></method><method name="setPosition" scope="instance"><description>Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.
This method fires the move event.</description></method><method name="setScrollable" scope="instance"><description>Sets a Component as scrollable.</description></method><method name="setSize" scope="instance"><description>Sets the width and height of this Component. This method fires the resize event. This method can accept
either width and height as separate arguments, or you can pass a size object like {width:10, height:20}.</description></method><method name="setValue" scope="instance"><description>Sets a data value into the field and validates it.  To set the value directly without validation see setRawValue.</description></method><method name="setVisible" scope="instance"><description>Convenience function to hide or show this component by boolean.</description></method><method name="setWidth" scope="instance"><description>Sets the width of the component.  This method fires the resize event.</description></method><method name="show" scope="instance"><description>Show the component.</description></method><method name="showBy" scope="instance"><description>Show this component relative another component or element.</description></method><method name="suspendEvents" scope="instance"><description>Suspend the firing of all events. (see resumeEvents)</description></method><method name="un" scope="instance"><description>Removes an event handler (shorthand for removeListener.)</description></method><method name="update" scope="instance"><description>Update the content area of a component.</description></method></methods></class></javascript>

